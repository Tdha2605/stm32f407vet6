
f407vet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a61c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0800a7ac  0800a7ac  0000b7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b03c  0800b03c  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b03c  0800b03c  0000c03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b044  0800b044  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b044  0800b044  0000c044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b048  0800b048  0000c048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b04c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d068  2**0
                  CONTENTS
 10 .bss          00000a74  20000068  20000068  0000d068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000adc  20000adc  0000d068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123ff  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e53  00000000  00000000  0001f497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  000222f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4f  00000000  00000000  00023320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243c7  00000000  00000000  00023f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fcb  00000000  00000000  00048336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd16d  00000000  00000000  0005e301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b46e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc4  00000000  00000000  0012b4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00130078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a794 	.word	0x0800a794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800a794 	.word	0x0800a794

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN _write */
  for (int i = 0; i < len; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_write+0x28>
  {
    SEGGER_RTT_Write(0, &ptr[i], 1);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	4413      	add	r3, r2
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f008 fc25 	bl	8009424 <SEGGER_RTT_Write>
  for (int i = 0; i < len; i++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_write+0x12>
  }
  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END _write */
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  printf("===== STM32F407 GPS Tracker =====\n");
 8000bf8:	4818      	ldr	r0, [pc, #96]	@ (8000c5c <main+0x68>)
 8000bfa:	f008 fd91 	bl	8009720 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfe:	f000 fdb7 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c02:	f000 f82f 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c06:	f000 f90b 	bl	8000e20 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c0a:	f000 f8b5 	bl	8000d78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c0e:	f000 f8dd 	bl	8000dcc <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 8000c12:	f000 f88f 	bl	8000d34 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000c16:	f004 fc8b 	bl	8005530 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ha_hal_hardware_delay(5000);
 8000c1a:	2088      	movs	r0, #136	@ 0x88
 8000c1c:	f008 fc28 	bl	8009470 <ha_hal_hardware_delay>
  SDIO_SDCard_Test();
 8000c20:	f000 f94e 	bl	8000ec0 <SDIO_SDCard_Test>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2140      	movs	r1, #64	@ 0x40
 8000c28:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <main+0x6c>)
 8000c2a:	f008 fc2e 	bl	800948a <ha_hal_gpio_set_level>
    ha_hal_hardware_delay(1000);
 8000c2e:	20e8      	movs	r0, #232	@ 0xe8
 8000c30:	f008 fc1e 	bl	8009470 <ha_hal_hardware_delay>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2140      	movs	r1, #64	@ 0x40
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <main+0x6c>)
 8000c3a:	f008 fc26 	bl	800948a <ha_hal_gpio_set_level>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_2_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2180      	movs	r1, #128	@ 0x80
 8000c42:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <main+0x6c>)
 8000c44:	f008 fc21 	bl	800948a <ha_hal_gpio_set_level>
    ha_hal_hardware_delay(1000);
 8000c48:	20e8      	movs	r0, #232	@ 0xe8
 8000c4a:	f008 fc11 	bl	8009470 <ha_hal_hardware_delay>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_2_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2180      	movs	r1, #128	@ 0x80
 8000c52:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <main+0x6c>)
 8000c54:	f008 fc19 	bl	800948a <ha_hal_gpio_set_level>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_SET);
 8000c58:	bf00      	nop
 8000c5a:	e7e3      	b.n	8000c24 <main+0x30>
 8000c5c:	0800a7ac 	.word	0x0800a7ac
 8000c60:	40020000 	.word	0x40020000

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	@ 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2230      	movs	r2, #48	@ 0x30
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f008 fe56 	bl	8009924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b27      	ldr	r3, [pc, #156]	@ (8000d2c <SystemClock_Config+0xc8>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	4a26      	ldr	r2, [pc, #152]	@ (8000d2c <SystemClock_Config+0xc8>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <SystemClock_Config+0xc8>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <SystemClock_Config+0xcc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <SystemClock_Config+0xcc>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <SystemClock_Config+0xcc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cd8:	23c0      	movs	r3, #192	@ 0xc0
 8000cda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 f931 	bl	8001f50 <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf4:	f000 fb00 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fb94 	bl	8002440 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d1e:	f000 faeb 	bl	80012f8 <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	3750      	adds	r7, #80	@ 0x50
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000

08000d34 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <MX_SDIO_SD_Init+0x3c>)
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d74 <MX_SDIO_SD_Init+0x40>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <MX_SDIO_SD_Init+0x3c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <MX_SDIO_SD_Init+0x3c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <MX_SDIO_SD_Init+0x3c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <MX_SDIO_SD_Init+0x3c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <MX_SDIO_SD_Init+0x3c>)
 8000d58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d5c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d5e:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <MX_SDIO_SD_Init+0x3c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000084 	.word	0x20000084
 8000d74:	40012c00 	.word	0x40012c00

08000d78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <MX_USART1_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000db0:	f002 ff5a 	bl	8003c68 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 fa9d 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000108 	.word	0x20000108
 8000dc8:	40011000 	.word	0x40011000

08000dcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <MX_USART2_UART_Init+0x50>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000e04:	f002 ff30 	bl	8003c68 <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e0e:	f000 fa73 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000150 	.word	0x20000150
 8000e1c:	40004400 	.word	0x40004400

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_GPIO_Init+0x98>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PIN_1_Pin|LED_PIN_2_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	21c0      	movs	r1, #192	@ 0xc0
 8000e8e:	480b      	ldr	r0, [pc, #44]	@ (8000ebc <MX_GPIO_Init+0x9c>)
 8000e90:	f001 f844 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_PIN_1_Pin LED_PIN_2_Pin */
  GPIO_InitStruct.Pin = LED_PIN_1_Pin|LED_PIN_2_Pin;
 8000e94:	23c0      	movs	r3, #192	@ 0xc0
 8000e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_GPIO_Init+0x9c>)
 8000eac:	f000 fe9a 	bl	8001be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <SDIO_SDCard_Test>:

/* USER CODE BEGIN 4 */
static void SDIO_SDCard_Test(void)
{
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
  uint32_t TotalSize, FreeSpace;
  char RW_Buffer[200];
  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, SDPath, 4);
 8000eca:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000ece:	f103 0310 	add.w	r3, r3, #16
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	49b4      	ldr	r1, [pc, #720]	@ (80011a8 <SDIO_SDCard_Test+0x2e8>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 feb3 	bl	8007c44 <f_mount>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000ee4:	f102 020f 	add.w	r2, r2, #15
 8000ee8:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000eea:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000eee:	f103 030f 	add.w	r3, r3, #15
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00d      	beq.n	8000f14 <SDIO_SDCard_Test+0x54>
    {
      sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000ef8:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000efc:	f103 030f 	add.w	r3, r3, #15
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	49a9      	ldr	r1, [pc, #676]	@ (80011ac <SDIO_SDCard_Test+0x2ec>)
 8000f06:	48aa      	ldr	r0, [pc, #680]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8000f08:	f008 fc12 	bl	8009730 <siprintf>
      printf(TxBuffer);
 8000f0c:	48a8      	ldr	r0, [pc, #672]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8000f0e:	f008 fb9f 	bl	8009650 <iprintf>
      break;
 8000f12:	e1b6      	b.n	8001282 <SDIO_SDCard_Test+0x3c2>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 8000f14:	49a7      	ldr	r1, [pc, #668]	@ (80011b4 <SDIO_SDCard_Test+0x2f4>)
 8000f16:	48a6      	ldr	r0, [pc, #664]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8000f18:	f008 fc0a 	bl	8009730 <siprintf>
    printf(TxBuffer);
 8000f1c:	48a4      	ldr	r0, [pc, #656]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8000f1e:	f008 fb97 	bl	8009650 <iprintf>
    //------------------[ Get & Print The SD Card Size & Free Space ]--------------------
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000f22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f26:	3a38      	subs	r2, #56	@ 0x38
 8000f28:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000f2c:	3b04      	subs	r3, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	48a1      	ldr	r0, [pc, #644]	@ (80011b8 <SDIO_SDCard_Test+0x2f8>)
 8000f32:	f007 fe54 	bl	8008bde <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000f36:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f3a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	3b02      	subs	r3, #2
 8000f42:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000f46:	f852 2c78 	ldr.w	r2, [r2, #-120]
 8000f4a:	8952      	ldrh	r2, [r2, #10]
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fc01 	bl	8000758 <__aeabi_ui2d>
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b98      	ldr	r3, [pc, #608]	@ (80011bc <SDIO_SDCard_Test+0x2fc>)
 8000f5c:	f7ff f990 	bl	8000280 <__aeabi_dmul>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fc70 	bl	800084c <__aeabi_d2uiz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000f72:	f102 0208 	add.w	r2, r2, #8
 8000f76:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000f78:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f7c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000f80:	895b      	ldrh	r3, [r3, #10]
 8000f82:	461a      	mov	r2, r3
 8000f84:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f88:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fbe1 	bl	8000758 <__aeabi_ui2d>
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b88      	ldr	r3, [pc, #544]	@ (80011bc <SDIO_SDCard_Test+0x2fc>)
 8000f9c:	f7ff f970 	bl	8000280 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fc50 	bl	800084c <__aeabi_d2uiz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000fb2:	f102 0204 	add.w	r2, r2, #4
 8000fb6:	6013      	str	r3, [r2, #0]
    sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000fb8:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000fbc:	f103 0308 	add.w	r3, r3, #8
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	497f      	ldr	r1, [pc, #508]	@ (80011c0 <SDIO_SDCard_Test+0x300>)
 8000fc4:	487a      	ldr	r0, [pc, #488]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8000fc6:	f008 fbb3 	bl	8009730 <siprintf>
    printf(TxBuffer);
 8000fca:	4879      	ldr	r0, [pc, #484]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8000fcc:	f008 fb40 	bl	8009650 <iprintf>
    sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000fd0:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000fd4:	f103 0304 	add.w	r3, r3, #4
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	497a      	ldr	r1, [pc, #488]	@ (80011c4 <SDIO_SDCard_Test+0x304>)
 8000fdc:	4874      	ldr	r0, [pc, #464]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8000fde:	f008 fba7 	bl	8009730 <siprintf>
    printf(TxBuffer);
 8000fe2:	4873      	ldr	r0, [pc, #460]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8000fe4:	f008 fb34 	bl	8009650 <iprintf>
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000fe8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fec:	3b34      	subs	r3, #52	@ 0x34
 8000fee:	220b      	movs	r2, #11
 8000ff0:	4975      	ldr	r1, [pc, #468]	@ (80011c8 <SDIO_SDCard_Test+0x308>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f006 fe6c 	bl	8007cd0 <f_open>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000ffe:	f102 020f 	add.w	r2, r2, #15
 8001002:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8001004:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001008:	f103 030f 	add.w	r3, r3, #15
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00d      	beq.n	800102e <SDIO_SDCard_Test+0x16e>
    {
      sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8001012:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001016:	f103 030f 	add.w	r3, r3, #15
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	496b      	ldr	r1, [pc, #428]	@ (80011cc <SDIO_SDCard_Test+0x30c>)
 8001020:	4863      	ldr	r0, [pc, #396]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8001022:	f008 fb85 	bl	8009730 <siprintf>
      printf(TxBuffer);
 8001026:	4862      	ldr	r0, [pc, #392]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8001028:	f008 fb12 	bl	8009650 <iprintf>
      break;
 800102c:	e129      	b.n	8001282 <SDIO_SDCard_Test+0x3c2>
    }
    sprintf(TxBuffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 800102e:	4968      	ldr	r1, [pc, #416]	@ (80011d0 <SDIO_SDCard_Test+0x310>)
 8001030:	485f      	ldr	r0, [pc, #380]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8001032:	f008 fb7d 	bl	8009730 <siprintf>
    printf(TxBuffer);
 8001036:	485e      	ldr	r0, [pc, #376]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8001038:	f008 fb0a 	bl	8009650 <iprintf>
    // (1) Write Data To The Text File [ Using f_puts() Function ]
    f_puts("Hello! From STM32 To SD Card Over SDIO, Using f_puts()\n", &Fil);
 800103c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001040:	3b34      	subs	r3, #52	@ 0x34
 8001042:	4619      	mov	r1, r3
 8001044:	4863      	ldr	r0, [pc, #396]	@ (80011d4 <SDIO_SDCard_Test+0x314>)
 8001046:	f007 ff34 	bl	8008eb2 <f_puts>
    // (2) Write Data To The Text File [ Using f_write() Function ]
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SDIO, Using f_write()\r\n");
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	3b0c      	subs	r3, #12
 8001050:	4a61      	ldr	r2, [pc, #388]	@ (80011d8 <SDIO_SDCard_Test+0x318>)
 8001052:	461c      	mov	r4, r3
 8001054:	4615      	mov	r5, r2
 8001056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001066:	c403      	stmia	r4!, {r0, r1}
 8001068:	8022      	strh	r2, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	3b0c      	subs	r3, #12
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f8ad 	bl	80001d0 <strlen>
 8001076:	4602      	mov	r2, r0
 8001078:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800107c:	f107 0110 	add.w	r1, r7, #16
 8001080:	390c      	subs	r1, #12
 8001082:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001086:	3834      	subs	r0, #52	@ 0x34
 8001088:	f007 f949 	bl	800831e <f_write>
    // Close The File
    f_close(&Fil);
 800108c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001090:	3b34      	subs	r3, #52	@ 0x34
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fb55 	bl	8008742 <f_close>
    //------------------[ Open A Text File For Read & Read Its Data ]--------------------
    // Open The File
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_READ);
 8001098:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800109c:	3b34      	subs	r3, #52	@ 0x34
 800109e:	2201      	movs	r2, #1
 80010a0:	4949      	ldr	r1, [pc, #292]	@ (80011c8 <SDIO_SDCard_Test+0x308>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 fe14 	bl	8007cd0 <f_open>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80010ae:	f102 020f 	add.w	r2, r2, #15
 80010b2:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 80010b4:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 80010b8:	f103 030f 	add.w	r3, r3, #15
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <SDIO_SDCard_Test+0x212>
    {
      sprintf(TxBuffer, "Error! While Opening (MyTextFile.txt) File For Read.. \r\n");
 80010c2:	4946      	ldr	r1, [pc, #280]	@ (80011dc <SDIO_SDCard_Test+0x31c>)
 80010c4:	483a      	ldr	r0, [pc, #232]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 80010c6:	f008 fb33 	bl	8009730 <siprintf>
      printf(TxBuffer);
 80010ca:	4839      	ldr	r0, [pc, #228]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 80010cc:	f008 fac0 	bl	8009650 <iprintf>
      break;
 80010d0:	e0d7      	b.n	8001282 <SDIO_SDCard_Test+0x3c2>
    }
    // (1) Read The Text File's Data [ Using f_gets() Function ]
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 80010d2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80010d6:	3a34      	subs	r2, #52	@ 0x34
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	3b0c      	subs	r3, #12
 80010de:	21c8      	movs	r1, #200	@ 0xc8
 80010e0:	4618      	mov	r0, r3
 80010e2:	f007 fe31 	bl	8008d48 <f_gets>
    sprintf(TxBuffer, "Data Read From (MyTextFile.txt) Using f_gets():%s", RW_Buffer);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	3b0c      	subs	r3, #12
 80010ec:	461a      	mov	r2, r3
 80010ee:	493c      	ldr	r1, [pc, #240]	@ (80011e0 <SDIO_SDCard_Test+0x320>)
 80010f0:	482f      	ldr	r0, [pc, #188]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 80010f2:	f008 fb1d 	bl	8009730 <siprintf>
    printf(TxBuffer);
 80010f6:	482e      	ldr	r0, [pc, #184]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 80010f8:	f008 faaa 	bl	8009650 <iprintf>
    // (2) Read The Text File's Data [ Using f_read() Function ]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 80010fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001100:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8001104:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001108:	3b3c      	subs	r3, #60	@ 0x3c
 800110a:	f107 0110 	add.w	r1, r7, #16
 800110e:	390c      	subs	r1, #12
 8001110:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001114:	3834      	subs	r0, #52	@ 0x34
 8001116:	f006 ffa3 	bl	8008060 <f_read>
    sprintf(TxBuffer, "Data Read From (MyTextFile.txt) Using f_read():%s", RW_Buffer);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	3b0c      	subs	r3, #12
 8001120:	461a      	mov	r2, r3
 8001122:	4930      	ldr	r1, [pc, #192]	@ (80011e4 <SDIO_SDCard_Test+0x324>)
 8001124:	4822      	ldr	r0, [pc, #136]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8001126:	f008 fb03 	bl	8009730 <siprintf>
    printf(TxBuffer);
 800112a:	4821      	ldr	r0, [pc, #132]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 800112c:	f008 fa90 	bl	8009650 <iprintf>
    // Close The File
    f_close(&Fil);
 8001130:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001134:	3b34      	subs	r3, #52	@ 0x34
 8001136:	4618      	mov	r0, r3
 8001138:	f007 fb03 	bl	8008742 <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 800113c:	492a      	ldr	r1, [pc, #168]	@ (80011e8 <SDIO_SDCard_Test+0x328>)
 800113e:	481c      	ldr	r0, [pc, #112]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8001140:	f008 faf6 	bl	8009730 <siprintf>
    printf(TxBuffer);
 8001144:	481a      	ldr	r0, [pc, #104]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 8001146:	f008 fa83 	bl	8009650 <iprintf>
    //------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
    // (1) Open The Existing File For Write (Update)
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_OPEN_EXISTING | FA_WRITE);
 800114a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800114e:	3b34      	subs	r3, #52	@ 0x34
 8001150:	2202      	movs	r2, #2
 8001152:	491d      	ldr	r1, [pc, #116]	@ (80011c8 <SDIO_SDCard_Test+0x308>)
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fdbb 	bl	8007cd0 <f_open>
 800115a:	4603      	mov	r3, r0
 800115c:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001160:	f102 020f 	add.w	r2, r2, #15
 8001164:	7013      	strb	r3, [r2, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8001166:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800116a:	f853 2c68 	ldr.w	r2, [r3, #-104]
 800116e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001172:	3b34      	subs	r3, #52	@ 0x34
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f007 fb0d 	bl	8008796 <f_lseek>
 800117c:	4603      	mov	r3, r0
 800117e:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001182:	f102 020f 	add.w	r2, r2, #15
 8001186:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8001188:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 800118c:	f103 030f 	add.w	r3, r3, #15
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d02c      	beq.n	80011f0 <SDIO_SDCard_Test+0x330>
    {
      sprintf(TxBuffer, "Error! While Opening (MyTextFile.txt) File For Update.. \r\n");
 8001196:	4915      	ldr	r1, [pc, #84]	@ (80011ec <SDIO_SDCard_Test+0x32c>)
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 800119a:	f008 fac9 	bl	8009730 <siprintf>
      printf(TxBuffer);
 800119e:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <SDIO_SDCard_Test+0x2f0>)
 80011a0:	f008 fa56 	bl	8009650 <iprintf>
      break;
 80011a4:	e06d      	b.n	8001282 <SDIO_SDCard_Test+0x3c2>
 80011a6:	bf00      	nop
 80011a8:	0800a7d0 	.word	0x0800a7d0
 80011ac:	0800a7d8 	.word	0x0800a7d8
 80011b0:	20000198 	.word	0x20000198
 80011b4:	0800a80c 	.word	0x0800a80c
 80011b8:	0800a830 	.word	0x0800a830
 80011bc:	3fe00000 	.word	0x3fe00000
 80011c0:	0800a834 	.word	0x0800a834
 80011c4:	0800a854 	.word	0x0800a854
 80011c8:	0800a878 	.word	0x0800a878
 80011cc:	0800a888 	.word	0x0800a888
 80011d0:	0800a8cc 	.word	0x0800a8cc
 80011d4:	0800a90c 	.word	0x0800a90c
 80011d8:	0800a944 	.word	0x0800a944
 80011dc:	0800a980 	.word	0x0800a980
 80011e0:	0800a9bc 	.word	0x0800a9bc
 80011e4:	0800a9f0 	.word	0x0800a9f0
 80011e8:	0800aa24 	.word	0x0800aa24
 80011ec:	0800aa38 	.word	0x0800aa38
    }
    // (2) Write New Line of Text Data To The File
    FR_Status = f_puts("This New Line Was Added During File Update!\r\n", &Fil);
 80011f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011f4:	3b34      	subs	r3, #52	@ 0x34
 80011f6:	4619      	mov	r1, r3
 80011f8:	4838      	ldr	r0, [pc, #224]	@ (80012dc <SDIO_SDCard_Test+0x41c>)
 80011fa:	f007 fe5a 	bl	8008eb2 <f_puts>
 80011fe:	4603      	mov	r3, r0
 8001200:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001204:	f102 020f 	add.w	r2, r2, #15
 8001208:	7013      	strb	r3, [r2, #0]
    f_close(&Fil);
 800120a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800120e:	3b34      	subs	r3, #52	@ 0x34
 8001210:	4618      	mov	r0, r3
 8001212:	f007 fa96 	bl	8008742 <f_close>
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	3b0c      	subs	r3, #12
 800121c:	22c8      	movs	r2, #200	@ 0xc8
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f008 fb7f 	bl	8009924 <memset>
    // (3) Read The Contents of The Text File After The Update
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_READ); // Open The File For Read
 8001226:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800122a:	3b34      	subs	r3, #52	@ 0x34
 800122c:	2201      	movs	r2, #1
 800122e:	492c      	ldr	r1, [pc, #176]	@ (80012e0 <SDIO_SDCard_Test+0x420>)
 8001230:	4618      	mov	r0, r3
 8001232:	f006 fd4d 	bl	8007cd0 <f_open>
 8001236:	4603      	mov	r3, r0
 8001238:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800123c:	f102 020f 	add.w	r2, r2, #15
 8001240:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8001242:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001246:	f853 2c68 	ldr.w	r2, [r3, #-104]
 800124a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800124e:	3b3c      	subs	r3, #60	@ 0x3c
 8001250:	f107 0110 	add.w	r1, r7, #16
 8001254:	390c      	subs	r1, #12
 8001256:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800125a:	3834      	subs	r0, #52	@ 0x34
 800125c:	f006 ff00 	bl	8008060 <f_read>
    sprintf(TxBuffer, "Data Read From (MyTextFile.txt) After Update:\r\n%s", RW_Buffer);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	3b0c      	subs	r3, #12
 8001266:	461a      	mov	r2, r3
 8001268:	491e      	ldr	r1, [pc, #120]	@ (80012e4 <SDIO_SDCard_Test+0x424>)
 800126a:	481f      	ldr	r0, [pc, #124]	@ (80012e8 <SDIO_SDCard_Test+0x428>)
 800126c:	f008 fa60 	bl	8009730 <siprintf>
    printf(TxBuffer);
 8001270:	481d      	ldr	r0, [pc, #116]	@ (80012e8 <SDIO_SDCard_Test+0x428>)
 8001272:	f008 f9ed 	bl	8009650 <iprintf>
    f_close(&Fil);
 8001276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800127a:	3b34      	subs	r3, #52	@ 0x34
 800127c:	4618      	mov	r0, r3
 800127e:	f007 fa60 	bl	8008742 <f_close>
        USC_CDC_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8001282:	2200      	movs	r2, #0
 8001284:	4919      	ldr	r1, [pc, #100]	@ (80012ec <SDIO_SDCard_Test+0x42c>)
 8001286:	2000      	movs	r0, #0
 8001288:	f006 fcdc 	bl	8007c44 <f_mount>
 800128c:	4603      	mov	r3, r0
 800128e:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001292:	f102 020f 	add.w	r2, r2, #15
 8001296:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 8001298:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 800129c:	f103 030f 	add.w	r3, r3, #15
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00d      	beq.n	80012c2 <SDIO_SDCard_Test+0x402>
  {
      sprintf(TxBuffer, "\r\nError! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 80012a6:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 80012aa:	f103 030f 	add.w	r3, r3, #15
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	490f      	ldr	r1, [pc, #60]	@ (80012f0 <SDIO_SDCard_Test+0x430>)
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <SDIO_SDCard_Test+0x428>)
 80012b6:	f008 fa3b 	bl	8009730 <siprintf>
      printf(TxBuffer);
 80012ba:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <SDIO_SDCard_Test+0x428>)
 80012bc:	f008 f9c8 	bl	8009650 <iprintf>
  } else{
      sprintf(TxBuffer, "\r\nSD Card Un-mounted Successfully! \r\n");
      printf(TxBuffer);
  }
}
 80012c0:	e006      	b.n	80012d0 <SDIO_SDCard_Test+0x410>
      sprintf(TxBuffer, "\r\nSD Card Un-mounted Successfully! \r\n");
 80012c2:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <SDIO_SDCard_Test+0x434>)
 80012c4:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <SDIO_SDCard_Test+0x428>)
 80012c6:	f008 fa33 	bl	8009730 <siprintf>
      printf(TxBuffer);
 80012ca:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <SDIO_SDCard_Test+0x428>)
 80012cc:	f008 f9c0 	bl	8009650 <iprintf>
}
 80012d0:	bf00      	nop
 80012d2:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bdb0      	pop	{r4, r5, r7, pc}
 80012dc:	0800aa74 	.word	0x0800aa74
 80012e0:	0800a878 	.word	0x0800a878
 80012e4:	0800aaa4 	.word	0x0800aaa4
 80012e8:	20000198 	.word	0x20000198
 80012ec:	0800a830 	.word	0x0800a830
 80012f0:	0800aad8 	.word	0x0800aad8
 80012f4:	0800ab10 	.word	0x0800ab10

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <Error_Handler+0x8>

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4a0f      	ldr	r2, [pc, #60]	@ (8001350 <HAL_MspInit+0x4c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6453      	str	r3, [r2, #68]	@ 0x44
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_MspInit+0x4c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	@ 0x40
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a35      	ldr	r2, [pc, #212]	@ (8001448 <HAL_SD_MspInit+0xf4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d163      	bne.n	800143e <HAL_SD_MspInit+0xea>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b34      	ldr	r3, [pc, #208]	@ (800144c <HAL_SD_MspInit+0xf8>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	4a33      	ldr	r2, [pc, #204]	@ (800144c <HAL_SD_MspInit+0xf8>)
 8001380:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001384:	6453      	str	r3, [r2, #68]	@ 0x44
 8001386:	4b31      	ldr	r3, [pc, #196]	@ (800144c <HAL_SD_MspInit+0xf8>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <HAL_SD_MspInit+0xf8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a2c      	ldr	r2, [pc, #176]	@ (800144c <HAL_SD_MspInit+0xf8>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <HAL_SD_MspInit+0xf8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	4b26      	ldr	r3, [pc, #152]	@ (800144c <HAL_SD_MspInit+0xf8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a25      	ldr	r2, [pc, #148]	@ (800144c <HAL_SD_MspInit+0xf8>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b23      	ldr	r3, [pc, #140]	@ (800144c <HAL_SD_MspInit+0xf8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013dc:	230c      	movs	r3, #12
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	481a      	ldr	r0, [pc, #104]	@ (8001450 <HAL_SD_MspInit+0xfc>)
 80013e8:	f000 fbfc 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013fe:	230c      	movs	r3, #12
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4811      	ldr	r0, [pc, #68]	@ (8001450 <HAL_SD_MspInit+0xfc>)
 800140a:	f000 fbeb 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800140e:	2304      	movs	r3, #4
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001416:	2301      	movs	r3, #1
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800141e:	230c      	movs	r3, #12
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	480a      	ldr	r0, [pc, #40]	@ (8001454 <HAL_SD_MspInit+0x100>)
 800142a:	f000 fbdb 	bl	8001be4 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2031      	movs	r0, #49	@ 0x31
 8001434:	f000 fb0d 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001438:	2031      	movs	r0, #49	@ 0x31
 800143a:	f000 fb26 	bl	8001a8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	@ 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40023800 	.word	0x40023800
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00

08001458 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a36      	ldr	r2, [pc, #216]	@ (8001550 <HAL_UART_MspInit+0xf8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12d      	bne.n	80014d6 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a34      	ldr	r2, [pc, #208]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a2d      	ldr	r2, [pc, #180]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c4:	2307      	movs	r3, #7
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4822      	ldr	r0, [pc, #136]	@ (8001558 <HAL_UART_MspInit+0x100>)
 80014d0:	f000 fb88 	bl	8001be4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d4:	e038      	b.n	8001548 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a20      	ldr	r2, [pc, #128]	@ (800155c <HAL_UART_MspInit+0x104>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d133      	bne.n	8001548 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 80014ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f0:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6313      	str	r3, [r2, #48]	@ 0x30
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_UART_MspInit+0xfc>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001518:	230c      	movs	r3, #12
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001528:	2307      	movs	r3, #7
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4809      	ldr	r0, [pc, #36]	@ (8001558 <HAL_UART_MspInit+0x100>)
 8001534:	f000 fb56 	bl	8001be4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	2026      	movs	r0, #38	@ 0x26
 800153e:	f000 fa88 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001542:	2026      	movs	r0, #38	@ 0x26
 8001544:	f000 faa1 	bl	8001a8a <HAL_NVIC_EnableIRQ>
}
 8001548:	bf00      	nop
 800154a:	3730      	adds	r7, #48	@ 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40011000 	.word	0x40011000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000
 800155c:	40004400 	.word	0x40004400

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <NMI_Handler+0x4>

08001568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <MemManage_Handler+0x4>

08001578 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <UsageFault_Handler+0x4>

08001588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b6:	f000 f92d 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <USART2_IRQHandler+0x10>)
 80015c6:	f002 fb9f 	bl	8003d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000150 	.word	0x20000150

080015d4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <SDIO_IRQHandler+0x10>)
 80015da:	f001 fd2d 	bl	8003038 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000084 	.word	0x20000084

080015e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e00a      	b.n	8001610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015fa:	f3af 8000 	nop.w
 80015fe:	4601      	mov	r1, r0
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	60ba      	str	r2, [r7, #8]
 8001606:	b2ca      	uxtb	r2, r1
 8001608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbf0      	blt.n	80015fa <_read+0x12>
  }

  return len;
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800164a:	605a      	str	r2, [r3, #4]
  return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_isatty>:

int _isatty(int file)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001694:	4a14      	ldr	r2, [pc, #80]	@ (80016e8 <_sbrk+0x5c>)
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <_sbrk+0x60>)
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <_sbrk+0x64>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <_sbrk+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d207      	bcs.n	80016cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016bc:	f008 f980 	bl	80099c0 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	220c      	movs	r2, #12
 80016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	e009      	b.n	80016e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <_sbrk+0x64>)
 80016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20020000 	.word	0x20020000
 80016ec:	00000400 	.word	0x00000400
 80016f0:	20000294 	.word	0x20000294
 80016f4:	20000ae0 	.word	0x20000ae0

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <SystemInit+0x20>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001702:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <SystemInit+0x20>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001754 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001720:	f7ff ffea 	bl	80016f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001724:	480c      	ldr	r0, [pc, #48]	@ (8001758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001726:	490d      	ldr	r1, [pc, #52]	@ (800175c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800173c:	4c0a      	ldr	r4, [pc, #40]	@ (8001768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174a:	f008 f93f 	bl	80099cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fa51 	bl	8000bf4 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001760:	0800b04c 	.word	0x0800b04c
  ldr r2, =_sbss
 8001764:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001768:	20000adc 	.word	0x20000adc

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f94f 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	200f      	movs	r0, #15
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fdae 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f967 	bl	8001aa6 <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f92f 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	@ (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	20000008 	.word	0x20000008
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008
 8001838:	20000298 	.word	0x20000298

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000298 	.word	0x20000298

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	@ (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	@ (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	@ (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	@ 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f7ff ff8e 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff29 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff3e 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff8e 	bl	8001990 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5d 	bl	800193c <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff31 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa2 	bl	80019f8 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff feb6 	bl	800183c <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d008      	beq.n	8001af0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2280      	movs	r2, #128	@ 0x80
 8001ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e052      	b.n	8001b96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0216 	bic.w	r2, r2, #22
 8001afe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d103      	bne.n	8001b20 <HAL_DMA_Abort+0x62>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0208 	bic.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b40:	e013      	b.n	8001b6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b42:	f7ff fe7b 	bl	800183c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d90c      	bls.n	8001b6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2220      	movs	r2, #32
 8001b54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e015      	b.n	8001b96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e4      	bne.n	8001b42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7c:	223f      	movs	r2, #63	@ 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d004      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e00c      	b.n	8001bd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e16b      	b.n	8001ed8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 815a 	bne.w	8001ed2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d005      	beq.n	8001c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d130      	bne.n	8001c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 0201 	and.w	r2, r3, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d017      	beq.n	8001cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80b4 	beq.w	8001ed2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b60      	ldr	r3, [pc, #384]	@ (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	4a5f      	ldr	r2, [pc, #380]	@ (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d86:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef4 <HAL_GPIO_Init+0x310>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a52      	ldr	r2, [pc, #328]	@ (8001ef8 <HAL_GPIO_Init+0x314>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02b      	beq.n	8001e0a <HAL_GPIO_Init+0x226>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a51      	ldr	r2, [pc, #324]	@ (8001efc <HAL_GPIO_Init+0x318>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d025      	beq.n	8001e06 <HAL_GPIO_Init+0x222>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a50      	ldr	r2, [pc, #320]	@ (8001f00 <HAL_GPIO_Init+0x31c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01f      	beq.n	8001e02 <HAL_GPIO_Init+0x21e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f04 <HAL_GPIO_Init+0x320>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_GPIO_Init+0x21a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4e      	ldr	r2, [pc, #312]	@ (8001f08 <HAL_GPIO_Init+0x324>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x216>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f0c <HAL_GPIO_Init+0x328>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <HAL_GPIO_Init+0x212>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f10 <HAL_GPIO_Init+0x32c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_GPIO_Init+0x20e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4b      	ldr	r2, [pc, #300]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_GPIO_Init+0x20a>
 8001dea:	2307      	movs	r3, #7
 8001dec:	e00e      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e00c      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e00a      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001df6:	2305      	movs	r3, #5
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1c:	4935      	ldr	r1, [pc, #212]	@ (8001ef4 <HAL_GPIO_Init+0x310>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_GPIO_Init+0x334>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4e:	4a32      	ldr	r2, [pc, #200]	@ (8001f18 <HAL_GPIO_Init+0x334>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e54:	4b30      	ldr	r3, [pc, #192]	@ (8001f18 <HAL_GPIO_Init+0x334>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e78:	4a27      	ldr	r2, [pc, #156]	@ (8001f18 <HAL_GPIO_Init+0x334>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7e:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <HAL_GPIO_Init+0x334>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f18 <HAL_GPIO_Init+0x334>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_GPIO_Init+0x334>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ecc:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <HAL_GPIO_Init+0x334>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f ae90 	bls.w	8001c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3724      	adds	r7, #36	@ 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40021400 	.word	0x40021400
 8001f10:	40021800 	.word	0x40021800
 8001f14:	40021c00 	.word	0x40021c00
 8001f18:	40013c00 	.word	0x40013c00

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f38:	e003      	b.n	8001f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	619a      	str	r2, [r3, #24]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e267      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d075      	beq.n	800205a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f6e:	4b88      	ldr	r3, [pc, #544]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d00c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7a:	4b85      	ldr	r3, [pc, #532]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d112      	bne.n	8001fac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f86:	4b82      	ldr	r3, [pc, #520]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f92:	d10b      	bne.n	8001fac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	4b7e      	ldr	r3, [pc, #504]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d05b      	beq.n	8002058 <HAL_RCC_OscConfig+0x108>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d157      	bne.n	8002058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e242      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb4:	d106      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x74>
 8001fb6:	4b76      	ldr	r3, [pc, #472]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a75      	ldr	r2, [pc, #468]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e01d      	b.n	8002000 <HAL_RCC_OscConfig+0xb0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x98>
 8001fce:	4b70      	ldr	r3, [pc, #448]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6f      	ldr	r2, [pc, #444]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b6d      	ldr	r3, [pc, #436]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6c      	ldr	r2, [pc, #432]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xb0>
 8001fe8:	4b69      	ldr	r3, [pc, #420]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a68      	ldr	r2, [pc, #416]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b66      	ldr	r3, [pc, #408]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a65      	ldr	r2, [pc, #404]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fc18 	bl	800183c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff fc14 	bl	800183c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	@ 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e207      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b5b      	ldr	r3, [pc, #364]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0xc0>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fc04 	bl	800183c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff fc00 	bl	800183c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	@ 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1f3      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	4b51      	ldr	r3, [pc, #324]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0xe8>
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d063      	beq.n	800212e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002066:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002072:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800207a:	2b08      	cmp	r3, #8
 800207c:	d11c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207e:	4b44      	ldr	r3, [pc, #272]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	4b41      	ldr	r3, [pc, #260]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x152>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e1c7      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4937      	ldr	r1, [pc, #220]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	e03a      	b.n	800212e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	4b34      	ldr	r3, [pc, #208]	@ (8002194 <HAL_RCC_OscConfig+0x244>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7ff fbb9 	bl	800183c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ce:	f7ff fbb5 	bl	800183c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1a8      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4925      	ldr	r1, [pc, #148]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002102:	4b24      	ldr	r3, [pc, #144]	@ (8002194 <HAL_RCC_OscConfig+0x244>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff fb98 	bl	800183c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002110:	f7ff fb94 	bl	800183c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e187      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d036      	beq.n	80021a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d016      	beq.n	8002170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <HAL_RCC_OscConfig+0x248>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff fb78 	bl	800183c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff fb74 	bl	800183c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e167      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_RCC_OscConfig+0x240>)
 8002164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x200>
 800216e:	e01b      	b.n	80021a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_RCC_OscConfig+0x248>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7ff fb61 	bl	800183c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217c:	e00e      	b.n	800219c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217e:	f7ff fb5d 	bl	800183c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d907      	bls.n	800219c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e150      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
 8002190:	40023800 	.word	0x40023800
 8002194:	42470000 	.word	0x42470000
 8002198:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	4b88      	ldr	r3, [pc, #544]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ea      	bne.n	800217e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8097 	beq.w	80022e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ba:	4b81      	ldr	r3, [pc, #516]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b7d      	ldr	r3, [pc, #500]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	4a7c      	ldr	r2, [pc, #496]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d6:	4b7a      	ldr	r3, [pc, #488]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b77      	ldr	r3, [pc, #476]	@ (80023c4 <HAL_RCC_OscConfig+0x474>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b74      	ldr	r3, [pc, #464]	@ (80023c4 <HAL_RCC_OscConfig+0x474>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a73      	ldr	r2, [pc, #460]	@ (80023c4 <HAL_RCC_OscConfig+0x474>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fb1d 	bl	800183c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7ff fb19 	bl	800183c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e10c      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	4b6a      	ldr	r3, [pc, #424]	@ (80023c4 <HAL_RCC_OscConfig+0x474>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x2ea>
 800222c:	4b64      	ldr	r3, [pc, #400]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	4a63      	ldr	r2, [pc, #396]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	@ 0x70
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x324>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x30c>
 8002242:	4b5f      	ldr	r3, [pc, #380]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002246:	4a5e      	ldr	r2, [pc, #376]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6713      	str	r3, [r2, #112]	@ 0x70
 800224e:	4b5c      	ldr	r3, [pc, #368]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002252:	4a5b      	ldr	r2, [pc, #364]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6713      	str	r3, [r2, #112]	@ 0x70
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0x324>
 800225c:	4b58      	ldr	r3, [pc, #352]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002260:	4a57      	ldr	r2, [pc, #348]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	6713      	str	r3, [r2, #112]	@ 0x70
 8002268:	4b55      	ldr	r3, [pc, #340]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	4a54      	ldr	r2, [pc, #336]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d015      	beq.n	80022a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff fade 	bl	800183c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002282:	e00a      	b.n	800229a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002284:	f7ff fada 	bl	800183c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e0cb      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	4b49      	ldr	r3, [pc, #292]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0ee      	beq.n	8002284 <HAL_RCC_OscConfig+0x334>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7ff fac8 	bl	800183c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7ff fac4 	bl	800183c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0b5      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c6:	4b3e      	ldr	r3, [pc, #248]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ee      	bne.n	80022b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b39      	ldr	r3, [pc, #228]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	4a38      	ldr	r2, [pc, #224]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80022de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a1 	beq.w	8002430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ee:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d05c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d141      	bne.n	8002386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b31      	ldr	r3, [pc, #196]	@ (80023c8 <HAL_RCC_OscConfig+0x478>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fa98 	bl	800183c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff fa94 	bl	800183c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e087      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	019b      	lsls	r3, r3, #6
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	3b01      	subs	r3, #1
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	491b      	ldr	r1, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_RCC_OscConfig+0x478>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff fa6d 	bl	800183c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff fa69 	bl	800183c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e05c      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x416>
 8002384:	e054      	b.n	8002430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <HAL_RCC_OscConfig+0x478>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff fa56 	bl	800183c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff fa52 	bl	800183c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e045      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_RCC_OscConfig+0x470>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x444>
 80023b2:	e03d      	b.n	8002430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e038      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000
 80023c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_RCC_OscConfig+0x4ec>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d028      	beq.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d121      	bne.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d11a      	bne.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023fc:	4013      	ands	r3, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002404:	4293      	cmp	r3, r2
 8002406:	d111      	bne.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	3b01      	subs	r3, #1
 8002416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0cc      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b68      	ldr	r3, [pc, #416]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d90c      	bls.n	800247c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b65      	ldr	r3, [pc, #404]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b63      	ldr	r3, [pc, #396]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b59      	ldr	r3, [pc, #356]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a58      	ldr	r2, [pc, #352]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800249e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b53      	ldr	r3, [pc, #332]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a52      	ldr	r2, [pc, #328]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b50      	ldr	r3, [pc, #320]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d044      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b47      	ldr	r3, [pc, #284]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e067      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b37      	ldr	r3, [pc, #220]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4934      	ldr	r1, [pc, #208]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7ff f984 	bl	800183c <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7ff f980 	bl	800183c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e04f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d20c      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b2:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 f821 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff f8e4 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00
 80025fc:	40023800 	.word	0x40023800
 8002600:	0800ab8c 	.word	0x0800ab8c
 8002604:	20000000 	.word	0x20000000
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800260c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002610:	b090      	sub	sp, #64	@ 0x40
 8002612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002624:	4b59      	ldr	r3, [pc, #356]	@ (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b08      	cmp	r3, #8
 800262e:	d00d      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x40>
 8002630:	2b08      	cmp	r3, #8
 8002632:	f200 80a1 	bhi.w	8002778 <HAL_RCC_GetSysClockFreq+0x16c>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x34>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x3a>
 800263e:	e09b      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4b53      	ldr	r3, [pc, #332]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x184>)
 8002642:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002644:	e09b      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002646:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x188>)
 8002648:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800264a:	e098      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800264c:	4b4f      	ldr	r3, [pc, #316]	@ (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002654:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002656:	4b4d      	ldr	r3, [pc, #308]	@ (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d028      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	2200      	movs	r2, #0
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	627a      	str	r2, [r7, #36]	@ 0x24
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002674:	2100      	movs	r1, #0
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x188>)
 8002678:	fb03 f201 	mul.w	r2, r3, r1
 800267c:	2300      	movs	r3, #0
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	4413      	add	r3, r2
 8002684:	4a43      	ldr	r2, [pc, #268]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x188>)
 8002686:	fba0 1202 	umull	r1, r2, r0, r2
 800268a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800268c:	460a      	mov	r2, r1
 800268e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002692:	4413      	add	r3, r2
 8002694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002698:	2200      	movs	r2, #0
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	61fa      	str	r2, [r7, #28]
 800269e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026a6:	f7fe f8f1 	bl	800088c <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4613      	mov	r3, r2
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026b2:	e053      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b4:	4b35      	ldr	r3, [pc, #212]	@ (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	2200      	movs	r2, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	617a      	str	r2, [r7, #20]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026c6:	f04f 0b00 	mov.w	fp, #0
 80026ca:	4652      	mov	r2, sl
 80026cc:	465b      	mov	r3, fp
 80026ce:	f04f 0000 	mov.w	r0, #0
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	0159      	lsls	r1, r3, #5
 80026d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026dc:	0150      	lsls	r0, r2, #5
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	ebb2 080a 	subs.w	r8, r2, sl
 80026e6:	eb63 090b 	sbc.w	r9, r3, fp
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002702:	eb63 0509 	sbc.w	r5, r3, r9
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	00eb      	lsls	r3, r5, #3
 8002710:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002714:	00e2      	lsls	r2, r4, #3
 8002716:	4614      	mov	r4, r2
 8002718:	461d      	mov	r5, r3
 800271a:	eb14 030a 	adds.w	r3, r4, sl
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	eb45 030b 	adc.w	r3, r5, fp
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002732:	4629      	mov	r1, r5
 8002734:	028b      	lsls	r3, r1, #10
 8002736:	4621      	mov	r1, r4
 8002738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800273c:	4621      	mov	r1, r4
 800273e:	028a      	lsls	r2, r1, #10
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002746:	2200      	movs	r2, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	60fa      	str	r2, [r7, #12]
 800274c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002750:	f7fe f89c 	bl	800088c <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4613      	mov	r3, r2
 800275a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800275c:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	3301      	adds	r3, #1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800276c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800276e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x184>)
 800277a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002780:	4618      	mov	r0, r3
 8002782:	3740      	adds	r7, #64	@ 0x40
 8002784:	46bd      	mov	sp, r7
 8002786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	00f42400 	.word	0x00f42400
 8002794:	017d7840 	.word	0x017d7840

08002798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800279c:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <HAL_RCC_GetHCLKFreq+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b4:	f7ff fff0 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0a9b      	lsrs	r3, r3, #10
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	@ (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	0800ab9c 	.word	0x0800ab9c

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027dc:	f7ff ffdc 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0b5b      	lsrs	r3, r3, #13
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	@ (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40023800 	.word	0x40023800
 80027fc:	0800ab9c 	.word	0x0800ab9c

08002800 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e022      	b.n	8002858 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fe fd95 	bl	8001354 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f814 	bl	8002860 <HAL_SD_InitCard>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00a      	b.n	8002858 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b08e      	sub	sp, #56	@ 0x38
 8002864:	af04      	add	r7, sp, #16
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800287c:	2376      	movs	r3, #118	@ 0x76
 800287e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681d      	ldr	r5, [r3, #0]
 8002884:	466c      	mov	r4, sp
 8002886:	f107 0318 	add.w	r3, r7, #24
 800288a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800288e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002898:	4628      	mov	r0, r5
 800289a:	f002 f917 	bl	8004acc <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <HAL_SD_InitCard+0xe8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 f958 	bl	8004b5e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80028ae:	4b26      	ldr	r3, [pc, #152]	@ (8002948 <HAL_SD_InitCard+0xe8>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80028b4:	2002      	movs	r0, #2
 80028b6:	f7fe ffcd 	bl	8001854 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f001 f878 	bl	80039b0 <SD_PowerON>
 80028c0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e02e      	b.n	800293e <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 ff97 	bl	8003814 <SD_InitCard>
 80028e6:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e01b      	b.n	800293e <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800290e:	4618      	mov	r0, r3
 8002910:	f002 f9b7 	bl	8004c82 <SDMMC_CmdBlockLength>
 8002914:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00f      	beq.n	800293c <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <HAL_SD_InitCard+0xec>)
 8002922:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3728      	adds	r7, #40	@ 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bdb0      	pop	{r4, r5, r7, pc}
 8002946:	bf00      	nop
 8002948:	422580a0 	.word	0x422580a0
 800294c:	004005ff 	.word	0x004005ff

08002950 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b092      	sub	sp, #72	@ 0x48
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800295e:	f7fe ff6d 	bl	800183c <HAL_GetTick>
 8002962:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002976:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e1c5      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	f040 81b8 	bne.w	8002d00 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002996:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	441a      	add	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d907      	bls.n	80029b4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e1ac      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2203      	movs	r2, #3
 80029b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d002      	beq.n	80029d2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80029cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ce:	025b      	lsls	r3, r3, #9
 80029d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80029de:	2390      	movs	r3, #144	@ 0x90
 80029e0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80029e2:	2302      	movs	r3, #2
 80029e4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80029ea:	2301      	movs	r3, #1
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f107 0214 	add.w	r2, r7, #20
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 f916 	bl	8004c2a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d90a      	bls.n	8002a1a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2202      	movs	r2, #2
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 f97a 	bl	8004d0a <SDMMC_CmdReadMultiBlock>
 8002a16:	6478      	str	r0, [r7, #68]	@ 0x44
 8002a18:	e009      	b.n	8002a2e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 f94d 	bl	8004cc6 <SDMMC_CmdReadSingleBlock>
 8002a2c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a7e      	ldr	r2, [pc, #504]	@ (8002c34 <HAL_SD_ReadBlocks+0x2e4>)
 8002a3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e159      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002a5e:	e061      	b.n	8002b24 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03c      	beq.n	8002ae8 <HAL_SD_ReadBlocks+0x198>
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d039      	beq.n	8002ae8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a78:	e033      	b.n	8002ae2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 f84f 	bl	8004b22 <SDIO_ReadFIFO>
 8002a84:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a90:	3301      	adds	r3, #1
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a96:	3b01      	subs	r3, #1
 8002a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aac:	3b01      	subs	r3, #1
 8002aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab2:	0c1b      	lsrs	r3, r3, #16
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002abc:	3301      	adds	r3, #1
 8002abe:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac8:	0e1b      	lsrs	r3, r3, #24
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ace:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ade:	3301      	adds	r3, #1
 8002ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d9c8      	bls.n	8002a7a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ae8:	f7fe fea8 	bl	800183c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d902      	bls.n	8002afe <HAL_SD_ReadBlocks+0x1ae>
 8002af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d112      	bne.n	8002b24 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4c      	ldr	r2, [pc, #304]	@ (8002c34 <HAL_SD_ReadBlocks+0x2e4>)
 8002b04:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0f4      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b2a:	f240 332a 	movw	r3, #810	@ 0x32a
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d095      	beq.n	8002a60 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d022      	beq.n	8002b88 <HAL_SD_ReadBlocks+0x238>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d91f      	bls.n	8002b88 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d01b      	beq.n	8002b88 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 f93f 	bl	8004dd8 <SDMMC_CmdStopTransfer>
 8002b5a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a33      	ldr	r2, [pc, #204]	@ (8002c34 <HAL_SD_ReadBlocks+0x2e4>)
 8002b68:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0c2      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_SD_ReadBlocks+0x254>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a22      	ldr	r2, [pc, #136]	@ (8002c34 <HAL_SD_ReadBlocks+0x2e4>)
 8002baa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	f043 0208 	orr.w	r2, r3, #8
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0a1      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a15      	ldr	r2, [pc, #84]	@ (8002c34 <HAL_SD_ReadBlocks+0x2e4>)
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	f043 0202 	orr.w	r2, r3, #2
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e087      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d064      	beq.n	8002cd6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a08      	ldr	r2, [pc, #32]	@ (8002c34 <HAL_SD_ReadBlocks+0x2e4>)
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06d      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
 8002c32:	bf00      	nop
 8002c34:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 ff70 	bl	8004b22 <SDIO_ReadFIFO>
 8002c42:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4e:	3301      	adds	r3, #1
 8002c50:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c54:	3b01      	subs	r3, #1
 8002c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	3301      	adds	r3, #1
 8002c66:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c76:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c80:	3b01      	subs	r3, #1
 8002c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c86:	0e1b      	lsrs	r3, r3, #24
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	3301      	adds	r3, #1
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c96:	3b01      	subs	r3, #1
 8002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002c9a:	f7fe fdcf 	bl	800183c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d902      	bls.n	8002cb0 <HAL_SD_ReadBlocks+0x360>
 8002caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d112      	bne.n	8002cd6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	@ (8002d18 <HAL_SD_ReadBlocks+0x3c8>)
 8002cb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e01b      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_SD_ReadBlocks+0x39a>
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1a6      	bne.n	8002c38 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e006      	b.n	8002d0e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3748      	adds	r7, #72	@ 0x48
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	004005ff 	.word	0x004005ff

08002d1c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b092      	sub	sp, #72	@ 0x48
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d2a:	f7fe fd87 	bl	800183c <HAL_GetTick>
 8002d2e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d42:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e16d      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	f040 8160 	bne.w	800301c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d907      	bls.n	8002d80 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e154      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2203      	movs	r2, #3
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d002      	beq.n	8002d9e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9a:	025b      	lsls	r3, r3, #9
 8002d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	025b      	lsls	r3, r3, #9
 8002da8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002daa:	2390      	movs	r3, #144	@ 0x90
 8002dac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002db6:	2301      	movs	r3, #1
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f107 0218 	add.w	r2, r7, #24
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 ff30 	bl	8004c2a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d90a      	bls.n	8002de6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 ffd8 	bl	8004d92 <SDMMC_CmdWriteMultiBlock>
 8002de2:	6478      	str	r0, [r7, #68]	@ 0x44
 8002de4:	e009      	b.n	8002dfa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2210      	movs	r2, #16
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 ffab 	bl	8004d4e <SDMMC_CmdWriteSingleBlock>
 8002df8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d012      	beq.n	8002e26 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a8b      	ldr	r2, [pc, #556]	@ (8003034 <HAL_SD_WriteBlocks+0x318>)
 8002e06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e101      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002e2a:	e065      	b.n	8002ef8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d040      	beq.n	8002ebc <HAL_SD_WriteBlocks+0x1a0>
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d03d      	beq.n	8002ebc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e44:	e037      	b.n	8002eb6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4e:	3301      	adds	r3, #1
 8002e50:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e54:	3b01      	subs	r3, #1
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	021a      	lsls	r2, r3, #8
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e66:	3301      	adds	r3, #1
 8002e68:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7e:	3301      	adds	r3, #1
 8002e80:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e84:	3b01      	subs	r3, #1
 8002e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	061a      	lsls	r2, r3, #24
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	3301      	adds	r3, #1
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f107 0214 	add.w	r2, r7, #20
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 fe46 	bl	8004b3c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d9c4      	bls.n	8002e46 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ebc:	f7fe fcbe 	bl	800183c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d902      	bls.n	8002ed2 <HAL_SD_WriteBlocks+0x1b6>
 8002ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d112      	bne.n	8002ef8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a57      	ldr	r2, [pc, #348]	@ (8003034 <HAL_SD_WriteBlocks+0x318>)
 8002ed8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e098      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002efe:	f240 331a 	movw	r3, #794	@ 0x31a
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d091      	beq.n	8002e2c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d022      	beq.n	8002f5c <HAL_SD_WriteBlocks+0x240>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d91f      	bls.n	8002f5c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d01b      	beq.n	8002f5c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 ff55 	bl	8004dd8 <SDMMC_CmdStopTransfer>
 8002f2e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003034 <HAL_SD_WriteBlocks+0x318>)
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e066      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_SD_WriteBlocks+0x25c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d012      	beq.n	8002f9e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003034 <HAL_SD_WriteBlocks+0x318>)
 8002f7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	f043 0208 	orr.w	r2, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e045      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d012      	beq.n	8002fd2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a20      	ldr	r2, [pc, #128]	@ (8003034 <HAL_SD_WriteBlocks+0x318>)
 8002fb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	f043 0202 	orr.w	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e02b      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	@ (8003034 <HAL_SD_WriteBlocks+0x318>)
 8002fe6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e011      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800300e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e006      	b.n	800302a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3748      	adds	r7, #72	@ 0x48
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	004005ff 	.word	0x004005ff

08003038 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_SD_IRQHandler+0x2e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fd5c 	bl	8003b1c <SD_Read_IT>
 8003064:	e165      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 808f 	beq.w	8003194 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800307e:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 800308e:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003092:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d039      	beq.n	8003122 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <HAL_SD_IRQHandler+0x8a>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d011      	beq.n	80030e6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 fe86 	bl	8004dd8 <SDMMC_CmdStopTransfer>
 80030cc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f92f 	bl	8003344 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_SD_IRQHandler+0xda>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f002 faac 	bl	8005670 <HAL_SD_RxCpltCallback>
 8003118:	e10b      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f002 fa9e 	bl	800565c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003120:	e107      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8102 	beq.w	8003332 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d011      	beq.n	800315c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f001 fe4b 	bl	8004dd8 <SDMMC_CmdStopTransfer>
 8003142:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8f4 	bl	8003344 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 80e5 	bne.w	8003332 <HAL_SD_IRQHandler+0x2fa>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 80df 	bne.w	8003332 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0208 	bic.w	r2, r2, #8
 8003182:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f002 fa65 	bl	800565c <HAL_SD_TxCpltCallback>
}
 8003192:	e0ce      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_SD_IRQHandler+0x17c>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fd06 	bl	8003bbe <SD_Write_IT>
 80031b2:	e0be      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ba:	f240 233a 	movw	r3, #570	@ 0x23a
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80b6 	beq.w	8003332 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	f043 0202 	orr.w	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f2:	f043 0208 	orr.w	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	f043 0208 	orr.w	r2, r3, #8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003250:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003260:	f023 0302 	bic.w	r3, r3, #2
 8003264:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f001 fdb4 	bl	8004dd8 <SDMMC_CmdStopTransfer>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f855 	bl	8003344 <HAL_SD_ErrorCallback>
}
 800329a:	e04a      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d045      	beq.n	8003332 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_SD_IRQHandler+0x282>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d011      	beq.n	80032de <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	4a1f      	ldr	r2, [pc, #124]	@ (800333c <HAL_SD_IRQHandler+0x304>)
 80032c0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fc69 	bl	8001b9e <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02f      	beq.n	8003332 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fa2e 	bl	8003738 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80032dc:	e029      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <HAL_SD_IRQHandler+0x2ba>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d011      	beq.n	8003316 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	4a12      	ldr	r2, [pc, #72]	@ (8003340 <HAL_SD_IRQHandler+0x308>)
 80032f8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fc4d 	bl	8001b9e <HAL_DMA_Abort_IT>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fa49 	bl	80037a6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003314:	e00d      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f002 f98c 	bl	8005648 <HAL_SD_AbortCallback>
}
 8003330:	e7ff      	b.n	8003332 <HAL_SD_IRQHandler+0x2fa>
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	08003739 	.word	0x08003739
 8003340:	080037a7 	.word	0x080037a7

08003344 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003366:	0f9b      	lsrs	r3, r3, #30
 8003368:	b2da      	uxtb	r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003372:	0e9b      	lsrs	r3, r3, #26
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	b2da      	uxtb	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003384:	0e1b      	lsrs	r3, r3, #24
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	b2da      	uxtb	r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	b2da      	uxtb	r2, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033b8:	0d1b      	lsrs	r3, r3, #20
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033d6:	0bdb      	lsrs	r3, r3, #15
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033e8:	0b9b      	lsrs	r3, r3, #14
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fa:	0b5b      	lsrs	r3, r3, #13
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	b2da      	uxtb	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800340c:	0b1b      	lsrs	r3, r3, #12
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	b2da      	uxtb	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003424:	2b00      	cmp	r3, #0
 8003426:	d163      	bne.n	80034f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342c:	009a      	lsls	r2, r3, #2
 800342e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003432:	4013      	ands	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003438:	0f92      	lsrs	r2, r2, #30
 800343a:	431a      	orrs	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003444:	0edb      	lsrs	r3, r3, #27
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	b2da      	uxtb	r2, r3
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003456:	0e1b      	lsrs	r3, r3, #24
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	b2da      	uxtb	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003468:	0d5b      	lsrs	r3, r3, #21
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	b2da      	uxtb	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800347a:	0c9b      	lsrs	r3, r3, #18
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	b2da      	uxtb	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800348c:	0bdb      	lsrs	r3, r3, #15
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	b2da      	uxtb	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	7e1b      	ldrb	r3, [r3, #24]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	3302      	adds	r3, #2
 80034b0:	2201      	movs	r2, #1
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034ba:	fb03 f202 	mul.w	r2, r3, r2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	7a1b      	ldrb	r3, [r3, #8]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	2201      	movs	r2, #1
 80034ce:	409a      	lsls	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80034dc:	0a52      	lsrs	r2, r2, #9
 80034de:	fb03 f202 	mul.w	r2, r3, r2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80034ee:	e031      	b.n	8003554 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d11d      	bne.n	8003534 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	431a      	orrs	r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	3301      	adds	r3, #1
 8003514:	029a      	lsls	r2, r3, #10
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003528:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	661a      	str	r2, [r3, #96]	@ 0x60
 8003532:	e00f      	b.n	8003554 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a58      	ldr	r2, [pc, #352]	@ (800369c <HAL_SD_GetCardCSD+0x344>)
 800353a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e09d      	b.n	8003690 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003558:	0b9b      	lsrs	r3, r3, #14
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800356a:	09db      	lsrs	r3, r3, #7
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003572:	b2da      	uxtb	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003582:	b2da      	uxtb	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358c:	0fdb      	lsrs	r3, r3, #31
 800358e:	b2da      	uxtb	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003598:	0f5b      	lsrs	r3, r3, #29
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035bc:	0d9b      	lsrs	r3, r3, #22
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	0d5b      	lsrs	r3, r3, #21
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	0bdb      	lsrs	r3, r3, #15
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003612:	0b9b      	lsrs	r3, r3, #14
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	0b1b      	lsrs	r3, r3, #12
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	b2da      	uxtb	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	b2da      	uxtb	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800367e:	b2da      	uxtb	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	004005ff 	.word	0x004005ff

080036a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003704:	f107 030c 	add.w	r3, r7, #12
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9de 	bl	8003acc <SD_SendStatus>
 8003710:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	0a5b      	lsrs	r3, r3, #9
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800372e:	693b      	ldr	r3, [r7, #16]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003744:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff ffd1 	bl	80036f8 <HAL_SD_GetCardState>
 8003756:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b06      	cmp	r3, #6
 800376a:	d002      	beq.n	8003772 <SD_DMATxAbort+0x3a>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b05      	cmp	r3, #5
 8003770:	d10a      	bne.n	8003788 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fb2e 	bl	8004dd8 <SDMMC_CmdStopTransfer>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f001 ff59 	bl	8005648 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003796:	e002      	b.n	800379e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff fdd3 	bl	8003344 <HAL_SD_ErrorCallback>
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80037bc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff ff9a 	bl	80036f8 <HAL_SD_GetCardState>
 80037c4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d002      	beq.n	80037e0 <SD_DMARxAbort+0x3a>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d10a      	bne.n	80037f6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 faf7 	bl	8004dd8 <SDMMC_CmdStopTransfer>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f001 ff22 	bl	8005648 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003804:	e002      	b.n	800380c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff fd9c 	bl	8003344 <HAL_SD_ErrorCallback>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003814:	b5b0      	push	{r4, r5, r7, lr}
 8003816:	b094      	sub	sp, #80	@ 0x50
 8003818:	af04      	add	r7, sp, #16
 800381a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800381c:	2301      	movs	r3, #1
 800381e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f9a8 	bl	8004b7a <SDIO_GetPowerState>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003830:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003834:	e0b8      	b.n	80039a8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	2b03      	cmp	r3, #3
 800383c:	d02f      	beq.n	800389e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fb8f 	bl	8004f66 <SDMMC_CmdSendCID>
 8003848:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800384a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <SD_InitCard+0x40>
    {
      return errorstate;
 8003850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003852:	e0a9      	b.n	80039a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f001 f9d2 	bl	8004c04 <SDIO_GetResponse>
 8003860:	4602      	mov	r2, r0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2104      	movs	r1, #4
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f9c9 	bl	8004c04 <SDIO_GetResponse>
 8003872:	4602      	mov	r2, r0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2108      	movs	r1, #8
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f9c0 	bl	8004c04 <SDIO_GetResponse>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	210c      	movs	r1, #12
 8003890:	4618      	mov	r0, r3
 8003892:	f001 f9b7 	bl	8004c04 <SDIO_GetResponse>
 8003896:	4602      	mov	r2, r0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d00d      	beq.n	80038c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f107 020e 	add.w	r2, r7, #14
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fb95 	bl	8004fe0 <SDMMC_CmdSetRelAdd>
 80038b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80038be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038c0:	e072      	b.n	80039a8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d036      	beq.n	8003938 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80038ca:	89fb      	ldrh	r3, [r7, #14]
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f001 fb5f 	bl	8004fa2 <SDMMC_CmdSendCSD>
 80038e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80038ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ee:	e05b      	b.n	80039a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f984 	bl	8004c04 <SDIO_GetResponse>
 80038fc:	4602      	mov	r2, r0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2104      	movs	r1, #4
 8003908:	4618      	mov	r0, r3
 800390a:	f001 f97b 	bl	8004c04 <SDIO_GetResponse>
 800390e:	4602      	mov	r2, r0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2108      	movs	r1, #8
 800391a:	4618      	mov	r0, r3
 800391c:	f001 f972 	bl	8004c04 <SDIO_GetResponse>
 8003920:	4602      	mov	r2, r0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	210c      	movs	r1, #12
 800392c:	4618      	mov	r0, r3
 800392e:	f001 f969 	bl	8004c04 <SDIO_GetResponse>
 8003932:	4602      	mov	r2, r0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2104      	movs	r1, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f001 f960 	bl	8004c04 <SDIO_GetResponse>
 8003944:	4603      	mov	r3, r0
 8003946:	0d1a      	lsrs	r2, r3, #20
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fd00 	bl	8003358 <HAL_SD_GetCardCSD>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800395e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003962:	e021      	b.n	80039a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6819      	ldr	r1, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	2200      	movs	r2, #0
 8003970:	461c      	mov	r4, r3
 8003972:	4615      	mov	r5, r2
 8003974:	4622      	mov	r2, r4
 8003976:	462b      	mov	r3, r5
 8003978:	4608      	mov	r0, r1
 800397a:	f001 fa4f 	bl	8004e1c <SDMMC_CmdSelDesel>
 800397e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <SD_InitCard+0x176>
  {
    return errorstate;
 8003986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003988:	e00e      	b.n	80039a8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681d      	ldr	r5, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	466c      	mov	r4, sp
 8003992:	f103 0210 	add.w	r2, r3, #16
 8003996:	ca07      	ldmia	r2, {r0, r1, r2}
 8003998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800399c:	3304      	adds	r3, #4
 800399e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a0:	4628      	mov	r0, r5
 80039a2:	f001 f893 	bl	8004acc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3740      	adds	r7, #64	@ 0x40
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bdb0      	pop	{r4, r5, r7, pc}

080039b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 fa4a 	bl	8004e62 <SDMMC_CmdGoIdleState>
 80039ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <SD_PowerON+0x2a>
  {
    return errorstate;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	e072      	b.n	8003ac0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fa5d 	bl	8004e9e <SDMMC_CmdOperCond>
 80039e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fa33 	bl	8004e62 <SDMMC_CmdGoIdleState>
 80039fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	e05b      	b.n	8003ac0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d137      	bne.n	8003a86 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fa5d 	bl	8004edc <SDMMC_CmdAppCommand>
 8003a22:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d02d      	beq.n	8003a86 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003a2e:	e047      	b.n	8003ac0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 fa50 	bl	8004edc <SDMMC_CmdAppCommand>
 8003a3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <SD_PowerON+0x98>
    {
      return errorstate;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	e03b      	b.n	8003ac0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	491e      	ldr	r1, [pc, #120]	@ (8003ac8 <SD_PowerON+0x118>)
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fa66 	bl	8004f20 <SDMMC_CmdAppOperCommand>
 8003a54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003a60:	e02e      	b.n	8003ac0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 f8cb 	bl	8004c04 <SDIO_GetResponse>
 8003a6e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	0fdb      	lsrs	r3, r3, #31
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <SD_PowerON+0xcc>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <SD_PowerON+0xce>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]

    count++;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3301      	adds	r3, #1
 8003a84:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d802      	bhi.n	8003a96 <SD_PowerON+0xe6>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0cc      	beq.n	8003a30 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d902      	bls.n	8003aa6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aa4:	e00c      	b.n	8003ac0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ab6:	e002      	b.n	8003abe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	c1100000 	.word	0xc1100000

08003acc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003adc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ae0:	e018      	b.n	8003b14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f001 fa97 	bl	8005022 <SDMMC_CmdSendStatus>
 8003af4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	e009      	b.n	8003b14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f87c 	bl	8004c04 <SDIO_GetResponse>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b28:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d03f      	beq.n	8003bb6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e033      	b.n	8003ba4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 ffee 	bl	8004b22 <SDIO_ReadFIFO>
 8003b46:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3301      	adds	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	0e1b      	lsrs	r3, r3, #24
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b07      	cmp	r3, #7
 8003ba8:	d9c8      	bls.n	8003b3c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d043      	beq.n	8003c60 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e037      	b.n	8003c4e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	021a      	lsls	r2, r3, #8
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	041a      	lsls	r2, r3, #16
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	061a      	lsls	r2, r3, #24
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f107 0208 	add.w	r2, r7, #8
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 ff7a 	bl	8004b3c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b07      	cmp	r3, #7
 8003c52:	d9c4      	bls.n	8003bde <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8003c60:	bf00      	nop
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e042      	b.n	8003d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fbe2 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	@ 0x24
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fc99 	bl	80045e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10f      	bne.n	8003d6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_UART_IRQHandler+0x66>
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb7e 	bl	8004468 <UART_Receive_IT>
      return;
 8003d6c:	e273      	b.n	8004256 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80de 	beq.w	8003f34 <HAL_UART_IRQHandler+0x22c>
 8003d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80d1 	beq.w	8003f34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_UART_IRQHandler+0xae>
 8003d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f043 0201 	orr.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_UART_IRQHandler+0xd2>
 8003dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f043 0202 	orr.w	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_UART_IRQHandler+0xf6>
 8003de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	f043 0204 	orr.w	r2, r3, #4
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d011      	beq.n	8003e2e <HAL_UART_IRQHandler+0x126>
 8003e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d105      	bne.n	8003e22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f043 0208 	orr.w	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 820a 	beq.w	800424c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_UART_IRQHandler+0x14e>
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fb09 	bl	8004468 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e60:	2b40      	cmp	r3, #64	@ 0x40
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <HAL_UART_IRQHandler+0x17a>
 8003e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04f      	beq.n	8003f22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa14 	bl	80042b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e92:	2b40      	cmp	r3, #64	@ 0x40
 8003e94:	d141      	bne.n	8003f1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ec2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1d9      	bne.n	8003e96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d013      	beq.n	8003f12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eee:	4a8a      	ldr	r2, [pc, #552]	@ (8004118 <HAL_UART_IRQHandler+0x410>)
 8003ef0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fd fe51 	bl	8001b9e <HAL_DMA_Abort_IT>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d016      	beq.n	8003f30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	e00e      	b.n	8003f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9b6 	bl	8004284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	e00a      	b.n	8003f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f9b2 	bl	8004284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	e006      	b.n	8003f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f9ae 	bl	8004284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f2e:	e18d      	b.n	800424c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f30:	bf00      	nop
    return;
 8003f32:	e18b      	b.n	800424c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	f040 8167 	bne.w	800420c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8160 	beq.w	800420c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8159 	beq.w	800420c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7a:	2b40      	cmp	r3, #64	@ 0x40
 8003f7c:	f040 80ce 	bne.w	800411c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80a9 	beq.w	80040e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	f080 80a2 	bcs.w	80040e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003faa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb6:	f000 8088 	beq.w	80040ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003fe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ff2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1d9      	bne.n	8003fba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3314      	adds	r3, #20
 800400c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800402a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800402e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004032:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800403c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e1      	bne.n	8004006 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004066:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004068:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800406c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e3      	bne.n	8004042 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800409a:	f023 0310 	bic.w	r3, r3, #16
 800409e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e3      	bne.n	8004088 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fd fcfa 	bl	8001abe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2202      	movs	r2, #2
 80040ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	b29b      	uxth	r3, r3
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8d9 	bl	8004298 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80040e6:	e0b3      	b.n	8004250 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040f0:	429a      	cmp	r2, r3
 80040f2:	f040 80ad 	bne.w	8004250 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004100:	f040 80a6 	bne.w	8004250 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8c1 	bl	8004298 <HAL_UARTEx_RxEventCallback>
      return;
 8004116:	e09b      	b.n	8004250 <HAL_UART_IRQHandler+0x548>
 8004118:	08004377 	.word	0x08004377
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004124:	b29b      	uxth	r3, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 808e 	beq.w	8004254 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8089 	beq.w	8004254 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004166:	647a      	str	r2, [r7, #68]	@ 0x44
 8004168:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800416c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e3      	bne.n	8004142 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	623b      	str	r3, [r7, #32]
   return(result);
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800419e:	633a      	str	r2, [r7, #48]	@ 0x30
 80041a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e3      	bne.n	800417a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0310 	bic.w	r3, r3, #16
 80041d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80041e4:	61fa      	str	r2, [r7, #28]
 80041e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	617b      	str	r3, [r7, #20]
   return(result);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e3      	bne.n	80041c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f847 	bl	8004298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800420a:	e023      	b.n	8004254 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800420c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <HAL_UART_IRQHandler+0x524>
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8b7 	bl	8004398 <UART_Transmit_IT>
    return;
 800422a:	e014      	b.n	8004256 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <HAL_UART_IRQHandler+0x54e>
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8f7 	bl	8004438 <UART_EndTransmit_IT>
    return;
 800424a:	e004      	b.n	8004256 <HAL_UART_IRQHandler+0x54e>
    return;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <HAL_UART_IRQHandler+0x54e>
      return;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <HAL_UART_IRQHandler+0x54e>
      return;
 8004254:	bf00      	nop
  }
}
 8004256:	37e8      	adds	r7, #232	@ 0xe8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b095      	sub	sp, #84	@ 0x54
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3314      	adds	r3, #20
 800430a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800430c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800430e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e5      	bne.n	80042ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004324:	2b01      	cmp	r3, #1
 8004326:	d119      	bne.n	800435c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	60bb      	str	r3, [r7, #8]
   return(result);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f023 0310 	bic.w	r3, r3, #16
 800433e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004348:	61ba      	str	r2, [r7, #24]
 800434a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6979      	ldr	r1, [r7, #20]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	613b      	str	r3, [r7, #16]
   return(result);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e5      	bne.n	8004328 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800436a:	bf00      	nop
 800436c:	3754      	adds	r7, #84	@ 0x54
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff ff7a 	bl	8004284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b21      	cmp	r3, #33	@ 0x21
 80043aa:	d13e      	bne.n	800442a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b4:	d114      	bne.n	80043e0 <UART_Transmit_IT+0x48>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d110      	bne.n	80043e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]
 80043de:	e008      	b.n	80043f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6211      	str	r1, [r2, #32]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4619      	mov	r1, r3
 8004400:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004414:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004424:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
  }
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800444e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff feff 	bl	800425c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	@ 0x30
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b22      	cmp	r3, #34	@ 0x22
 8004482:	f040 80aa 	bne.w	80045da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448e:	d115      	bne.n	80044bc <UART_Receive_IT+0x54>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d111      	bne.n	80044bc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b4:	1c9a      	adds	r2, r3, #2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80044ba:	e024      	b.n	8004506 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ca:	d007      	beq.n	80044dc <UART_Receive_IT+0x74>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <UART_Receive_IT+0x82>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	e008      	b.n	80044fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4619      	mov	r1, r3
 8004514:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004516:	2b00      	cmp	r3, #0
 8004518:	d15d      	bne.n	80045d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0220 	bic.w	r2, r2, #32
 8004528:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004538:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	2b01      	cmp	r3, #1
 800455e:	d135      	bne.n	80045cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	613b      	str	r3, [r7, #16]
   return(result);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f023 0310 	bic.w	r3, r3, #16
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004586:	623a      	str	r2, [r7, #32]
 8004588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	69f9      	ldr	r1, [r7, #28]
 800458c:	6a3a      	ldr	r2, [r7, #32]
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	61bb      	str	r3, [r7, #24]
   return(result);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e5      	bne.n	8004566 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d10a      	bne.n	80045be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fe67 	bl	8004298 <HAL_UARTEx_RxEventCallback>
 80045ca:	e002      	b.n	80045d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fe4f 	bl	8004270 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e002      	b.n	80045dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e000      	b.n	80045dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3730      	adds	r7, #48	@ 0x30
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e8:	b0c0      	sub	sp, #256	@ 0x100
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	68d9      	ldr	r1, [r3, #12]
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	ea40 0301 	orr.w	r3, r0, r1
 800460c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	431a      	orrs	r2, r3
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	431a      	orrs	r2, r3
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800463c:	f021 010c 	bic.w	r1, r1, #12
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800464a:	430b      	orrs	r3, r1
 800464c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	6999      	ldr	r1, [r3, #24]
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	ea40 0301 	orr.w	r3, r0, r1
 800466a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b8f      	ldr	r3, [pc, #572]	@ (80048b0 <UART_SetConfig+0x2cc>)
 8004674:	429a      	cmp	r2, r3
 8004676:	d005      	beq.n	8004684 <UART_SetConfig+0xa0>
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b8d      	ldr	r3, [pc, #564]	@ (80048b4 <UART_SetConfig+0x2d0>)
 8004680:	429a      	cmp	r2, r3
 8004682:	d104      	bne.n	800468e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7fe f8a8 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 8004688:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800468c:	e003      	b.n	8004696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800468e:	f7fe f88f 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8004692:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a0:	f040 810c 	bne.w	80048bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	1891      	adds	r1, r2, r2
 80046bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046be:	415b      	adcs	r3, r3
 80046c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046c6:	4621      	mov	r1, r4
 80046c8:	eb12 0801 	adds.w	r8, r2, r1
 80046cc:	4629      	mov	r1, r5
 80046ce:	eb43 0901 	adc.w	r9, r3, r1
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046e6:	4690      	mov	r8, r2
 80046e8:	4699      	mov	r9, r3
 80046ea:	4623      	mov	r3, r4
 80046ec:	eb18 0303 	adds.w	r3, r8, r3
 80046f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046f4:	462b      	mov	r3, r5
 80046f6:	eb49 0303 	adc.w	r3, r9, r3
 80046fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800470a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800470e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004712:	460b      	mov	r3, r1
 8004714:	18db      	adds	r3, r3, r3
 8004716:	653b      	str	r3, [r7, #80]	@ 0x50
 8004718:	4613      	mov	r3, r2
 800471a:	eb42 0303 	adc.w	r3, r2, r3
 800471e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004728:	f7fc f8b0 	bl	800088c <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4b61      	ldr	r3, [pc, #388]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004732:	fba3 2302 	umull	r2, r3, r3, r2
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	011c      	lsls	r4, r3, #4
 800473a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	1891      	adds	r1, r2, r2
 8004752:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004754:	415b      	adcs	r3, r3
 8004756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800475c:	4641      	mov	r1, r8
 800475e:	eb12 0a01 	adds.w	sl, r2, r1
 8004762:	4649      	mov	r1, r9
 8004764:	eb43 0b01 	adc.w	fp, r3, r1
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800477c:	4692      	mov	sl, r2
 800477e:	469b      	mov	fp, r3
 8004780:	4643      	mov	r3, r8
 8004782:	eb1a 0303 	adds.w	r3, sl, r3
 8004786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800478a:	464b      	mov	r3, r9
 800478c:	eb4b 0303 	adc.w	r3, fp, r3
 8004790:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047a8:	460b      	mov	r3, r1
 80047aa:	18db      	adds	r3, r3, r3
 80047ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ae:	4613      	mov	r3, r2
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047be:	f7fc f865 	bl	800088c <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	4b3b      	ldr	r3, [pc, #236]	@ (80048b8 <UART_SetConfig+0x2d4>)
 80047ca:	fba3 2301 	umull	r2, r3, r3, r1
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2264      	movs	r2, #100	@ 0x64
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	1acb      	subs	r3, r1, r3
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047de:	4b36      	ldr	r3, [pc, #216]	@ (80048b8 <UART_SetConfig+0x2d4>)
 80047e0:	fba3 2302 	umull	r2, r3, r3, r2
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047ec:	441c      	add	r4, r3
 80047ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	1891      	adds	r1, r2, r2
 8004806:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004808:	415b      	adcs	r3, r3
 800480a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800480c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004810:	4641      	mov	r1, r8
 8004812:	1851      	adds	r1, r2, r1
 8004814:	6339      	str	r1, [r7, #48]	@ 0x30
 8004816:	4649      	mov	r1, r9
 8004818:	414b      	adcs	r3, r1
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004828:	4659      	mov	r1, fp
 800482a:	00cb      	lsls	r3, r1, #3
 800482c:	4651      	mov	r1, sl
 800482e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004832:	4651      	mov	r1, sl
 8004834:	00ca      	lsls	r2, r1, #3
 8004836:	4610      	mov	r0, r2
 8004838:	4619      	mov	r1, r3
 800483a:	4603      	mov	r3, r0
 800483c:	4642      	mov	r2, r8
 800483e:	189b      	adds	r3, r3, r2
 8004840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004844:	464b      	mov	r3, r9
 8004846:	460a      	mov	r2, r1
 8004848:	eb42 0303 	adc.w	r3, r2, r3
 800484c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800485c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004864:	460b      	mov	r3, r1
 8004866:	18db      	adds	r3, r3, r3
 8004868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800486a:	4613      	mov	r3, r2
 800486c:	eb42 0303 	adc.w	r3, r2, r3
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800487a:	f7fc f807 	bl	800088c <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	@ 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	3332      	adds	r3, #50	@ 0x32
 8004896:	4a08      	ldr	r2, [pc, #32]	@ (80048b8 <UART_SetConfig+0x2d4>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 0207 	and.w	r2, r3, #7
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4422      	add	r2, r4
 80048aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048ac:	e106      	b.n	8004abc <UART_SetConfig+0x4d8>
 80048ae:	bf00      	nop
 80048b0:	40011000 	.word	0x40011000
 80048b4:	40011400 	.word	0x40011400
 80048b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048ce:	4642      	mov	r2, r8
 80048d0:	464b      	mov	r3, r9
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	6239      	str	r1, [r7, #32]
 80048d6:	415b      	adcs	r3, r3
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048de:	4641      	mov	r1, r8
 80048e0:	1854      	adds	r4, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb43 0501 	adc.w	r5, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	00eb      	lsls	r3, r5, #3
 80048f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048f6:	00e2      	lsls	r2, r4, #3
 80048f8:	4614      	mov	r4, r2
 80048fa:	461d      	mov	r5, r3
 80048fc:	4643      	mov	r3, r8
 80048fe:	18e3      	adds	r3, r4, r3
 8004900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004904:	464b      	mov	r3, r9
 8004906:	eb45 0303 	adc.w	r3, r5, r3
 800490a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800491a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800492a:	4629      	mov	r1, r5
 800492c:	008b      	lsls	r3, r1, #2
 800492e:	4621      	mov	r1, r4
 8004930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004934:	4621      	mov	r1, r4
 8004936:	008a      	lsls	r2, r1, #2
 8004938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800493c:	f7fb ffa6 	bl	800088c <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4b60      	ldr	r3, [pc, #384]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004946:	fba3 2302 	umull	r2, r3, r3, r2
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	011c      	lsls	r4, r3, #4
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800495c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	61b9      	str	r1, [r7, #24]
 8004968:	415b      	adcs	r3, r3
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6139      	str	r1, [r7, #16]
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049a4:	464b      	mov	r3, r9
 80049a6:	460a      	mov	r2, r1
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049c8:	4649      	mov	r1, r9
 80049ca:	008b      	lsls	r3, r1, #2
 80049cc:	4641      	mov	r1, r8
 80049ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d2:	4641      	mov	r1, r8
 80049d4:	008a      	lsls	r2, r1, #2
 80049d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049da:	f7fb ff57 	bl	800088c <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	4b38      	ldr	r3, [pc, #224]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 80049e6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2264      	movs	r2, #100	@ 0x64
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	1acb      	subs	r3, r1, r3
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	3332      	adds	r3, #50	@ 0x32
 80049f8:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a04:	441c      	add	r4, r3
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a24:	4641      	mov	r1, r8
 8004a26:	1851      	adds	r1, r2, r1
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	414b      	adcs	r3, r1
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	00cb      	lsls	r3, r1, #3
 8004a40:	4651      	mov	r1, sl
 8004a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a46:	4651      	mov	r1, sl
 8004a48:	00ca      	lsls	r2, r1, #3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4642      	mov	r2, r8
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a56:	464b      	mov	r3, r9
 8004a58:	460a      	mov	r2, r1
 8004a5a:	eb42 0303 	adc.w	r3, r2, r3
 8004a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a78:	4649      	mov	r1, r9
 8004a7a:	008b      	lsls	r3, r1, #2
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a82:	4641      	mov	r1, r8
 8004a84:	008a      	lsls	r2, r1, #2
 8004a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a8a:	f7fb feff 	bl	800088c <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004a94:	fba3 1302 	umull	r1, r3, r3, r2
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	2164      	movs	r1, #100	@ 0x64
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	3332      	adds	r3, #50	@ 0x32
 8004aa6:	4a08      	ldr	r2, [pc, #32]	@ (8004ac8 <UART_SetConfig+0x4e4>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	f003 020f 	and.w	r2, r3, #15
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4422      	add	r2, r4
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac8:	51eb851f 	.word	0x51eb851f

08004acc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004acc:	b084      	sub	sp, #16
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	f107 001c 	add.w	r0, r7, #28
 8004ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004ae2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004ae6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004aea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004aee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004af2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004af6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004b06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	b004      	add	sp, #16
 8004b20:	4770      	bx	lr

08004b22 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2203      	movs	r2, #3
 8004b6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0303 	and.w	r3, r3, #3
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004bb4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004bba:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004bc0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004bd0:	f023 030f 	bic.w	r3, r3, #15
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	b2db      	uxtb	r3, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3314      	adds	r3, #20
 8004c12:	461a      	mov	r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
}  
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c50:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004c56:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004c5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0

}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b088      	sub	sp, #32
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004c90:	2310      	movs	r3, #16
 8004c92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c94:	2340      	movs	r3, #64	@ 0x40
 8004c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ca0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ca2:	f107 0308 	add.w	r3, r7, #8
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ff74 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb2:	2110      	movs	r1, #16
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f9d7 	bl	8005068 <SDMMC_GetCmdResp1>
 8004cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b088      	sub	sp, #32
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004cd4:	2311      	movs	r3, #17
 8004cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cd8:	2340      	movs	r3, #64	@ 0x40
 8004cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ce4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff52 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf6:	2111      	movs	r1, #17
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f9b5 	bl	8005068 <SDMMC_GetCmdResp1>
 8004cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d00:	69fb      	ldr	r3, [r7, #28]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b088      	sub	sp, #32
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004d18:	2312      	movs	r3, #18
 8004d1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d1c:	2340      	movs	r3, #64	@ 0x40
 8004d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff30 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3a:	2112      	movs	r1, #18
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f993 	bl	8005068 <SDMMC_GetCmdResp1>
 8004d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d44:	69fb      	ldr	r3, [r7, #28]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b088      	sub	sp, #32
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004d5c:	2318      	movs	r3, #24
 8004d5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d60:	2340      	movs	r3, #64	@ 0x40
 8004d62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff0e 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7e:	2118      	movs	r1, #24
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f971 	bl	8005068 <SDMMC_GetCmdResp1>
 8004d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d88:	69fb      	ldr	r3, [r7, #28]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b088      	sub	sp, #32
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004da0:	2319      	movs	r3, #25
 8004da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004da4:	2340      	movs	r3, #64	@ 0x40
 8004da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004db0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004db2:	f107 0308 	add.w	r3, r7, #8
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff feec 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc2:	2119      	movs	r1, #25
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f94f 	bl	8005068 <SDMMC_GetCmdResp1>
 8004dca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004de4:	230c      	movs	r3, #12
 8004de6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004de8:	2340      	movs	r3, #64	@ 0x40
 8004dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004df4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff feca 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004e02:	4a05      	ldr	r2, [pc, #20]	@ (8004e18 <SDMMC_CmdStopTransfer+0x40>)
 8004e04:	210c      	movs	r1, #12
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f92e 	bl	8005068 <SDMMC_GetCmdResp1>
 8004e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	05f5e100 	.word	0x05f5e100

08004e1c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	@ 0x28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e30:	2340      	movs	r3, #64	@ 0x40
 8004e32:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e3c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e3e:	f107 0310 	add.w	r3, r7, #16
 8004e42:	4619      	mov	r1, r3
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff fea6 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4e:	2107      	movs	r1, #7
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f909 	bl	8005068 <SDMMC_GetCmdResp1>
 8004e56:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3728      	adds	r7, #40	@ 0x28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b088      	sub	sp, #32
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e80:	f107 0308 	add.w	r3, r7, #8
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fe85 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fb23 	bl	80054d8 <SDMMC_GetCmdError>
 8004e92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e94:	69fb      	ldr	r3, [r7, #28]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b088      	sub	sp, #32
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004ea6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004eaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004eac:	2308      	movs	r3, #8
 8004eae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eb0:	2340      	movs	r3, #64	@ 0x40
 8004eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ebc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff fe66 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fab6 	bl	800543c <SDMMC_GetCmdResp7>
 8004ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004eea:	2337      	movs	r3, #55	@ 0x37
 8004eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eee:	2340      	movs	r3, #64	@ 0x40
 8004ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004efa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fe47 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0c:	2137      	movs	r1, #55	@ 0x37
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8aa 	bl	8005068 <SDMMC_GetCmdResp1>
 8004f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f16:	69fb      	ldr	r3, [r7, #28]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004f36:	2329      	movs	r3, #41	@ 0x29
 8004f38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f3a:	2340      	movs	r3, #64	@ 0x40
 8004f3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f48:	f107 0308 	add.w	r3, r7, #8
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fe21 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f9bd 	bl	80052d4 <SDMMC_GetCmdResp3>
 8004f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b088      	sub	sp, #32
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f72:	2302      	movs	r3, #2
 8004f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f76:	23c0      	movs	r3, #192	@ 0xc0
 8004f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f84:	f107 0308 	add.w	r3, r7, #8
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fe03 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f957 	bl	8005244 <SDMMC_GetCmdResp2>
 8004f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f98:	69fb      	ldr	r3, [r7, #28]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b088      	sub	sp, #32
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004fb0:	2309      	movs	r3, #9
 8004fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004fb4:	23c0      	movs	r3, #192	@ 0xc0
 8004fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fc2:	f107 0308 	add.w	r3, r7, #8
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff fde4 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f938 	bl	8005244 <SDMMC_GetCmdResp2>
 8004fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ff2:	2340      	movs	r3, #64	@ 0x40
 8004ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005000:	f107 0308 	add.w	r3, r7, #8
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fdc5 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	2103      	movs	r1, #3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f99d 	bl	8005350 <SDMMC_GetCmdResp6>
 8005016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005018:	69fb      	ldr	r3, [r7, #28]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b088      	sub	sp, #32
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005030:	230d      	movs	r3, #13
 8005032:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005034:	2340      	movs	r3, #64	@ 0x40
 8005036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800503c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005040:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005042:	f107 0308 	add.w	r3, r7, #8
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fda4 	bl	8004b96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800504e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005052:	210d      	movs	r1, #13
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f807 	bl	8005068 <SDMMC_GetCmdResp1>
 800505a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800505c:	69fb      	ldr	r3, [r7, #28]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3720      	adds	r7, #32
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	460b      	mov	r3, r1
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005076:	4b70      	ldr	r3, [pc, #448]	@ (8005238 <SDMMC_GetCmdResp1+0x1d0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a70      	ldr	r2, [pc, #448]	@ (800523c <SDMMC_GetCmdResp1+0x1d4>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	0a5a      	lsrs	r2, r3, #9
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	61fa      	str	r2, [r7, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005094:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005098:	e0c9      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0ef      	beq.n	800508a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1ea      	bne.n	800508a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2204      	movs	r2, #4
 80050c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050c6:	2304      	movs	r3, #4
 80050c8:	e0b1      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d004      	beq.n	80050e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0a6      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	22c5      	movs	r2, #197	@ 0xc5
 80050e4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff fd7f 	bl	8004bea <SDIO_GetCommandResponse>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	7afb      	ldrb	r3, [r7, #11]
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d001      	beq.n	80050fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e099      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80050fa:	2100      	movs	r1, #0
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff fd81 	bl	8004c04 <SDIO_GetResponse>
 8005102:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4b4e      	ldr	r3, [pc, #312]	@ (8005240 <SDMMC_GetCmdResp1+0x1d8>)
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800510e:	2300      	movs	r3, #0
 8005110:	e08d      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	da02      	bge.n	800511e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005118:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800511c:	e087      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005128:	2340      	movs	r3, #64	@ 0x40
 800512a:	e080      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005136:	2380      	movs	r3, #128	@ 0x80
 8005138:	e079      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005148:	e071      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005158:	e069      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005168:	e061      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005174:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005178:	e059      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005188:	e051      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005194:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005198:	e049      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80051a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051a8:	e041      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80051b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051b8:	e039      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80051c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051c8:	e031      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80051d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80051d8:	e029      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80051e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80051e8:	e021      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80051f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80051f8:	e019      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005204:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005208:	e011      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005214:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005218:	e009      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005224:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005228:	e001      	b.n	800522e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800522a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000000 	.word	0x20000000
 800523c:	10624dd3 	.word	0x10624dd3
 8005240:	fdffe008 	.word	0xfdffe008

08005244 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800524c:	4b1f      	ldr	r3, [pc, #124]	@ (80052cc <SDMMC_GetCmdResp2+0x88>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1f      	ldr	r2, [pc, #124]	@ (80052d0 <SDMMC_GetCmdResp2+0x8c>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	0a5b      	lsrs	r3, r3, #9
 8005258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1e5a      	subs	r2, r3, #1
 8005266:	60fa      	str	r2, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800526c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005270:	e026      	b.n	80052c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005276:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ef      	beq.n	8005262 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ea      	bne.n	8005262 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2204      	movs	r2, #4
 800529c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800529e:	2304      	movs	r3, #4
 80052a0:	e00e      	b.n	80052c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e003      	b.n	80052c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	22c5      	movs	r2, #197	@ 0xc5
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000000 	.word	0x20000000
 80052d0:	10624dd3 	.word	0x10624dd3

080052d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005348 <SDMMC_GetCmdResp3+0x74>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1a      	ldr	r2, [pc, #104]	@ (800534c <SDMMC_GetCmdResp3+0x78>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	0a5b      	lsrs	r3, r3, #9
 80052e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1e5a      	subs	r2, r3, #1
 80052f6:	60fa      	str	r2, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005300:	e01b      	b.n	800533a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005306:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ef      	beq.n	80052f2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1ea      	bne.n	80052f2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2204      	movs	r2, #4
 800532c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800532e:	2304      	movs	r3, #4
 8005330:	e003      	b.n	800533a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	22c5      	movs	r2, #197	@ 0xc5
 8005336:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000000 	.word	0x20000000
 800534c:	10624dd3 	.word	0x10624dd3

08005350 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	460b      	mov	r3, r1
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800535e:	4b35      	ldr	r3, [pc, #212]	@ (8005434 <SDMMC_GetCmdResp6+0xe4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a35      	ldr	r2, [pc, #212]	@ (8005438 <SDMMC_GetCmdResp6+0xe8>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	0a5b      	lsrs	r3, r3, #9
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	1e5a      	subs	r2, r3, #1
 8005378:	61fa      	str	r2, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800537e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005382:	e052      	b.n	800542a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005388:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ef      	beq.n	8005374 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1ea      	bne.n	8005374 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2204      	movs	r2, #4
 80053ae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053b0:	2304      	movs	r3, #4
 80053b2:	e03a      	b.n	800542a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e02f      	b.n	800542a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fc0d 	bl	8004bea <SDIO_GetCommandResponse>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	7afb      	ldrb	r3, [r7, #11]
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d001      	beq.n	80053de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053da:	2301      	movs	r3, #1
 80053dc:	e025      	b.n	800542a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	22c5      	movs	r2, #197	@ 0xc5
 80053e2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80053e4:	2100      	movs	r1, #0
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fc0c 	bl	8004c04 <SDIO_GetResponse>
 80053ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005402:	2300      	movs	r3, #0
 8005404:	e011      	b.n	800542a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005414:	e009      	b.n	800542a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005424:	e001      	b.n	800542a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005426:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000000 	.word	0x20000000
 8005438:	10624dd3 	.word	0x10624dd3

0800543c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005444:	4b22      	ldr	r3, [pc, #136]	@ (80054d0 <SDMMC_GetCmdResp7+0x94>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a22      	ldr	r2, [pc, #136]	@ (80054d4 <SDMMC_GetCmdResp7+0x98>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0a5b      	lsrs	r3, r3, #9
 8005450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005454:	fb02 f303 	mul.w	r3, r2, r3
 8005458:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1e5a      	subs	r2, r3, #1
 800545e:	60fa      	str	r2, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005464:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005468:	e02c      	b.n	80054c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0ef      	beq.n	800545a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ea      	bne.n	800545a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2204      	movs	r2, #4
 8005494:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005496:	2304      	movs	r3, #4
 8005498:	e014      	b.n	80054c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e009      	b.n	80054c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2240      	movs	r2, #64	@ 0x40
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80054c2:	2300      	movs	r3, #0
  
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000000 	.word	0x20000000
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054e0:	4b11      	ldr	r3, [pc, #68]	@ (8005528 <SDMMC_GetCmdError+0x50>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a11      	ldr	r2, [pc, #68]	@ (800552c <SDMMC_GetCmdError+0x54>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0a5b      	lsrs	r3, r3, #9
 80054ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f0:	fb02 f303 	mul.w	r3, r2, r3
 80054f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1e5a      	subs	r2, r3, #1
 80054fa:	60fa      	str	r2, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005500:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005504:	e009      	b.n	800551a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f1      	beq.n	80054f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	22c5      	movs	r2, #197	@ 0xc5
 8005516:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000000 	.word	0x20000000
 800552c:	10624dd3 	.word	0x10624dd3

08005530 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005534:	4904      	ldr	r1, [pc, #16]	@ (8005548 <MX_FATFS_Init+0x18>)
 8005536:	4805      	ldr	r0, [pc, #20]	@ (800554c <MX_FATFS_Init+0x1c>)
 8005538:	f003 fd2c 	bl	8008f94 <FATFS_LinkDriver>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	4b03      	ldr	r3, [pc, #12]	@ (8005550 <MX_FATFS_Init+0x20>)
 8005542:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005544:	bf00      	nop
 8005546:	bd80      	pop	{r7, pc}
 8005548:	200002a0 	.word	0x200002a0
 800554c:	0800aba4 	.word	0x0800aba4
 8005550:	2000029c 	.word	0x2000029c

08005554 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005558:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800555a:	4618      	mov	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800556e:	f000 f89e 	bl	80056ae <BSP_SD_IsDetected>
 8005572:	4603      	mov	r3, r0
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e005      	b.n	8005588 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800557c:	4804      	ldr	r0, [pc, #16]	@ (8005590 <BSP_SD_Init+0x2c>)
 800557e:	f7fd f93f 	bl	8002800 <HAL_SD_Init>
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005586:	79fb      	ldrb	r3, [r7, #7]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000084 	.word	0x20000084

08005594 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	4806      	ldr	r0, [pc, #24]	@ (80055cc <BSP_SD_ReadBlocks+0x38>)
 80055b2:	f7fd f9cd 	bl	8002950 <HAL_SD_ReadBlocks>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000084 	.word	0x20000084

080055d0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	4806      	ldr	r0, [pc, #24]	@ (8005608 <BSP_SD_WriteBlocks+0x38>)
 80055ee:	f7fd fb95 	bl	8002d1c <HAL_SD_WriteBlocks>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000084 	.word	0x20000084

0800560c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005610:	4805      	ldr	r0, [pc, #20]	@ (8005628 <BSP_SD_GetCardState+0x1c>)
 8005612:	f7fe f871 	bl	80036f8 <HAL_SD_GetCardState>
 8005616:	4603      	mov	r3, r0
 8005618:	2b04      	cmp	r3, #4
 800561a:	bf14      	ite	ne
 800561c:	2301      	movne	r3, #1
 800561e:	2300      	moveq	r3, #0
 8005620:	b2db      	uxtb	r3, r3
}
 8005622:	4618      	mov	r0, r3
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000084 	.word	0x20000084

0800562c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4803      	ldr	r0, [pc, #12]	@ (8005644 <BSP_SD_GetCardInfo+0x18>)
 8005638:	f7fe f832 	bl	80036a0 <HAL_SD_GetCardInfo>
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000084 	.word	0x20000084

08005648 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005650:	f000 f818 	bl	8005684 <BSP_SD_AbortCallback>
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005664:	f000 f815 	bl	8005692 <BSP_SD_WriteCpltCallback>
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005678:	f000 f812 	bl	80056a0 <BSP_SD_ReadCpltCallback>
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0

}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0

}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0

}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80056b4:	2301      	movs	r3, #1
 80056b6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	b2db      	uxtb	r3, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80056d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <SD_CheckStatus+0x38>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80056d8:	f7ff ff98 	bl	800560c <BSP_SD_GetCardState>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d107      	bne.n	80056f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80056e2:	4b07      	ldr	r3, [pc, #28]	@ (8005700 <SD_CheckStatus+0x38>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <SD_CheckStatus+0x38>)
 80056f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80056f2:	4b03      	ldr	r3, [pc, #12]	@ (8005700 <SD_CheckStatus+0x38>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	b2db      	uxtb	r3, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000009 	.word	0x20000009

08005704 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800570e:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <SD_initialize+0x38>)
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005714:	f7ff ff26 	bl	8005564 <BSP_SD_Init>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ffd1 	bl	80056c8 <SD_CheckStatus>
 8005726:	4603      	mov	r3, r0
 8005728:	461a      	mov	r2, r3
 800572a:	4b04      	ldr	r3, [pc, #16]	@ (800573c <SD_initialize+0x38>)
 800572c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800572e:	4b03      	ldr	r3, [pc, #12]	@ (800573c <SD_initialize+0x38>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b2db      	uxtb	r3, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000009 	.word	0x20000009

08005740 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff ffbb 	bl	80056c8 <SD_CheckStatus>
 8005752:	4603      	mov	r3, r0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005770:	f04f 33ff 	mov.w	r3, #4294967295
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	68b8      	ldr	r0, [r7, #8]
 800577a:	f7ff ff0b 	bl	8005594 <BSP_SD_ReadBlocks>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d107      	bne.n	8005794 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005784:	bf00      	nop
 8005786:	f7ff ff41 	bl	800560c <BSP_SD_GetCardState>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1fa      	bne.n	8005786 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005794:	7dfb      	ldrb	r3, [r7, #23]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4603      	mov	r3, r0
 80057ac:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80057b2:	f04f 33ff 	mov.w	r3, #4294967295
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	68b8      	ldr	r0, [r7, #8]
 80057bc:	f7ff ff08 	bl	80055d0 <BSP_SD_WriteBlocks>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80057c6:	bf00      	nop
 80057c8:	f7ff ff20 	bl	800560c <BSP_SD_GetCardState>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1fa      	bne.n	80057c8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08c      	sub	sp, #48	@ 0x30
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	603a      	str	r2, [r7, #0]
 80057ea:	71fb      	strb	r3, [r7, #7]
 80057ec:	460b      	mov	r3, r1
 80057ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80057f6:	4b25      	ldr	r3, [pc, #148]	@ (800588c <SD_ioctl+0xac>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <SD_ioctl+0x28>
 8005804:	2303      	movs	r3, #3
 8005806:	e03c      	b.n	8005882 <SD_ioctl+0xa2>

  switch (cmd)
 8005808:	79bb      	ldrb	r3, [r7, #6]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d834      	bhi.n	8005878 <SD_ioctl+0x98>
 800580e:	a201      	add	r2, pc, #4	@ (adr r2, 8005814 <SD_ioctl+0x34>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005825 	.word	0x08005825
 8005818:	0800582d 	.word	0x0800582d
 800581c:	08005845 	.word	0x08005845
 8005820:	0800585f 	.word	0x0800585f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800582a:	e028      	b.n	800587e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800582c:	f107 030c 	add.w	r3, r7, #12
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fefb 	bl	800562c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005842:	e01c      	b.n	800587e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005844:	f107 030c 	add.w	r3, r7, #12
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff feef 	bl	800562c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800584e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005850:	b29a      	uxth	r2, r3
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800585c:	e00f      	b.n	800587e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800585e:	f107 030c 	add.w	r3, r7, #12
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fee2 	bl	800562c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	0a5a      	lsrs	r2, r3, #9
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005876:	e002      	b.n	800587e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005878:	2304      	movs	r3, #4
 800587a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800587e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005882:	4618      	mov	r0, r3
 8005884:	3730      	adds	r7, #48	@ 0x30
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000009 	.word	0x20000009

08005890 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	4a08      	ldr	r2, [pc, #32]	@ (80058c0 <disk_status+0x30>)
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	79fa      	ldrb	r2, [r7, #7]
 80058a8:	4905      	ldr	r1, [pc, #20]	@ (80058c0 <disk_status+0x30>)
 80058aa:	440a      	add	r2, r1
 80058ac:	7a12      	ldrb	r2, [r2, #8]
 80058ae:	4610      	mov	r0, r2
 80058b0:	4798      	blx	r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	200004cc 	.word	0x200004cc

080058c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005910 <disk_initialize+0x4c>)
 80058d6:	5cd3      	ldrb	r3, [r2, r3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d114      	bne.n	8005906 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	4a0c      	ldr	r2, [pc, #48]	@ (8005910 <disk_initialize+0x4c>)
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	79fa      	ldrb	r2, [r7, #7]
 80058ea:	4909      	ldr	r1, [pc, #36]	@ (8005910 <disk_initialize+0x4c>)
 80058ec:	440a      	add	r2, r1
 80058ee:	7a12      	ldrb	r2, [r2, #8]
 80058f0:	4610      	mov	r0, r2
 80058f2:	4798      	blx	r3
 80058f4:	4603      	mov	r3, r0
 80058f6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	4a03      	ldr	r2, [pc, #12]	@ (8005910 <disk_initialize+0x4c>)
 8005902:	2101      	movs	r1, #1
 8005904:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	200004cc 	.word	0x200004cc

08005914 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	4a0a      	ldr	r2, [pc, #40]	@ (8005950 <disk_read+0x3c>)
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	689c      	ldr	r4, [r3, #8]
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	4a07      	ldr	r2, [pc, #28]	@ (8005950 <disk_read+0x3c>)
 8005934:	4413      	add	r3, r2
 8005936:	7a18      	ldrb	r0, [r3, #8]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	47a0      	blx	r4
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]
  return res;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
}
 8005946:	4618      	mov	r0, r3
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	bf00      	nop
 8005950:	200004cc 	.word	0x200004cc

08005954 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4603      	mov	r3, r0
 8005962:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	4a0a      	ldr	r2, [pc, #40]	@ (8005990 <disk_write+0x3c>)
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68dc      	ldr	r4, [r3, #12]
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	4a07      	ldr	r2, [pc, #28]	@ (8005990 <disk_write+0x3c>)
 8005974:	4413      	add	r3, r2
 8005976:	7a18      	ldrb	r0, [r3, #8]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	47a0      	blx	r4
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]
  return res;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	bd90      	pop	{r4, r7, pc}
 800598e:	bf00      	nop
 8005990:	200004cc 	.word	0x200004cc

08005994 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	603a      	str	r2, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
 80059a0:	460b      	mov	r3, r1
 80059a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <disk_ioctl+0x38>)
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	79fa      	ldrb	r2, [r7, #7]
 80059b2:	4906      	ldr	r1, [pc, #24]	@ (80059cc <disk_ioctl+0x38>)
 80059b4:	440a      	add	r2, r1
 80059b6:	7a10      	ldrb	r0, [r2, #8]
 80059b8:	79b9      	ldrb	r1, [r7, #6]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	4798      	blx	r3
 80059be:	4603      	mov	r3, r0
 80059c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200004cc 	.word	0x200004cc

080059d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3301      	adds	r3, #1
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80059e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	b21a      	sxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	b21b      	sxth	r3, r3
 80059ee:	4313      	orrs	r3, r2
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80059f4:	89fb      	ldrh	r3, [r7, #14]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	3202      	adds	r2, #2
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	3201      	adds	r2, #1
 8005a28:	7812      	ldrb	r2, [r2, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
	return rv;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	887b      	ldrh	r3, [r7, #2]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	0a1b      	lsrs	r3, r3, #8
 8005aaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	607a      	str	r2, [r7, #4]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ad6:	b480      	push	{r7}
 8005ad8:	b087      	sub	sp, #28
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00d      	beq.n	8005b0c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	1c53      	adds	r3, r2, #1
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	6179      	str	r1, [r7, #20]
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f1      	bne.n	8005af0 <mem_cpy+0x1a>
	}
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	617a      	str	r2, [r7, #20]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f3      	bne.n	8005b28 <mem_set+0x10>
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005b4e:	b480      	push	{r7}
 8005b50:	b089      	sub	sp, #36	@ 0x24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	61fa      	str	r2, [r7, #28]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	61ba      	str	r2, [r7, #24]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	1acb      	subs	r3, r1, r3
 8005b7a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <mem_cmp+0x40>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0eb      	beq.n	8005b66 <mem_cmp+0x18>

	return r;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3724      	adds	r7, #36	@ 0x24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ba6:	e002      	b.n	8005bae <chk_chr+0x12>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3301      	adds	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <chk_chr+0x26>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d1f2      	bne.n	8005ba8 <chk_chr+0xc>
	return *str;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bde:	2300      	movs	r3, #0
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e029      	b.n	8005c3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005be8:	4a27      	ldr	r2, [pc, #156]	@ (8005c88 <chk_lock+0xb4>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4413      	add	r3, r2
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01d      	beq.n	8005c32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005bf6:	4a24      	ldr	r2, [pc, #144]	@ (8005c88 <chk_lock+0xb4>)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	4413      	add	r3, r2
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d116      	bne.n	8005c36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005c08:	4a1f      	ldr	r2, [pc, #124]	@ (8005c88 <chk_lock+0xb4>)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	4413      	add	r3, r2
 8005c10:	3304      	adds	r3, #4
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d10c      	bne.n	8005c36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c88 <chk_lock+0xb4>)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	4413      	add	r3, r2
 8005c24:	3308      	adds	r3, #8
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d102      	bne.n	8005c36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c30:	e007      	b.n	8005c42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005c32:	2301      	movs	r3, #1
 8005c34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d9d2      	bls.n	8005be8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d109      	bne.n	8005c5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <chk_lock+0x80>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d101      	bne.n	8005c58 <chk_lock+0x84>
 8005c54:	2300      	movs	r3, #0
 8005c56:	e010      	b.n	8005c7a <chk_lock+0xa6>
 8005c58:	2312      	movs	r3, #18
 8005c5a:	e00e      	b.n	8005c7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d108      	bne.n	8005c74 <chk_lock+0xa0>
 8005c62:	4a09      	ldr	r2, [pc, #36]	@ (8005c88 <chk_lock+0xb4>)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	4413      	add	r3, r2
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c72:	d101      	bne.n	8005c78 <chk_lock+0xa4>
 8005c74:	2310      	movs	r3, #16
 8005c76:	e000      	b.n	8005c7a <chk_lock+0xa6>
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	200002ac 	.word	0x200002ac

08005c8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c92:	2300      	movs	r3, #0
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	e002      	b.n	8005c9e <enq_lock+0x12>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d806      	bhi.n	8005cb2 <enq_lock+0x26>
 8005ca4:	4a09      	ldr	r2, [pc, #36]	@ (8005ccc <enq_lock+0x40>)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	4413      	add	r3, r2
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f2      	bne.n	8005c98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	200002ac 	.word	0x200002ac

08005cd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	e01f      	b.n	8005d20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ce0:	4a41      	ldr	r2, [pc, #260]	@ (8005de8 <inc_lock+0x118>)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	4413      	add	r3, r2
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d113      	bne.n	8005d1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8005de8 <inc_lock+0x118>)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d109      	bne.n	8005d1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005d06:	4a38      	ldr	r2, [pc, #224]	@ (8005de8 <inc_lock+0x118>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3308      	adds	r3, #8
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d006      	beq.n	8005d28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d9dc      	bls.n	8005ce0 <inc_lock+0x10>
 8005d26:	e000      	b.n	8005d2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005d28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d132      	bne.n	8005d96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e002      	b.n	8005d3c <inc_lock+0x6c>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d806      	bhi.n	8005d50 <inc_lock+0x80>
 8005d42:	4a29      	ldr	r2, [pc, #164]	@ (8005de8 <inc_lock+0x118>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4413      	add	r3, r2
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f2      	bne.n	8005d36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d101      	bne.n	8005d5a <inc_lock+0x8a>
 8005d56:	2300      	movs	r3, #0
 8005d58:	e040      	b.n	8005ddc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4922      	ldr	r1, [pc, #136]	@ (8005de8 <inc_lock+0x118>)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	440b      	add	r3, r1
 8005d66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	491e      	ldr	r1, [pc, #120]	@ (8005de8 <inc_lock+0x118>)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	440b      	add	r3, r1
 8005d74:	3304      	adds	r3, #4
 8005d76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695a      	ldr	r2, [r3, #20]
 8005d7c:	491a      	ldr	r1, [pc, #104]	@ (8005de8 <inc_lock+0x118>)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	440b      	add	r3, r1
 8005d84:	3308      	adds	r3, #8
 8005d86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d88:	4a17      	ldr	r2, [pc, #92]	@ (8005de8 <inc_lock+0x118>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	4413      	add	r3, r2
 8005d90:	330c      	adds	r3, #12
 8005d92:	2200      	movs	r2, #0
 8005d94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <inc_lock+0xe0>
 8005d9c:	4a12      	ldr	r2, [pc, #72]	@ (8005de8 <inc_lock+0x118>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	4413      	add	r3, r2
 8005da4:	330c      	adds	r3, #12
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <inc_lock+0xe0>
 8005dac:	2300      	movs	r3, #0
 8005dae:	e015      	b.n	8005ddc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d108      	bne.n	8005dc8 <inc_lock+0xf8>
 8005db6:	4a0c      	ldr	r2, [pc, #48]	@ (8005de8 <inc_lock+0x118>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	4413      	add	r3, r2
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	e001      	b.n	8005dcc <inc_lock+0xfc>
 8005dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dcc:	4906      	ldr	r1, [pc, #24]	@ (8005de8 <inc_lock+0x118>)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	440b      	add	r3, r1
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	200002ac 	.word	0x200002ac

08005dec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d825      	bhi.n	8005e4c <dec_lock+0x60>
		n = Files[i].ctr;
 8005e00:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <dec_lock+0x74>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	4413      	add	r3, r2
 8005e08:	330c      	adds	r3, #12
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005e0e:	89fb      	ldrh	r3, [r7, #14]
 8005e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e14:	d101      	bne.n	8005e1a <dec_lock+0x2e>
 8005e16:	2300      	movs	r3, #0
 8005e18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005e1a:	89fb      	ldrh	r3, [r7, #14]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <dec_lock+0x3a>
 8005e20:	89fb      	ldrh	r3, [r7, #14]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005e26:	4a0e      	ldr	r2, [pc, #56]	@ (8005e60 <dec_lock+0x74>)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	4413      	add	r3, r2
 8005e2e:	330c      	adds	r3, #12
 8005e30:	89fa      	ldrh	r2, [r7, #14]
 8005e32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005e34:	89fb      	ldrh	r3, [r7, #14]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <dec_lock+0x5a>
 8005e3a:	4a09      	ldr	r2, [pc, #36]	@ (8005e60 <dec_lock+0x74>)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	4413      	add	r3, r2
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	737b      	strb	r3, [r7, #13]
 8005e4a:	e001      	b.n	8005e50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005e50:	7b7b      	ldrb	r3, [r7, #13]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	200002ac 	.word	0x200002ac

08005e64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e010      	b.n	8005e94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e72:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea8 <clear_lock+0x44>)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	4413      	add	r3, r2
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d105      	bne.n	8005e8e <clear_lock+0x2a>
 8005e82:	4a09      	ldr	r2, [pc, #36]	@ (8005ea8 <clear_lock+0x44>)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	4413      	add	r3, r2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3301      	adds	r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d9eb      	bls.n	8005e72 <clear_lock+0xe>
	}
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	200002ac 	.word	0x200002ac

08005eac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	78db      	ldrb	r3, [r3, #3]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d034      	beq.n	8005f2a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	7858      	ldrb	r0, [r3, #1]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	f7ff fd3e 	bl	8005954 <disk_write>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	73fb      	strb	r3, [r7, #15]
 8005ee2:	e022      	b.n	8005f2a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	1ad2      	subs	r2, r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d217      	bcs.n	8005f2a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	789b      	ldrb	r3, [r3, #2]
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	e010      	b.n	8005f24 <sync_window+0x78>
					wsect += fs->fsize;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4413      	add	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	7858      	ldrb	r0, [r3, #1]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f16:	2301      	movs	r3, #1
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	f7ff fd1b 	bl	8005954 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d8eb      	bhi.n	8005f02 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d01b      	beq.n	8005f84 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ffad 	bl	8005eac <sync_window>
 8005f52:	4603      	mov	r3, r0
 8005f54:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d113      	bne.n	8005f84 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7858      	ldrb	r0, [r3, #1]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f66:	2301      	movs	r3, #1
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	f7ff fcd3 	bl	8005914 <disk_read>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295
 8005f78:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff ff87 	bl	8005eac <sync_window>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d159      	bne.n	800605c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d149      	bne.n	8006044 <sync_fs+0xb4>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	791b      	ldrb	r3, [r3, #4]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d145      	bne.n	8006044 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	899b      	ldrh	r3, [r3, #12]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	f7ff fda7 	bl	8005b18 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3338      	adds	r3, #56	@ 0x38
 8005fce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005fd2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff fd36 	bl	8005a48 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3338      	adds	r3, #56	@ 0x38
 8005fe0:	4921      	ldr	r1, [pc, #132]	@ (8006068 <sync_fs+0xd8>)
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff fd4b 	bl	8005a7e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3338      	adds	r3, #56	@ 0x38
 8005fec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005ff0:	491e      	ldr	r1, [pc, #120]	@ (800606c <sync_fs+0xdc>)
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fd43 	bl	8005a7e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3338      	adds	r3, #56	@ 0x38
 8005ffc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7ff fd39 	bl	8005a7e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3338      	adds	r3, #56	@ 0x38
 8006010:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7ff fd2f 	bl	8005a7e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	7858      	ldrb	r0, [r3, #1]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006038:	2301      	movs	r3, #1
 800603a:	f7ff fc8b 	bl	8005954 <disk_write>
			fs->fsi_flag = 0;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2200      	movs	r2, #0
 800604a:	2100      	movs	r1, #0
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fca1 	bl	8005994 <disk_ioctl>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <sync_fs+0xcc>
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	41615252 	.word	0x41615252
 800606c:	61417272 	.word	0x61417272

08006070 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	3b02      	subs	r3, #2
 800607e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	3b02      	subs	r3, #2
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d301      	bcc.n	8006090 <clust2sect+0x20>
 800608c:	2300      	movs	r3, #0
 800608e:	e008      	b.n	80060a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	895b      	ldrh	r3, [r3, #10]
 8006094:	461a      	mov	r2, r3
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	fb03 f202 	mul.w	r2, r3, r2
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a0:	4413      	add	r3, r2
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d904      	bls.n	80060ce <get_fat+0x20>
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80060ce:	2301      	movs	r3, #1
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e0ba      	b.n	800624a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80060d4:	f04f 33ff 	mov.w	r3, #4294967295
 80060d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	f000 8082 	beq.w	80061e8 <get_fat+0x13a>
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	f300 80a6 	bgt.w	8006236 <get_fat+0x188>
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d002      	beq.n	80060f4 <get_fat+0x46>
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d055      	beq.n	800619e <get_fat+0xf0>
 80060f2:	e0a0      	b.n	8006236 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	899b      	ldrh	r3, [r3, #12]
 800610a:	4619      	mov	r1, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006112:	4413      	add	r3, r2
 8006114:	4619      	mov	r1, r3
 8006116:	6938      	ldr	r0, [r7, #16]
 8006118:	f7ff ff0c 	bl	8005f34 <move_window>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 808c 	bne.w	800623c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	60fa      	str	r2, [r7, #12]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	8992      	ldrh	r2, [r2, #12]
 800612e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006132:	fb01 f202 	mul.w	r2, r1, r2
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4413      	add	r3, r2
 800613c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006140:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	899b      	ldrh	r3, [r3, #12]
 800614a:	4619      	mov	r1, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006152:	4413      	add	r3, r2
 8006154:	4619      	mov	r1, r3
 8006156:	6938      	ldr	r0, [r7, #16]
 8006158:	f7ff feec 	bl	8005f34 <move_window>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d16e      	bne.n	8006240 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	899b      	ldrh	r3, [r3, #12]
 8006166:	461a      	mov	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	fbb3 f1f2 	udiv	r1, r3, r2
 800616e:	fb01 f202 	mul.w	r2, r1, r2
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	4313      	orrs	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <get_fat+0xe6>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	091b      	lsrs	r3, r3, #4
 8006192:	e002      	b.n	800619a <get_fat+0xec>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619a:	617b      	str	r3, [r7, #20]
			break;
 800619c:	e055      	b.n	800624a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	899b      	ldrh	r3, [r3, #12]
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	4619      	mov	r1, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b2:	4413      	add	r3, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	6938      	ldr	r0, [r7, #16]
 80061b8:	f7ff febc 	bl	8005f34 <move_window>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d140      	bne.n	8006244 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	8992      	ldrh	r2, [r2, #12]
 80061d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80061d4:	fb00 f202 	mul.w	r2, r0, r2
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	440b      	add	r3, r1
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fbf7 	bl	80059d0 <ld_word>
 80061e2:	4603      	mov	r3, r0
 80061e4:	617b      	str	r3, [r7, #20]
			break;
 80061e6:	e030      	b.n	800624a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	899b      	ldrh	r3, [r3, #12]
 80061f0:	089b      	lsrs	r3, r3, #2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4619      	mov	r1, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80061fc:	4413      	add	r3, r2
 80061fe:	4619      	mov	r1, r3
 8006200:	6938      	ldr	r0, [r7, #16]
 8006202:	f7ff fe97 	bl	8005f34 <move_window>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d11d      	bne.n	8006248 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	8992      	ldrh	r2, [r2, #12]
 800621a:	fbb3 f0f2 	udiv	r0, r3, r2
 800621e:	fb00 f202 	mul.w	r2, r0, r2
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	440b      	add	r3, r1
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fbeb 	bl	8005a02 <ld_dword>
 800622c:	4603      	mov	r3, r0
 800622e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006232:	617b      	str	r3, [r7, #20]
			break;
 8006234:	e009      	b.n	800624a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006236:	2301      	movs	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e006      	b.n	800624a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800623c:	bf00      	nop
 800623e:	e004      	b.n	800624a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006248:	bf00      	nop
		}
	}

	return val;
 800624a:	697b      	ldr	r3, [r7, #20]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b089      	sub	sp, #36	@ 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006260:	2302      	movs	r3, #2
 8006262:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b01      	cmp	r3, #1
 8006268:	f240 8109 	bls.w	800647e <put_fat+0x22a>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	429a      	cmp	r2, r3
 8006274:	f080 8103 	bcs.w	800647e <put_fat+0x22a>
		switch (fs->fs_type) {
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b03      	cmp	r3, #3
 800627e:	f000 80b6 	beq.w	80063ee <put_fat+0x19a>
 8006282:	2b03      	cmp	r3, #3
 8006284:	f300 80fb 	bgt.w	800647e <put_fat+0x22a>
 8006288:	2b01      	cmp	r3, #1
 800628a:	d003      	beq.n	8006294 <put_fat+0x40>
 800628c:	2b02      	cmp	r3, #2
 800628e:	f000 8083 	beq.w	8006398 <put_fat+0x144>
 8006292:	e0f4      	b.n	800647e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4413      	add	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	899b      	ldrh	r3, [r3, #12]
 80062aa:	4619      	mov	r1, r3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80062b2:	4413      	add	r3, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff fe3c 	bl	8005f34 <move_window>
 80062bc:	4603      	mov	r3, r0
 80062be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062c0:	7ffb      	ldrb	r3, [r7, #31]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 80d4 	bne.w	8006470 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	61ba      	str	r2, [r7, #24]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	8992      	ldrh	r2, [r2, #12]
 80062d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80062dc:	fb00 f202 	mul.w	r2, r0, r2
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	440b      	add	r3, r1
 80062e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00d      	beq.n	800630c <put_fat+0xb8>
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	b25a      	sxtb	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	b25b      	sxtb	r3, r3
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	b25b      	sxtb	r3, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	b25b      	sxtb	r3, r3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e001      	b.n	8006310 <put_fat+0xbc>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	899b      	ldrh	r3, [r3, #12]
 8006322:	4619      	mov	r1, r3
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	fbb3 f3f1 	udiv	r3, r3, r1
 800632a:	4413      	add	r3, r2
 800632c:	4619      	mov	r1, r3
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f7ff fe00 	bl	8005f34 <move_window>
 8006334:	4603      	mov	r3, r0
 8006336:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006338:	7ffb      	ldrb	r3, [r7, #31]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f040 809a 	bne.w	8006474 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	899b      	ldrh	r3, [r3, #12]
 800634a:	461a      	mov	r2, r3
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006352:	fb00 f202 	mul.w	r2, r0, r2
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	440b      	add	r3, r1
 800635a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <put_fat+0x11a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	b2db      	uxtb	r3, r3
 800636c:	e00e      	b.n	800638c <put_fat+0x138>
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	b25b      	sxtb	r3, r3
 8006374:	f023 030f 	bic.w	r3, r3, #15
 8006378:	b25a      	sxtb	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	b25b      	sxtb	r3, r3
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	b25b      	sxtb	r3, r3
 8006386:	4313      	orrs	r3, r2
 8006388:	b25b      	sxtb	r3, r3
 800638a:	b2db      	uxtb	r3, r3
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	70da      	strb	r2, [r3, #3]
			break;
 8006396:	e072      	b.n	800647e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	899b      	ldrh	r3, [r3, #12]
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	4619      	mov	r1, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ac:	4413      	add	r3, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff fdbf 	bl	8005f34 <move_window>
 80063b6:	4603      	mov	r3, r0
 80063b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063ba:	7ffb      	ldrb	r3, [r7, #31]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d15b      	bne.n	8006478 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	8992      	ldrh	r2, [r2, #12]
 80063ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80063d2:	fb00 f202 	mul.w	r2, r0, r2
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	440b      	add	r3, r1
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	b292      	uxth	r2, r2
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fb31 	bl	8005a48 <st_word>
			fs->wflag = 1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	70da      	strb	r2, [r3, #3]
			break;
 80063ec:	e047      	b.n	800647e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	899b      	ldrh	r3, [r3, #12]
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	4619      	mov	r1, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006402:	4413      	add	r3, r2
 8006404:	4619      	mov	r1, r3
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff fd94 	bl	8005f34 <move_window>
 800640c:	4603      	mov	r3, r0
 800640e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006410:	7ffb      	ldrb	r3, [r7, #31]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d132      	bne.n	800647c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	8992      	ldrh	r2, [r2, #12]
 800642a:	fbb3 f0f2 	udiv	r0, r3, r2
 800642e:	fb00 f202 	mul.w	r2, r0, r2
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	440b      	add	r3, r1
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fae3 	bl	8005a02 <ld_dword>
 800643c:	4603      	mov	r3, r0
 800643e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006442:	4323      	orrs	r3, r4
 8006444:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	8992      	ldrh	r2, [r2, #12]
 8006454:	fbb3 f0f2 	udiv	r0, r3, r2
 8006458:	fb00 f202 	mul.w	r2, r0, r2
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	440b      	add	r3, r1
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff fb0b 	bl	8005a7e <st_dword>
			fs->wflag = 1;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	70da      	strb	r2, [r3, #3]
			break;
 800646e:	e006      	b.n	800647e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006470:	bf00      	nop
 8006472:	e004      	b.n	800647e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006474:	bf00      	nop
 8006476:	e002      	b.n	800647e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <put_fat+0x22a>
			if (res != FR_OK) break;
 800647c:	bf00      	nop
		}
	}
	return res;
 800647e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3724      	adds	r7, #36	@ 0x24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd90      	pop	{r4, r7, pc}

08006488 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d904      	bls.n	80064ae <remove_chain+0x26>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d301      	bcc.n	80064b2 <remove_chain+0x2a>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e04b      	b.n	800654a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80064b8:	f04f 32ff 	mov.w	r2, #4294967295
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	69b8      	ldr	r0, [r7, #24]
 80064c0:	f7ff fec8 	bl	8006254 <put_fat>
 80064c4:	4603      	mov	r3, r0
 80064c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80064c8:	7ffb      	ldrb	r3, [r7, #31]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <remove_chain+0x4a>
 80064ce:	7ffb      	ldrb	r3, [r7, #31]
 80064d0:	e03b      	b.n	800654a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff fdea 	bl	80060ae <get_fat>
 80064da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d031      	beq.n	8006546 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <remove_chain+0x64>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e02e      	b.n	800654a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d101      	bne.n	80064f8 <remove_chain+0x70>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e028      	b.n	800654a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80064f8:	2200      	movs	r2, #0
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	69b8      	ldr	r0, [r7, #24]
 80064fe:	f7ff fea9 	bl	8006254 <put_fat>
 8006502:	4603      	mov	r3, r0
 8006504:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006506:	7ffb      	ldrb	r3, [r7, #31]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <remove_chain+0x88>
 800650c:	7ffb      	ldrb	r3, [r7, #31]
 800650e:	e01c      	b.n	800654a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	3b02      	subs	r3, #2
 800651a:	429a      	cmp	r2, r3
 800651c:	d20b      	bcs.n	8006536 <remove_chain+0xae>
			fs->free_clst++;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	791b      	ldrb	r3, [r3, #4]
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	b2da      	uxtb	r2, r3
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	d3c6      	bcc.n	80064d2 <remove_chain+0x4a>
 8006544:	e000      	b.n	8006548 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006546:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b088      	sub	sp, #32
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10d      	bne.n	8006584 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <create_chain+0x2c>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	429a      	cmp	r2, r3
 800657c:	d31b      	bcc.n	80065b6 <create_chain+0x64>
 800657e:	2301      	movs	r3, #1
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	e018      	b.n	80065b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fd91 	bl	80060ae <get_fat>
 800658c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d801      	bhi.n	8006598 <create_chain+0x46>
 8006594:	2301      	movs	r3, #1
 8006596:	e070      	b.n	800667a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d101      	bne.n	80065a4 <create_chain+0x52>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	e06a      	b.n	800667a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d201      	bcs.n	80065b2 <create_chain+0x60>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	e063      	b.n	800667a <create_chain+0x128>
		scl = clst;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	3301      	adds	r3, #1
 80065be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d307      	bcc.n	80065da <create_chain+0x88>
				ncl = 2;
 80065ca:	2302      	movs	r3, #2
 80065cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d901      	bls.n	80065da <create_chain+0x88>
 80065d6:	2300      	movs	r3, #0
 80065d8:	e04f      	b.n	800667a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80065da:	69f9      	ldr	r1, [r7, #28]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff fd66 	bl	80060ae <get_fat>
 80065e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d003      	beq.n	80065f8 <create_chain+0xa6>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d101      	bne.n	80065fc <create_chain+0xaa>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	e03e      	b.n	800667a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	429a      	cmp	r2, r3
 8006602:	d1da      	bne.n	80065ba <create_chain+0x68>
 8006604:	2300      	movs	r3, #0
 8006606:	e038      	b.n	800667a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006608:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800660a:	f04f 32ff 	mov.w	r2, #4294967295
 800660e:	69f9      	ldr	r1, [r7, #28]
 8006610:	6938      	ldr	r0, [r7, #16]
 8006612:	f7ff fe1f 	bl	8006254 <put_fat>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <create_chain+0xe2>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d006      	beq.n	8006634 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6938      	ldr	r0, [r7, #16]
 800662c:	f7ff fe12 	bl	8006254 <put_fat>
 8006630:	4603      	mov	r3, r0
 8006632:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006634:	7dfb      	ldrb	r3, [r7, #23]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d116      	bne.n	8006668 <create_chain+0x116>
		fs->last_clst = ncl;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	3b02      	subs	r3, #2
 800664a:	429a      	cmp	r2, r3
 800664c:	d804      	bhi.n	8006658 <create_chain+0x106>
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	791b      	ldrb	r3, [r3, #4]
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	b2da      	uxtb	r2, r3
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	711a      	strb	r2, [r3, #4]
 8006666:	e007      	b.n	8006678 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d102      	bne.n	8006674 <create_chain+0x122>
 800666e:	f04f 33ff 	mov.w	r3, #4294967295
 8006672:	e000      	b.n	8006676 <create_chain+0x124>
 8006674:	2301      	movs	r3, #1
 8006676:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006678:	69fb      	ldr	r3, [r7, #28]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006682:	b480      	push	{r7}
 8006684:	b087      	sub	sp, #28
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	3304      	adds	r3, #4
 8006698:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	899b      	ldrh	r3, [r3, #12]
 800669e:	461a      	mov	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	8952      	ldrh	r2, [r2, #10]
 80066aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1d1a      	adds	r2, r3, #4
 80066b4:	613a      	str	r2, [r7, #16]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <clmt_clust+0x42>
 80066c0:	2300      	movs	r3, #0
 80066c2:	e010      	b.n	80066e6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d307      	bcc.n	80066dc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	3304      	adds	r3, #4
 80066d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066da:	e7e9      	b.n	80066b0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80066dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006708:	d204      	bcs.n	8006714 <dir_sdi+0x22>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006714:	2302      	movs	r3, #2
 8006716:	e071      	b.n	80067fc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <dir_sdi+0x46>
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d902      	bls.n	8006738 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006736:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10c      	bne.n	8006758 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	8912      	ldrh	r2, [r2, #8]
 8006746:	4293      	cmp	r3, r2
 8006748:	d301      	bcc.n	800674e <dir_sdi+0x5c>
 800674a:	2302      	movs	r3, #2
 800674c:	e056      	b.n	80067fc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	61da      	str	r2, [r3, #28]
 8006756:	e02d      	b.n	80067b4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	895b      	ldrh	r3, [r3, #10]
 800675c:	461a      	mov	r2, r3
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	899b      	ldrh	r3, [r3, #12]
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006768:	e019      	b.n	800679e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6979      	ldr	r1, [r7, #20]
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fc9d 	bl	80060ae <get_fat>
 8006774:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d101      	bne.n	8006782 <dir_sdi+0x90>
 800677e:	2301      	movs	r3, #1
 8006780:	e03c      	b.n	80067fc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d904      	bls.n	8006792 <dir_sdi+0xa0>
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	429a      	cmp	r2, r3
 8006790:	d301      	bcc.n	8006796 <dir_sdi+0xa4>
 8006792:	2302      	movs	r3, #2
 8006794:	e032      	b.n	80067fc <dir_sdi+0x10a>
			ofs -= csz;
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d2e1      	bcs.n	800676a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80067a6:	6979      	ldr	r1, [r7, #20]
 80067a8:	6938      	ldr	r0, [r7, #16]
 80067aa:	f7ff fc61 	bl	8006070 <clust2sect>
 80067ae:	4602      	mov	r2, r0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <dir_sdi+0xd4>
 80067c2:	2302      	movs	r3, #2
 80067c4:	e01a      	b.n	80067fc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69da      	ldr	r2, [r3, #28]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	899b      	ldrh	r3, [r3, #12]
 80067ce:	4619      	mov	r1, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d6:	441a      	add	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	899b      	ldrh	r3, [r3, #12]
 80067e6:	461a      	mov	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80067ee:	fb00 f202 	mul.w	r2, r0, r2
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	18ca      	adds	r2, r1, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	3320      	adds	r3, #32
 800681a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <dir_next+0x28>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800682a:	d301      	bcc.n	8006830 <dir_next+0x2c>
 800682c:	2304      	movs	r3, #4
 800682e:	e0bb      	b.n	80069a8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	899b      	ldrh	r3, [r3, #12]
 8006834:	461a      	mov	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	fbb3 f1f2 	udiv	r1, r3, r2
 800683c:	fb01 f202 	mul.w	r2, r1, r2
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	f040 809d 	bne.w	8006982 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	8912      	ldrh	r2, [r2, #8]
 8006862:	4293      	cmp	r3, r2
 8006864:	f0c0 808d 	bcc.w	8006982 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	61da      	str	r2, [r3, #28]
 800686e:	2304      	movs	r3, #4
 8006870:	e09a      	b.n	80069a8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	899b      	ldrh	r3, [r3, #12]
 8006876:	461a      	mov	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	fbb3 f3f2 	udiv	r3, r3, r2
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	8952      	ldrh	r2, [r2, #10]
 8006882:	3a01      	subs	r2, #1
 8006884:	4013      	ands	r3, r2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d17b      	bne.n	8006982 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f7ff fc0b 	bl	80060ae <get_fat>
 8006898:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d801      	bhi.n	80068a4 <dir_next+0xa0>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e081      	b.n	80069a8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d101      	bne.n	80068b0 <dir_next+0xac>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e07b      	b.n	80069a8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d359      	bcc.n	800696e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	61da      	str	r2, [r3, #28]
 80068c6:	2304      	movs	r3, #4
 80068c8:	e06e      	b.n	80069a8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f7ff fe3d 	bl	8006552 <create_chain>
 80068d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <dir_next+0xe0>
 80068e0:	2307      	movs	r3, #7
 80068e2:	e061      	b.n	80069a8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <dir_next+0xea>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e05c      	b.n	80069a8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d101      	bne.n	80068fa <dir_next+0xf6>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e056      	b.n	80069a8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fad6 	bl	8005eac <sync_window>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <dir_next+0x106>
 8006906:	2301      	movs	r3, #1
 8006908:	e04e      	b.n	80069a8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	899b      	ldrh	r3, [r3, #12]
 8006914:	461a      	mov	r2, r3
 8006916:	2100      	movs	r1, #0
 8006918:	f7ff f8fe 	bl	8005b18 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800691c:	2300      	movs	r3, #0
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	6979      	ldr	r1, [r7, #20]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff fba4 	bl	8006070 <clust2sect>
 8006928:	4602      	mov	r2, r0
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	635a      	str	r2, [r3, #52]	@ 0x34
 800692e:	e012      	b.n	8006956 <dir_next+0x152>
						fs->wflag = 1;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fab8 	bl	8005eac <sync_window>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <dir_next+0x142>
 8006942:	2301      	movs	r3, #1
 8006944:	e030      	b.n	80069a8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3301      	adds	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	635a      	str	r2, [r3, #52]	@ 0x34
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	895b      	ldrh	r3, [r3, #10]
 800695a:	461a      	mov	r2, r3
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4293      	cmp	r3, r2
 8006960:	d3e6      	bcc.n	8006930 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad2      	subs	r2, r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006974:	6979      	ldr	r1, [r7, #20]
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fb7a 	bl	8006070 <clust2sect>
 800697c:	4602      	mov	r2, r0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	899b      	ldrh	r3, [r3, #12]
 8006992:	461a      	mov	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	fbb3 f0f2 	udiv	r0, r3, r2
 800699a:	fb00 f202 	mul.w	r2, r0, r2
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	18ca      	adds	r2, r1, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80069c0:	2100      	movs	r1, #0
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff fe95 	bl	80066f2 <dir_sdi>
 80069c8:	4603      	mov	r3, r0
 80069ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d12b      	bne.n	8006a2a <dir_alloc+0x7a>
		n = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	4619      	mov	r1, r3
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff faa9 	bl	8005f34 <move_window>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11d      	bne.n	8006a28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2be5      	cmp	r3, #229	@ 0xe5
 80069f4:	d004      	beq.n	8006a00 <dir_alloc+0x50>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d107      	bne.n	8006a10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	3301      	adds	r3, #1
 8006a04:	613b      	str	r3, [r7, #16]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d102      	bne.n	8006a14 <dir_alloc+0x64>
 8006a0e:	e00c      	b.n	8006a2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a10:	2300      	movs	r3, #0
 8006a12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006a14:	2101      	movs	r1, #1
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff fef4 	bl	8006804 <dir_next>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0d7      	beq.n	80069d6 <dir_alloc+0x26>
 8006a26:	e000      	b.n	8006a2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006a28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d101      	bne.n	8006a34 <dir_alloc+0x84>
 8006a30:	2307      	movs	r3, #7
 8006a32:	75fb      	strb	r3, [r7, #23]
	return res;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	331a      	adds	r3, #26
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe ffbf 	bl	80059d0 <ld_word>
 8006a52:	4603      	mov	r3, r0
 8006a54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d109      	bne.n	8006a72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	3314      	adds	r3, #20
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe ffb4 	bl	80059d0 <ld_word>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	331a      	adds	r3, #26
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	b292      	uxth	r2, r2
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe ffd8 	bl	8005a48 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d109      	bne.n	8006ab4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f103 0214 	add.w	r2, r3, #20
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	0c1b      	lsrs	r3, r3, #16
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7fe ffca 	bl	8005a48 <st_word>
	}
}
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	331a      	adds	r3, #26
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe ff80 	bl	80059d0 <ld_word>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <cmp_lfn+0x1e>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e059      	b.n	8006b8e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ae2:	1e5a      	subs	r2, r3, #1
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006af0:	2301      	movs	r3, #1
 8006af2:	81fb      	strh	r3, [r7, #14]
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	e033      	b.n	8006b62 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006afa:	4a27      	ldr	r2, [pc, #156]	@ (8006b98 <cmp_lfn+0xdc>)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	4413      	add	r3, r2
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	4413      	add	r3, r2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe ff61 	bl	80059d0 <ld_word>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006b12:	89fb      	ldrh	r3, [r7, #14]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01a      	beq.n	8006b4e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8006b1c:	d812      	bhi.n	8006b44 <cmp_lfn+0x88>
 8006b1e:	89bb      	ldrh	r3, [r7, #12]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f002 fa83 	bl	800902c <ff_wtoupper>
 8006b26:	4603      	mov	r3, r0
 8006b28:	461c      	mov	r4, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	617a      	str	r2, [r7, #20]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f002 fa77 	bl	800902c <ff_wtoupper>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	429c      	cmp	r4, r3
 8006b42:	d001      	beq.n	8006b48 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006b44:	2300      	movs	r3, #0
 8006b46:	e022      	b.n	8006b8e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006b48:	89bb      	ldrh	r3, [r7, #12]
 8006b4a:	81fb      	strh	r3, [r7, #14]
 8006b4c:	e006      	b.n	8006b5c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006b4e:	89bb      	ldrh	r3, [r7, #12]
 8006b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d001      	beq.n	8006b5c <cmp_lfn+0xa0>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e018      	b.n	8006b8e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b0c      	cmp	r3, #12
 8006b66:	d9c8      	bls.n	8006afa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <cmp_lfn+0xd0>
 8006b74:	89fb      	ldrh	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <cmp_lfn+0xd0>
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4413      	add	r3, r2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <cmp_lfn+0xd0>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e000      	b.n	8006b8e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006b8c:	2301      	movs	r3, #1
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd90      	pop	{r4, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	0800ac38 	.word	0x0800ac38

08006b9c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	460b      	mov	r3, r1
 8006bac:	71fb      	strb	r3, [r7, #7]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	330d      	adds	r3, #13
 8006bb6:	79ba      	ldrb	r2, [r7, #6]
 8006bb8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	330b      	adds	r3, #11
 8006bbe:	220f      	movs	r2, #15
 8006bc0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	331a      	adds	r3, #26
 8006bce:	2100      	movs	r1, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe ff39 	bl	8005a48 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	1e5a      	subs	r2, r3, #1
 8006bda:	4613      	mov	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	82fb      	strh	r3, [r7, #22]
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006bee:	8afb      	ldrh	r3, [r7, #22]
 8006bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d007      	beq.n	8006c08 <put_lfn+0x6c>
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	61fa      	str	r2, [r7, #28]
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006c08:	4a17      	ldr	r2, [pc, #92]	@ (8006c68 <put_lfn+0xcc>)
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	4413      	add	r3, r2
 8006c16:	8afa      	ldrh	r2, [r7, #22]
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe ff14 	bl	8005a48 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006c20:	8afb      	ldrh	r3, [r7, #22]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <put_lfn+0x90>
 8006c26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c2a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b0c      	cmp	r3, #12
 8006c36:	d9da      	bls.n	8006bee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d006      	beq.n	8006c50 <put_lfn+0xb4>
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <put_lfn+0xbc>
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c56:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	79fa      	ldrb	r2, [r7, #7]
 8006c5c:	701a      	strb	r2, [r3, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	0800ac38 	.word	0x0800ac38

08006c6c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08c      	sub	sp, #48	@ 0x30
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006c7a:	220b      	movs	r2, #11
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7fe ff29 	bl	8005ad6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d92b      	bls.n	8006ce2 <gen_numname+0x76>
		sr = seq;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006c8e:	e022      	b.n	8006cd6 <gen_numname+0x6a>
			wc = *lfn++;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	1c9a      	adds	r2, r3, #2
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9e:	e017      	b.n	8006cd0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	005a      	lsls	r2, r3, #1
 8006ca4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	4413      	add	r3, r2
 8006cac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006cae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <gen_numname+0x5e>
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006cc4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006cc8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	3301      	adds	r3, #1
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	2b0f      	cmp	r3, #15
 8006cd4:	d9e4      	bls.n	8006ca0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1d8      	bne.n	8006c90 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006ce2:	2307      	movs	r3, #7
 8006ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	3330      	adds	r3, #48	@ 0x30
 8006cf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cfa:	2b39      	cmp	r3, #57	@ 0x39
 8006cfc:	d904      	bls.n	8006d08 <gen_numname+0x9c>
 8006cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d02:	3307      	adds	r3, #7
 8006d04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	1e5a      	subs	r2, r3, #1
 8006d0c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006d0e:	3330      	adds	r3, #48	@ 0x30
 8006d10:	443b      	add	r3, r7
 8006d12:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006d16:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	091b      	lsrs	r3, r3, #4
 8006d1e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1df      	bne.n	8006ce6 <gen_numname+0x7a>
	ns[i] = '~';
 8006d26:	f107 0214 	add.w	r2, r7, #20
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	4413      	add	r3, r2
 8006d2e:	227e      	movs	r2, #126	@ 0x7e
 8006d30:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006d32:	2300      	movs	r3, #0
 8006d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d36:	e002      	b.n	8006d3e <gen_numname+0xd2>
 8006d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d205      	bcs.n	8006d52 <gen_numname+0xe6>
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	4413      	add	r3, r2
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d1f2      	bne.n	8006d38 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d54:	2b07      	cmp	r3, #7
 8006d56:	d807      	bhi.n	8006d68 <gen_numname+0xfc>
 8006d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006d5e:	3330      	adds	r3, #48	@ 0x30
 8006d60:	443b      	add	r3, r7
 8006d62:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006d66:	e000      	b.n	8006d6a <gen_numname+0xfe>
 8006d68:	2120      	movs	r1, #32
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4413      	add	r3, r2
 8006d74:	460a      	mov	r2, r1
 8006d76:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	2b07      	cmp	r3, #7
 8006d7c:	d9e9      	bls.n	8006d52 <gen_numname+0xe6>
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	3730      	adds	r7, #48	@ 0x30
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006d94:	230b      	movs	r3, #11
 8006d96:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	0852      	lsrs	r2, r2, #1
 8006d9e:	01db      	lsls	r3, r3, #7
 8006da0:	4313      	orrs	r3, r2
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	1c59      	adds	r1, r3, #1
 8006da8:	6079      	str	r1, [r7, #4]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	4413      	add	r3, r2
 8006dae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1ed      	bne.n	8006d98 <sum_sfn+0x10>
	return sum;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b086      	sub	sp, #24
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006dd8:	2100      	movs	r1, #0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff fc89 	bl	80066f2 <dir_sdi>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <dir_find+0x24>
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	e0a9      	b.n	8006f42 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006dee:	23ff      	movs	r3, #255	@ 0xff
 8006df0:	753b      	strb	r3, [r7, #20]
 8006df2:	7d3b      	ldrb	r3, [r7, #20]
 8006df4:	757b      	strb	r3, [r7, #21]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6938      	ldr	r0, [r7, #16]
 8006e06:	f7ff f895 	bl	8005f34 <move_window>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 8090 	bne.w	8006f36 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e1e:	7dbb      	ldrb	r3, [r7, #22]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <dir_find+0x60>
 8006e24:	2304      	movs	r3, #4
 8006e26:	75fb      	strb	r3, [r7, #23]
 8006e28:	e08a      	b.n	8006f40 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	330b      	adds	r3, #11
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e36:	73fb      	strb	r3, [r7, #15]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7bfa      	ldrb	r2, [r7, #15]
 8006e3c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006e3e:	7dbb      	ldrb	r3, [r7, #22]
 8006e40:	2be5      	cmp	r3, #229	@ 0xe5
 8006e42:	d007      	beq.n	8006e54 <dir_find+0x8a>
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <dir_find+0x98>
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	2b0f      	cmp	r3, #15
 8006e52:	d006      	beq.n	8006e62 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e54:	23ff      	movs	r3, #255	@ 0xff
 8006e56:	757b      	strb	r3, [r7, #21]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e60:	e05e      	b.n	8006f20 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b0f      	cmp	r3, #15
 8006e66:	d136      	bne.n	8006ed6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d154      	bne.n	8006f20 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006e76:	7dbb      	ldrb	r3, [r7, #22]
 8006e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00d      	beq.n	8006e9c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	7b5b      	ldrb	r3, [r3, #13]
 8006e86:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006e88:	7dbb      	ldrb	r3, [r7, #22]
 8006e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e8e:	75bb      	strb	r3, [r7, #22]
 8006e90:	7dbb      	ldrb	r3, [r7, #22]
 8006e92:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e9c:	7dba      	ldrb	r2, [r7, #22]
 8006e9e:	7d7b      	ldrb	r3, [r7, #21]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d115      	bne.n	8006ed0 <dir_find+0x106>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	330d      	adds	r3, #13
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	7d3a      	ldrb	r2, [r7, #20]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d10e      	bne.n	8006ed0 <dir_find+0x106>
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f7ff fdfd 	bl	8006abc <cmp_lfn>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <dir_find+0x106>
 8006ec8:	7d7b      	ldrb	r3, [r7, #21]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	e000      	b.n	8006ed2 <dir_find+0x108>
 8006ed0:	23ff      	movs	r3, #255	@ 0xff
 8006ed2:	757b      	strb	r3, [r7, #21]
 8006ed4:	e024      	b.n	8006f20 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006ed6:	7d7b      	ldrb	r3, [r7, #21]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <dir_find+0x126>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff ff51 	bl	8006d88 <sum_sfn>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	7d3b      	ldrb	r3, [r7, #20]
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d024      	beq.n	8006f3a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <dir_find+0x14a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a18      	ldr	r0, [r3, #32]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3324      	adds	r3, #36	@ 0x24
 8006f06:	220b      	movs	r2, #11
 8006f08:	4619      	mov	r1, r3
 8006f0a:	f7fe fe20 	bl	8005b4e <mem_cmp>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d014      	beq.n	8006f3e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f14:	23ff      	movs	r3, #255	@ 0xff
 8006f16:	757b      	strb	r3, [r7, #21]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006f20:	2100      	movs	r1, #0
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff fc6e 	bl	8006804 <dir_next>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f43f af65 	beq.w	8006dfe <dir_find+0x34>
 8006f34:	e004      	b.n	8006f40 <dir_find+0x176>
		if (res != FR_OK) break;
 8006f36:	bf00      	nop
 8006f38:	e002      	b.n	8006f40 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006f3a:	bf00      	nop
 8006f3c:	e000      	b.n	8006f40 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f3e:	bf00      	nop

	return res;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08c      	sub	sp, #48	@ 0x30
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006f60:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <dir_register+0x20>
 8006f68:	2306      	movs	r3, #6
 8006f6a:	e0e0      	b.n	800712e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f70:	e002      	b.n	8006f78 <dir_register+0x2c>
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	3301      	adds	r3, #1
 8006f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1f4      	bne.n	8006f72 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006f8e:	f107 030c 	add.w	r3, r7, #12
 8006f92:	220c      	movs	r2, #12
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fd9e 	bl	8005ad6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d032      	beq.n	800700a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2240      	movs	r2, #64	@ 0x40
 8006fa8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006fac:	2301      	movs	r3, #1
 8006fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fb0:	e016      	b.n	8006fe0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	f107 010c 	add.w	r1, r7, #12
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	f7ff fe53 	bl	8006c6c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff feff 	bl	8006dca <dir_find>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	3301      	adds	r3, #1
 8006fde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe2:	2b63      	cmp	r3, #99	@ 0x63
 8006fe4:	d9e5      	bls.n	8006fb2 <dir_register+0x66>
 8006fe6:	e000      	b.n	8006fea <dir_register+0x9e>
			if (res != FR_OK) break;
 8006fe8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	2b64      	cmp	r3, #100	@ 0x64
 8006fee:	d101      	bne.n	8006ff4 <dir_register+0xa8>
 8006ff0:	2307      	movs	r3, #7
 8006ff2:	e09c      	b.n	800712e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d002      	beq.n	8007002 <dir_register+0xb6>
 8006ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007000:	e095      	b.n	800712e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007002:	7dfa      	ldrb	r2, [r7, #23]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <dir_register+0xd8>
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	330c      	adds	r3, #12
 8007018:	4a47      	ldr	r2, [pc, #284]	@ (8007138 <dir_register+0x1ec>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	089b      	lsrs	r3, r3, #2
 8007020:	3301      	adds	r3, #1
 8007022:	e000      	b.n	8007026 <dir_register+0xda>
 8007024:	2301      	movs	r3, #1
 8007026:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007028:	6a39      	ldr	r1, [r7, #32]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fcc0 	bl	80069b0 <dir_alloc>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800703a:	2b00      	cmp	r3, #0
 800703c:	d148      	bne.n	80070d0 <dir_register+0x184>
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	3b01      	subs	r3, #1
 8007042:	623b      	str	r3, [r7, #32]
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d042      	beq.n	80070d0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695a      	ldr	r2, [r3, #20]
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	015b      	lsls	r3, r3, #5
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff fb4b 	bl	80066f2 <dir_sdi>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007062:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007066:	2b00      	cmp	r3, #0
 8007068:	d132      	bne.n	80070d0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3324      	adds	r3, #36	@ 0x24
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fe8a 	bl	8006d88 <sum_sfn>
 8007074:	4603      	mov	r3, r0
 8007076:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	4619      	mov	r1, r3
 800707e:	69f8      	ldr	r0, [r7, #28]
 8007080:	f7fe ff58 	bl	8005f34 <move_window>
 8007084:	4603      	mov	r3, r0
 8007086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800708a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800708e:	2b00      	cmp	r3, #0
 8007090:	d11d      	bne.n	80070ce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	6918      	ldr	r0, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a19      	ldr	r1, [r3, #32]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	7efb      	ldrb	r3, [r7, #27]
 80070a0:	f7ff fd7c 	bl	8006b9c <put_lfn>
				fs->wflag = 1;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2201      	movs	r2, #1
 80070a8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80070aa:	2100      	movs	r1, #0
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fba9 	bl	8006804 <dir_next>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80070b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d107      	bne.n	80070d0 <dir_register+0x184>
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	623b      	str	r3, [r7, #32]
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1d5      	bne.n	8007078 <dir_register+0x12c>
 80070cc:	e000      	b.n	80070d0 <dir_register+0x184>
				if (res != FR_OK) break;
 80070ce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80070d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d128      	bne.n	800712a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	4619      	mov	r1, r3
 80070de:	69f8      	ldr	r0, [r7, #28]
 80070e0:	f7fe ff28 	bl	8005f34 <move_window>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80070ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d11b      	bne.n	800712a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	2220      	movs	r2, #32
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fd0c 	bl	8005b18 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a18      	ldr	r0, [r3, #32]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3324      	adds	r3, #36	@ 0x24
 8007108:	220b      	movs	r2, #11
 800710a:	4619      	mov	r1, r3
 800710c:	f7fe fce3 	bl	8005ad6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	330c      	adds	r3, #12
 800711c:	f002 0218 	and.w	r2, r2, #24
 8007120:	b2d2      	uxtb	r2, r2
 8007122:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	2201      	movs	r2, #1
 8007128:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800712a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800712e:	4618      	mov	r0, r3
 8007130:	3730      	adds	r7, #48	@ 0x30
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	4ec4ec4f 	.word	0x4ec4ec4f

0800713c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08a      	sub	sp, #40	@ 0x28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	61ba      	str	r2, [r7, #24]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4413      	add	r3, r2
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800716a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800716c:	2b1f      	cmp	r3, #31
 800716e:	d940      	bls.n	80071f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007172:	2b2f      	cmp	r3, #47	@ 0x2f
 8007174:	d006      	beq.n	8007184 <create_name+0x48>
 8007176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007178:	2b5c      	cmp	r3, #92	@ 0x5c
 800717a:	d110      	bne.n	800719e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800717c:	e002      	b.n	8007184 <create_name+0x48>
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	3301      	adds	r3, #1
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	4413      	add	r3, r2
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b2f      	cmp	r3, #47	@ 0x2f
 800718e:	d0f6      	beq.n	800717e <create_name+0x42>
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	4413      	add	r3, r2
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b5c      	cmp	r3, #92	@ 0x5c
 800719a:	d0f0      	beq.n	800717e <create_name+0x42>
			break;
 800719c:	e02a      	b.n	80071f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80071a2:	d901      	bls.n	80071a8 <create_name+0x6c>
 80071a4:	2306      	movs	r3, #6
 80071a6:	e17d      	b.n	80074a4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80071a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80071ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071b0:	2101      	movs	r1, #1
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 fefe 	bl	8008fb4 <ff_convert>
 80071b8:	4603      	mov	r3, r0
 80071ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80071bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <create_name+0x8a>
 80071c2:	2306      	movs	r3, #6
 80071c4:	e16e      	b.n	80074a4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80071c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ca:	d809      	bhi.n	80071e0 <create_name+0xa4>
 80071cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071ce:	4619      	mov	r1, r3
 80071d0:	488d      	ldr	r0, [pc, #564]	@ (8007408 <create_name+0x2cc>)
 80071d2:	f7fe fce3 	bl	8005b9c <chk_chr>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <create_name+0xa4>
 80071dc:	2306      	movs	r3, #6
 80071de:	e161      	b.n	80074a4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	617a      	str	r2, [r7, #20]
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80071f0:	e7b4      	b.n	800715c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80071f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	441a      	add	r2, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80071fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007200:	2b1f      	cmp	r3, #31
 8007202:	d801      	bhi.n	8007208 <create_name+0xcc>
 8007204:	2304      	movs	r3, #4
 8007206:	e000      	b.n	800720a <create_name+0xce>
 8007208:	2300      	movs	r3, #0
 800720a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800720e:	e011      	b.n	8007234 <create_name+0xf8>
		w = lfn[di - 1];
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007216:	3b01      	subs	r3, #1
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007224:	2b20      	cmp	r3, #32
 8007226:	d002      	beq.n	800722e <create_name+0xf2>
 8007228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800722a:	2b2e      	cmp	r3, #46	@ 0x2e
 800722c:	d106      	bne.n	800723c <create_name+0x100>
		di--;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	3b01      	subs	r3, #1
 8007232:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1ea      	bne.n	8007210 <create_name+0xd4>
 800723a:	e000      	b.n	800723e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800723c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	2200      	movs	r2, #0
 8007248:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <create_name+0x118>
 8007250:	2306      	movs	r3, #6
 8007252:	e127      	b.n	80074a4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3324      	adds	r3, #36	@ 0x24
 8007258:	220b      	movs	r2, #11
 800725a:	2120      	movs	r1, #32
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fc5b 	bl	8005b18 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007262:	2300      	movs	r3, #0
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	e002      	b.n	800726e <create_name+0x132>
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	3301      	adds	r3, #1
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	2b20      	cmp	r3, #32
 800727a:	d0f5      	beq.n	8007268 <create_name+0x12c>
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	2b2e      	cmp	r3, #46	@ 0x2e
 8007288:	d0ee      	beq.n	8007268 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d009      	beq.n	80072a4 <create_name+0x168>
 8007290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007294:	f043 0303 	orr.w	r3, r3, #3
 8007298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800729c:	e002      	b.n	80072a4 <create_name+0x168>
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <create_name+0x182>
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80072b0:	3b01      	subs	r3, #1
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80072bc:	d1ef      	bne.n	800729e <create_name+0x162>

	i = b = 0; ni = 8;
 80072be:	2300      	movs	r3, #0
 80072c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80072c4:	2300      	movs	r3, #0
 80072c6:	623b      	str	r3, [r7, #32]
 80072c8:	2308      	movs	r3, #8
 80072ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	61ba      	str	r2, [r7, #24]
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80072dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8090 	beq.w	8007404 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80072e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d006      	beq.n	80072f8 <create_name+0x1bc>
 80072ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ee:	d10a      	bne.n	8007306 <create_name+0x1ca>
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d006      	beq.n	8007306 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80072f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072fc:	f043 0303 	orr.w	r3, r3, #3
 8007300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007304:	e07d      	b.n	8007402 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007306:	6a3a      	ldr	r2, [r7, #32]
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	429a      	cmp	r2, r3
 800730c:	d203      	bcs.n	8007316 <create_name+0x1da>
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	429a      	cmp	r2, r3
 8007314:	d123      	bne.n	800735e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2b0b      	cmp	r3, #11
 800731a:	d106      	bne.n	800732a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800731c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007320:	f043 0303 	orr.w	r3, r3, #3
 8007324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007328:	e075      	b.n	8007416 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	429a      	cmp	r2, r3
 8007330:	d005      	beq.n	800733e <create_name+0x202>
 8007332:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007336:	f043 0303 	orr.w	r3, r3, #3
 800733a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	429a      	cmp	r2, r3
 8007344:	d866      	bhi.n	8007414 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	2308      	movs	r3, #8
 800734c:	623b      	str	r3, [r7, #32]
 800734e:	230b      	movs	r3, #11
 8007350:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007352:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800735c:	e051      	b.n	8007402 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800735e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007360:	2b7f      	cmp	r3, #127	@ 0x7f
 8007362:	d914      	bls.n	800738e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007364:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007366:	2100      	movs	r1, #0
 8007368:	4618      	mov	r0, r3
 800736a:	f001 fe23 	bl	8008fb4 <ff_convert>
 800736e:	4603      	mov	r3, r0
 8007370:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007372:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <create_name+0x246>
 8007378:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800737a:	3b80      	subs	r3, #128	@ 0x80
 800737c:	4a23      	ldr	r2, [pc, #140]	@ (800740c <create_name+0x2d0>)
 800737e:	5cd3      	ldrb	r3, [r2, r3]
 8007380:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007386:	f043 0302 	orr.w	r3, r3, #2
 800738a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800738e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <create_name+0x268>
 8007394:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007396:	4619      	mov	r1, r3
 8007398:	481d      	ldr	r0, [pc, #116]	@ (8007410 <create_name+0x2d4>)
 800739a:	f7fe fbff 	bl	8005b9c <chk_chr>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80073a4:	235f      	movs	r3, #95	@ 0x5f
 80073a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80073a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073ac:	f043 0303 	orr.w	r3, r3, #3
 80073b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80073b4:	e01b      	b.n	80073ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80073b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073b8:	2b40      	cmp	r3, #64	@ 0x40
 80073ba:	d909      	bls.n	80073d0 <create_name+0x294>
 80073bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073be:	2b5a      	cmp	r3, #90	@ 0x5a
 80073c0:	d806      	bhi.n	80073d0 <create_name+0x294>
					b |= 2;
 80073c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073c6:	f043 0302 	orr.w	r3, r3, #2
 80073ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80073ce:	e00e      	b.n	80073ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80073d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073d2:	2b60      	cmp	r3, #96	@ 0x60
 80073d4:	d90b      	bls.n	80073ee <create_name+0x2b2>
 80073d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073d8:	2b7a      	cmp	r3, #122	@ 0x7a
 80073da:	d808      	bhi.n	80073ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80073dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80073e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073ea:	3b20      	subs	r3, #32
 80073ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	623a      	str	r2, [r7, #32]
 80073f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80073f6:	b2d1      	uxtb	r1, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	460a      	mov	r2, r1
 80073fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007402:	e763      	b.n	80072cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007404:	bf00      	nop
 8007406:	e006      	b.n	8007416 <create_name+0x2da>
 8007408:	0800ab38 	.word	0x0800ab38
 800740c:	0800abb8 	.word	0x0800abb8
 8007410:	0800ab44 	.word	0x0800ab44
			if (si > di) break;			/* No extension */
 8007414:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800741c:	2be5      	cmp	r3, #229	@ 0xe5
 800741e:	d103      	bne.n	8007428 <create_name+0x2ec>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2205      	movs	r2, #5
 8007424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	2b08      	cmp	r3, #8
 800742c:	d104      	bne.n	8007438 <create_name+0x2fc>
 800742e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007438:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800743c:	f003 030c 	and.w	r3, r3, #12
 8007440:	2b0c      	cmp	r3, #12
 8007442:	d005      	beq.n	8007450 <create_name+0x314>
 8007444:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	2b03      	cmp	r3, #3
 800744e:	d105      	bne.n	800745c <create_name+0x320>
 8007450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007454:	f043 0302 	orr.w	r3, r3, #2
 8007458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800745c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d117      	bne.n	8007498 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007468:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	2b01      	cmp	r3, #1
 8007472:	d105      	bne.n	8007480 <create_name+0x344>
 8007474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007478:	f043 0310 	orr.w	r3, r3, #16
 800747c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007480:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007484:	f003 030c 	and.w	r3, r3, #12
 8007488:	2b04      	cmp	r3, #4
 800748a:	d105      	bne.n	8007498 <create_name+0x35c>
 800748c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007490:	f043 0308 	orr.w	r3, r3, #8
 8007494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800749e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80074a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	@ 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80074c0:	e002      	b.n	80074c8 <follow_path+0x1c>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80074ce:	d0f8      	beq.n	80074c2 <follow_path+0x16>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80074d6:	d0f4      	beq.n	80074c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2200      	movs	r2, #0
 80074dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b1f      	cmp	r3, #31
 80074e4:	d80a      	bhi.n	80074fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2280      	movs	r2, #128	@ 0x80
 80074ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80074ee:	2100      	movs	r1, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff f8fe 	bl	80066f2 <dir_sdi>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]
 80074fa:	e048      	b.n	800758e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074fc:	463b      	mov	r3, r7
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff fe1b 	bl	800713c <create_name>
 8007506:	4603      	mov	r3, r0
 8007508:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d139      	bne.n	8007584 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff fc5a 	bl	8006dca <dir_find>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007520:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b04      	cmp	r3, #4
 800752c:	d12c      	bne.n	8007588 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d127      	bne.n	8007588 <follow_path+0xdc>
 8007538:	2305      	movs	r3, #5
 800753a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800753c:	e024      	b.n	8007588 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d121      	bne.n	800758c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	799b      	ldrb	r3, [r3, #6]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	d102      	bne.n	800755a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007554:	2305      	movs	r3, #5
 8007556:	75fb      	strb	r3, [r7, #23]
 8007558:	e019      	b.n	800758e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	8992      	ldrh	r2, [r2, #12]
 8007568:	fbb3 f0f2 	udiv	r0, r3, r2
 800756c:	fb00 f202 	mul.w	r2, r0, r2
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	440b      	add	r3, r1
 8007574:	4619      	mov	r1, r3
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff fa61 	bl	8006a3e <ld_clust>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007582:	e7bb      	b.n	80074fc <follow_path+0x50>
			if (res != FR_OK) break;
 8007584:	bf00      	nop
 8007586:	e002      	b.n	800758e <follow_path+0xe2>
				break;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800758c:	bf00      	nop
			}
		}
	}

	return res;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295
 80075a4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d031      	beq.n	8007612 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e002      	b.n	80075bc <get_ldnumber+0x24>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	3301      	adds	r3, #1
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b1f      	cmp	r3, #31
 80075c2:	d903      	bls.n	80075cc <get_ldnumber+0x34>
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80075ca:	d1f4      	bne.n	80075b6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80075d2:	d11c      	bne.n	800760e <get_ldnumber+0x76>
			tp = *path;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	60fa      	str	r2, [r7, #12]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	3b30      	subs	r3, #48	@ 0x30
 80075e4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b09      	cmp	r3, #9
 80075ea:	d80e      	bhi.n	800760a <get_ldnumber+0x72>
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d10a      	bne.n	800760a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d107      	bne.n	800760a <get_ldnumber+0x72>
					vol = (int)i;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	3301      	adds	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	e002      	b.n	8007614 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800760e:	2300      	movs	r3, #0
 8007610:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007612:	693b      	ldr	r3, [r7, #16]
}
 8007614:	4618      	mov	r0, r3
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	70da      	strb	r2, [r3, #3]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fe fc7a 	bl	8005f34 <move_window>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <check_fs+0x2a>
 8007646:	2304      	movs	r3, #4
 8007648:	e038      	b.n	80076bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3338      	adds	r3, #56	@ 0x38
 800764e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe f9bc 	bl	80059d0 <ld_word>
 8007658:	4603      	mov	r3, r0
 800765a:	461a      	mov	r2, r3
 800765c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007660:	429a      	cmp	r2, r3
 8007662:	d001      	beq.n	8007668 <check_fs+0x48>
 8007664:	2303      	movs	r3, #3
 8007666:	e029      	b.n	80076bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800766e:	2be9      	cmp	r3, #233	@ 0xe9
 8007670:	d009      	beq.n	8007686 <check_fs+0x66>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007678:	2beb      	cmp	r3, #235	@ 0xeb
 800767a:	d11e      	bne.n	80076ba <check_fs+0x9a>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007682:	2b90      	cmp	r3, #144	@ 0x90
 8007684:	d119      	bne.n	80076ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3338      	adds	r3, #56	@ 0x38
 800768a:	3336      	adds	r3, #54	@ 0x36
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe f9b8 	bl	8005a02 <ld_dword>
 8007692:	4603      	mov	r3, r0
 8007694:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007698:	4a0a      	ldr	r2, [pc, #40]	@ (80076c4 <check_fs+0xa4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d101      	bne.n	80076a2 <check_fs+0x82>
 800769e:	2300      	movs	r3, #0
 80076a0:	e00c      	b.n	80076bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3338      	adds	r3, #56	@ 0x38
 80076a6:	3352      	adds	r3, #82	@ 0x52
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe f9aa 	bl	8005a02 <ld_dword>
 80076ae:	4603      	mov	r3, r0
 80076b0:	4a05      	ldr	r2, [pc, #20]	@ (80076c8 <check_fs+0xa8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d101      	bne.n	80076ba <check_fs+0x9a>
 80076b6:	2300      	movs	r3, #0
 80076b8:	e000      	b.n	80076bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80076ba:	2302      	movs	r3, #2
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	00544146 	.word	0x00544146
 80076c8:	33544146 	.word	0x33544146

080076cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b096      	sub	sp, #88	@ 0x58
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7ff ff59 	bl	8007598 <get_ldnumber>
 80076e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80076e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da01      	bge.n	80076f2 <find_volume+0x26>
 80076ee:	230b      	movs	r3, #11
 80076f0:	e265      	b.n	8007bbe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80076f2:	4a9f      	ldr	r2, [pc, #636]	@ (8007970 <find_volume+0x2a4>)
 80076f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <find_volume+0x3a>
 8007702:	230c      	movs	r3, #12
 8007704:	e25b      	b.n	8007bbe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800770a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	f023 0301 	bic.w	r3, r3, #1
 8007712:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01a      	beq.n	8007752 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	4618      	mov	r0, r3
 8007722:	f7fe f8b5 	bl	8005890 <disk_status>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800772c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10c      	bne.n	8007752 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <find_volume+0x82>
 800773e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007742:	f003 0304 	and.w	r3, r3, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800774a:	230a      	movs	r3, #10
 800774c:	e237      	b.n	8007bbe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800774e:	2300      	movs	r3, #0
 8007750:	e235      	b.n	8007bbe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	2200      	movs	r2, #0
 8007756:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800775a:	b2da      	uxtb	r2, r3
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe f8ad 	bl	80058c4 <disk_initialize>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800777c:	2303      	movs	r3, #3
 800777e:	e21e      	b.n	8007bbe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d007      	beq.n	8007796 <find_volume+0xca>
 8007786:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007792:	230a      	movs	r3, #10
 8007794:	e213      	b.n	8007bbe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007798:	7858      	ldrb	r0, [r3, #1]
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	330c      	adds	r3, #12
 800779e:	461a      	mov	r2, r3
 80077a0:	2102      	movs	r1, #2
 80077a2:	f7fe f8f7 	bl	8005994 <disk_ioctl>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <find_volume+0xe4>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e206      	b.n	8007bbe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80077b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b2:	899b      	ldrh	r3, [r3, #12]
 80077b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077b8:	d80d      	bhi.n	80077d6 <find_volume+0x10a>
 80077ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077bc:	899b      	ldrh	r3, [r3, #12]
 80077be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c2:	d308      	bcc.n	80077d6 <find_volume+0x10a>
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	899b      	ldrh	r3, [r3, #12]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	899b      	ldrh	r3, [r3, #12]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	4013      	ands	r3, r2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <find_volume+0x10e>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e1f1      	b.n	8007bbe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80077de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077e2:	f7ff ff1d 	bl	8007620 <check_fs>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80077ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d149      	bne.n	8007888 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077f4:	2300      	movs	r3, #0
 80077f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80077f8:	e01e      	b.n	8007838 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007808:	4413      	add	r3, r2
 800780a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	3304      	adds	r3, #4
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d006      	beq.n	8007824 <find_volume+0x158>
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	3308      	adds	r3, #8
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe f8f1 	bl	8005a02 <ld_dword>
 8007820:	4602      	mov	r2, r0
 8007822:	e000      	b.n	8007826 <find_volume+0x15a>
 8007824:	2200      	movs	r2, #0
 8007826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	3358      	adds	r3, #88	@ 0x58
 800782c:	443b      	add	r3, r7
 800782e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007834:	3301      	adds	r3, #1
 8007836:	643b      	str	r3, [r7, #64]	@ 0x40
 8007838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783a:	2b03      	cmp	r3, #3
 800783c:	d9dd      	bls.n	80077fa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800783e:	2300      	movs	r3, #0
 8007840:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <find_volume+0x182>
 8007848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800784a:	3b01      	subs	r3, #1
 800784c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800784e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	3358      	adds	r3, #88	@ 0x58
 8007854:	443b      	add	r3, r7
 8007856:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800785a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800785c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <find_volume+0x1a2>
 8007862:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007864:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007866:	f7ff fedb 	bl	8007620 <check_fs>
 800786a:	4603      	mov	r3, r0
 800786c:	e000      	b.n	8007870 <find_volume+0x1a4>
 800786e:	2303      	movs	r3, #3
 8007870:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007874:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007878:	2b01      	cmp	r3, #1
 800787a:	d905      	bls.n	8007888 <find_volume+0x1bc>
 800787c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800787e:	3301      	adds	r3, #1
 8007880:	643b      	str	r3, [r7, #64]	@ 0x40
 8007882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007884:	2b03      	cmp	r3, #3
 8007886:	d9e2      	bls.n	800784e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007888:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800788c:	2b04      	cmp	r3, #4
 800788e:	d101      	bne.n	8007894 <find_volume+0x1c8>
 8007890:	2301      	movs	r3, #1
 8007892:	e194      	b.n	8007bbe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007894:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007898:	2b01      	cmp	r3, #1
 800789a:	d901      	bls.n	80078a0 <find_volume+0x1d4>
 800789c:	230d      	movs	r3, #13
 800789e:	e18e      	b.n	8007bbe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80078a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a2:	3338      	adds	r3, #56	@ 0x38
 80078a4:	330b      	adds	r3, #11
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe f892 	bl	80059d0 <ld_word>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b2:	899b      	ldrh	r3, [r3, #12]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <find_volume+0x1f0>
 80078b8:	230d      	movs	r3, #13
 80078ba:	e180      	b.n	8007bbe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078be:	3338      	adds	r3, #56	@ 0x38
 80078c0:	3316      	adds	r3, #22
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe f884 	bl	80059d0 <ld_word>
 80078c8:	4603      	mov	r3, r0
 80078ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80078cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <find_volume+0x214>
 80078d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d4:	3338      	adds	r3, #56	@ 0x38
 80078d6:	3324      	adds	r3, #36	@ 0x24
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe f892 	bl	8005a02 <ld_dword>
 80078de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80078e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078e4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f2:	789b      	ldrb	r3, [r3, #2]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d005      	beq.n	8007904 <find_volume+0x238>
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	789b      	ldrb	r3, [r3, #2]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d001      	beq.n	8007904 <find_volume+0x238>
 8007900:	230d      	movs	r3, #13
 8007902:	e15c      	b.n	8007bbe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	789b      	ldrb	r3, [r3, #2]
 8007908:	461a      	mov	r2, r3
 800790a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007918:	461a      	mov	r2, r3
 800791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	895b      	ldrh	r3, [r3, #10]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d008      	beq.n	8007938 <find_volume+0x26c>
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	895b      	ldrh	r3, [r3, #10]
 800792a:	461a      	mov	r2, r3
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	895b      	ldrh	r3, [r3, #10]
 8007930:	3b01      	subs	r3, #1
 8007932:	4013      	ands	r3, r2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <find_volume+0x270>
 8007938:	230d      	movs	r3, #13
 800793a:	e140      	b.n	8007bbe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800793c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793e:	3338      	adds	r3, #56	@ 0x38
 8007940:	3311      	adds	r3, #17
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe f844 	bl	80059d0 <ld_word>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	891b      	ldrh	r3, [r3, #8]
 8007954:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007956:	8992      	ldrh	r2, [r2, #12]
 8007958:	0952      	lsrs	r2, r2, #5
 800795a:	b292      	uxth	r2, r2
 800795c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007960:	fb01 f202 	mul.w	r2, r1, r2
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <find_volume+0x2a8>
 800796c:	230d      	movs	r3, #13
 800796e:	e126      	b.n	8007bbe <find_volume+0x4f2>
 8007970:	200002a4 	.word	0x200002a4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007976:	3338      	adds	r3, #56	@ 0x38
 8007978:	3313      	adds	r3, #19
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe f828 	bl	80059d0 <ld_word>
 8007980:	4603      	mov	r3, r0
 8007982:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <find_volume+0x2cc>
 800798a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798c:	3338      	adds	r3, #56	@ 0x38
 800798e:	3320      	adds	r3, #32
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe f836 	bl	8005a02 <ld_dword>
 8007996:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	3338      	adds	r3, #56	@ 0x38
 800799c:	330e      	adds	r3, #14
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe f816 	bl	80059d0 <ld_word>
 80079a4:	4603      	mov	r3, r0
 80079a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80079a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <find_volume+0x2e6>
 80079ae:	230d      	movs	r3, #13
 80079b0:	e105      	b.n	8007bbe <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80079b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80079b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b6:	4413      	add	r3, r2
 80079b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079ba:	8911      	ldrh	r1, [r2, #8]
 80079bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079be:	8992      	ldrh	r2, [r2, #12]
 80079c0:	0952      	lsrs	r2, r2, #5
 80079c2:	b292      	uxth	r2, r2
 80079c4:	fbb1 f2f2 	udiv	r2, r1, r2
 80079c8:	b292      	uxth	r2, r2
 80079ca:	4413      	add	r3, r2
 80079cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80079ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d201      	bcs.n	80079da <find_volume+0x30e>
 80079d6:	230d      	movs	r3, #13
 80079d8:	e0f1      	b.n	8007bbe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80079da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079e2:	8952      	ldrh	r2, [r2, #10]
 80079e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <find_volume+0x328>
 80079f0:	230d      	movs	r3, #13
 80079f2:	e0e4      	b.n	8007bbe <find_volume+0x4f2>
		fmt = FS_FAT32;
 80079f4:	2303      	movs	r3, #3
 80079f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d802      	bhi.n	8007a0a <find_volume+0x33e>
 8007a04:	2302      	movs	r3, #2
 8007a06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d802      	bhi.n	8007a1a <find_volume+0x34e>
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1c:	1c9a      	adds	r2, r3, #2
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a26:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007a28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a2c:	441a      	add	r2, r3
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a30:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007a32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a36:	441a      	add	r2, r3
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d11e      	bne.n	8007a82 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a46:	3338      	adds	r3, #56	@ 0x38
 8007a48:	332a      	adds	r3, #42	@ 0x2a
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fd ffc0 	bl	80059d0 <ld_word>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <find_volume+0x38e>
 8007a56:	230d      	movs	r3, #13
 8007a58:	e0b1      	b.n	8007bbe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5c:	891b      	ldrh	r3, [r3, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <find_volume+0x39a>
 8007a62:	230d      	movs	r3, #13
 8007a64:	e0ab      	b.n	8007bbe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	3338      	adds	r3, #56	@ 0x38
 8007a6a:	332c      	adds	r3, #44	@ 0x2c
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fd ffc8 	bl	8005a02 <ld_dword>
 8007a72:	4602      	mov	r2, r0
 8007a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a76:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a80:	e01f      	b.n	8007ac2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a84:	891b      	ldrh	r3, [r3, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <find_volume+0x3c2>
 8007a8a:	230d      	movs	r3, #13
 8007a8c:	e097      	b.n	8007bbe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a94:	441a      	add	r2, r3
 8007a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a98:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d103      	bne.n	8007aaa <find_volume+0x3de>
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	e00a      	b.n	8007ac0 <find_volume+0x3f4>
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	69da      	ldr	r2, [r3, #28]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	085a      	lsrs	r2, r3, #1
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007ac0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	899b      	ldrh	r3, [r3, #12]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ace:	440b      	add	r3, r1
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ad4:	8989      	ldrh	r1, [r1, #12]
 8007ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d201      	bcs.n	8007ae2 <find_volume+0x416>
 8007ade:	230d      	movs	r3, #13
 8007ae0:	e06d      	b.n	8007bbe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae8:	619a      	str	r2, [r3, #24]
 8007aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aec:	699a      	ldr	r2, [r3, #24]
 8007aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	2280      	movs	r2, #128	@ 0x80
 8007af6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007af8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d149      	bne.n	8007b94 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b02:	3338      	adds	r3, #56	@ 0x38
 8007b04:	3330      	adds	r3, #48	@ 0x30
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd ff62 	bl	80059d0 <ld_word>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d140      	bne.n	8007b94 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b14:	3301      	adds	r3, #1
 8007b16:	4619      	mov	r1, r3
 8007b18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b1a:	f7fe fa0b 	bl	8005f34 <move_window>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d137      	bne.n	8007b94 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b26:	2200      	movs	r2, #0
 8007b28:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2c:	3338      	adds	r3, #56	@ 0x38
 8007b2e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fd ff4c 	bl	80059d0 <ld_word>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d127      	bne.n	8007b94 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b46:	3338      	adds	r3, #56	@ 0x38
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd ff5a 	bl	8005a02 <ld_dword>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc8 <find_volume+0x4fc>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d11e      	bne.n	8007b94 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b58:	3338      	adds	r3, #56	@ 0x38
 8007b5a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fd ff4f 	bl	8005a02 <ld_dword>
 8007b64:	4603      	mov	r3, r0
 8007b66:	4a19      	ldr	r2, [pc, #100]	@ (8007bcc <find_volume+0x500>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d113      	bne.n	8007b94 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	3338      	adds	r3, #56	@ 0x38
 8007b70:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fd ff44 	bl	8005a02 <ld_dword>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	3338      	adds	r3, #56	@ 0x38
 8007b84:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fd ff3a 	bl	8005a02 <ld_dword>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007b9a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd0 <find_volume+0x504>)
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd0 <find_volume+0x504>)
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	4b09      	ldr	r3, [pc, #36]	@ (8007bd0 <find_volume+0x504>)
 8007baa:	881a      	ldrh	r2, [r3, #0]
 8007bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb2:	4a08      	ldr	r2, [pc, #32]	@ (8007bd4 <find_volume+0x508>)
 8007bb4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007bb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bb8:	f7fe f954 	bl	8005e64 <clear_lock>
#endif
	return FR_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3758      	adds	r7, #88	@ 0x58
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	41615252 	.word	0x41615252
 8007bcc:	61417272 	.word	0x61417272
 8007bd0:	200002a8 	.word	0x200002a8
 8007bd4:	200002cc 	.word	0x200002cc

08007bd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007be2:	2309      	movs	r3, #9
 8007be4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01c      	beq.n	8007c26 <validate+0x4e>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d018      	beq.n	8007c26 <validate+0x4e>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d013      	beq.n	8007c26 <validate+0x4e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	889a      	ldrh	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	88db      	ldrh	r3, [r3, #6]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d10c      	bne.n	8007c26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd fe3c 	bl	8005890 <disk_status>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <validate+0x4e>
			res = FR_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <validate+0x5a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	e000      	b.n	8007c34 <validate+0x5c>
 8007c32:	2300      	movs	r3, #0
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	6013      	str	r3, [r2, #0]
	return res;
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007c56:	f107 0310 	add.w	r3, r7, #16
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff fc9c 	bl	8007598 <get_ldnumber>
 8007c60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	da01      	bge.n	8007c6c <f_mount+0x28>
 8007c68:	230b      	movs	r3, #11
 8007c6a:	e02b      	b.n	8007cc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c6c:	4a17      	ldr	r2, [pc, #92]	@ (8007ccc <f_mount+0x88>)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c7c:	69b8      	ldr	r0, [r7, #24]
 8007c7e:	f7fe f8f1 	bl	8005e64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	490d      	ldr	r1, [pc, #52]	@ (8007ccc <f_mount+0x88>)
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <f_mount+0x66>
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d001      	beq.n	8007cae <f_mount+0x6a>
 8007caa:	2300      	movs	r3, #0
 8007cac:	e00a      	b.n	8007cc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007cae:	f107 010c 	add.w	r1, r7, #12
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff fd07 	bl	80076cc <find_volume>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	200002a4 	.word	0x200002a4

08007cd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b09a      	sub	sp, #104	@ 0x68
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <f_open+0x18>
 8007ce4:	2309      	movs	r3, #9
 8007ce6:	e1b7      	b.n	8008058 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007cf0:	79fa      	ldrb	r2, [r7, #7]
 8007cf2:	f107 0114 	add.w	r1, r7, #20
 8007cf6:	f107 0308 	add.w	r3, r7, #8
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fce6 	bl	80076cc <find_volume>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007d06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f040 819b 	bne.w	8008046 <f_open+0x376>
		dj.obj.fs = fs;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	f107 0318 	add.w	r3, r7, #24
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff fbc5 	bl	80074ac <follow_path>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007d28:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d118      	bne.n	8007d62 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007d30:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007d34:	b25b      	sxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da03      	bge.n	8007d42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007d3a:	2306      	movs	r3, #6
 8007d3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007d40:	e00f      	b.n	8007d62 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	bf8c      	ite	hi
 8007d48:	2301      	movhi	r3, #1
 8007d4a:	2300      	movls	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f107 0318 	add.w	r3, r7, #24
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fd ff3c 	bl	8005bd4 <chk_lock>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	f003 031c 	and.w	r3, r3, #28
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d07f      	beq.n	8007e6c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007d6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d017      	beq.n	8007da4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d10e      	bne.n	8007d9a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d7c:	f7fd ff86 	bl	8005c8c <enq_lock>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d006      	beq.n	8007d94 <f_open+0xc4>
 8007d86:	f107 0318 	add.w	r3, r7, #24
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff f8de 	bl	8006f4c <dir_register>
 8007d90:	4603      	mov	r3, r0
 8007d92:	e000      	b.n	8007d96 <f_open+0xc6>
 8007d94:	2312      	movs	r3, #18
 8007d96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	f043 0308 	orr.w	r3, r3, #8
 8007da0:	71fb      	strb	r3, [r7, #7]
 8007da2:	e010      	b.n	8007dc6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007da4:	7fbb      	ldrb	r3, [r7, #30]
 8007da6:	f003 0311 	and.w	r3, r3, #17
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <f_open+0xe6>
					res = FR_DENIED;
 8007dae:	2307      	movs	r3, #7
 8007db0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007db4:	e007      	b.n	8007dc6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <f_open+0xf6>
 8007dc0:	2308      	movs	r3, #8
 8007dc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d168      	bne.n	8007ea0 <f_open+0x1d0>
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d063      	beq.n	8007ea0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007dd8:	f7fd fbbc 	bl	8005554 <get_fattime>
 8007ddc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de0:	330e      	adds	r3, #14
 8007de2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fd fe4a 	bl	8005a7e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dec:	3316      	adds	r3, #22
 8007dee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fd fe44 	bl	8005a7e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df8:	330b      	adds	r3, #11
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e02:	4611      	mov	r1, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe fe1a 	bl	8006a3e <ld_clust>
 8007e0a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e10:	2200      	movs	r2, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fe32 	bl	8006a7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1a:	331c      	adds	r3, #28
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fd fe2d 	bl	8005a7e <st_dword>
					fs->wflag = 1;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2201      	movs	r2, #1
 8007e28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d037      	beq.n	8007ea0 <f_open+0x1d0>
						dw = fs->winsect;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e34:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007e36:	f107 0318 	add.w	r3, r7, #24
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fb22 	bl	8006488 <remove_chain>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007e4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d126      	bne.n	8007ea0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe f86c 	bl	8005f34 <move_window>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e66:	3a01      	subs	r2, #1
 8007e68:	615a      	str	r2, [r3, #20]
 8007e6a:	e019      	b.n	8007ea0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d115      	bne.n	8007ea0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e74:	7fbb      	ldrb	r3, [r7, #30]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007e7e:	2304      	movs	r3, #4
 8007e80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007e84:	e00c      	b.n	8007ea0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <f_open+0x1d0>
 8007e90:	7fbb      	ldrb	r3, [r7, #30]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <f_open+0x1d0>
						res = FR_DENIED;
 8007e9a:	2307      	movs	r3, #7
 8007e9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d126      	bne.n	8007ef6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eb8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007ec2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	bf8c      	ite	hi
 8007ece:	2301      	movhi	r3, #1
 8007ed0:	2300      	movls	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f107 0318 	add.w	r3, r7, #24
 8007eda:	4611      	mov	r1, r2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fd fef7 	bl	8005cd0 <inc_lock>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <f_open+0x226>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007ef6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 80a3 	bne.w	8008046 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fd99 	bl	8006a3e <ld_clust>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	331c      	adds	r3, #28
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fd fd73 	bl	8005a02 <ld_dword>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	88da      	ldrh	r2, [r3, #6]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	79fa      	ldrb	r2, [r7, #7]
 8007f3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3330      	adds	r3, #48	@ 0x30
 8007f52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fd fddd 	bl	8005b18 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	f003 0320 	and.w	r3, r3, #32
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d06e      	beq.n	8008046 <f_open+0x376>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d06a      	beq.n	8008046 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	895b      	ldrh	r3, [r3, #10]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	899b      	ldrh	r3, [r3, #12]
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f94:	e016      	b.n	8007fc4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe f887 	bl	80060ae <get_fat>
 8007fa0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007fa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d802      	bhi.n	8007fae <f_open+0x2de>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007fae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb4:	d102      	bne.n	8007fbc <f_open+0x2ec>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007fbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <f_open+0x304>
 8007fcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d8e0      	bhi.n	8007f96 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007fd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007fda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d131      	bne.n	8008046 <f_open+0x376>
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	899b      	ldrh	r3, [r3, #12]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fea:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fee:	fb01 f202 	mul.w	r2, r1, r2
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d026      	beq.n	8008046 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fe f837 	bl	8006070 <clust2sect>
 8008002:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d103      	bne.n	8008012 <f_open+0x342>
						res = FR_INT_ERR;
 800800a:	2302      	movs	r3, #2
 800800c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008010:	e019      	b.n	8008046 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	899b      	ldrh	r3, [r3, #12]
 8008016:	461a      	mov	r2, r3
 8008018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800801a:	fbb3 f2f2 	udiv	r2, r3, r2
 800801e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008020:	441a      	add	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	7858      	ldrb	r0, [r3, #1]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1a      	ldr	r2, [r3, #32]
 8008034:	2301      	movs	r3, #1
 8008036:	f7fd fc6d 	bl	8005914 <disk_read>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <f_open+0x376>
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008046:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <f_open+0x384>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008054:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008058:	4618      	mov	r0, r3
 800805a:	3768      	adds	r7, #104	@ 0x68
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08e      	sub	sp, #56	@ 0x38
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f107 0214 	add.w	r2, r7, #20
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff fda9 	bl	8007bd8 <validate>
 8008086:	4603      	mov	r3, r0
 8008088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800808c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008090:	2b00      	cmp	r3, #0
 8008092:	d107      	bne.n	80080a4 <f_read+0x44>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	7d5b      	ldrb	r3, [r3, #21]
 8008098:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800809c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <f_read+0x4a>
 80080a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80080a8:	e135      	b.n	8008316 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	7d1b      	ldrb	r3, [r3, #20]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <f_read+0x5a>
 80080b6:	2307      	movs	r3, #7
 80080b8:	e12d      	b.n	8008316 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	f240 811e 	bls.w	800830c <f_read+0x2ac>
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80080d4:	e11a      	b.n	800830c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	8992      	ldrh	r2, [r2, #12]
 80080de:	fbb3 f1f2 	udiv	r1, r3, r2
 80080e2:	fb01 f202 	mul.w	r2, r1, r2
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f040 80d5 	bne.w	8008298 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	8992      	ldrh	r2, [r2, #12]
 80080f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	8952      	ldrh	r2, [r2, #10]
 80080fe:	3a01      	subs	r2, #1
 8008100:	4013      	ands	r3, r2
 8008102:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d12f      	bne.n	800816a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	633b      	str	r3, [r7, #48]	@ 0x30
 8008118:	e013      	b.n	8008142 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	4619      	mov	r1, r3
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7fe faaa 	bl	8006682 <clmt_clust>
 800812e:	6338      	str	r0, [r7, #48]	@ 0x30
 8008130:	e007      	b.n	8008142 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fd ffb7 	bl	80060ae <get_fat>
 8008140:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	2b01      	cmp	r3, #1
 8008146:	d804      	bhi.n	8008152 <f_read+0xf2>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2202      	movs	r2, #2
 800814c:	755a      	strb	r2, [r3, #21]
 800814e:	2302      	movs	r3, #2
 8008150:	e0e1      	b.n	8008316 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008158:	d104      	bne.n	8008164 <f_read+0x104>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	755a      	strb	r2, [r3, #21]
 8008160:	2301      	movs	r3, #1
 8008162:	e0d8      	b.n	8008316 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008168:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f7fd ff7c 	bl	8006070 <clust2sect>
 8008178:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d104      	bne.n	800818a <f_read+0x12a>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2202      	movs	r2, #2
 8008184:	755a      	strb	r2, [r3, #21]
 8008186:	2302      	movs	r3, #2
 8008188:	e0c5      	b.n	8008316 <f_read+0x2b6>
			sect += csect;
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	899b      	ldrh	r3, [r3, #12]
 8008196:	461a      	mov	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	fbb3 f3f2 	udiv	r3, r3, r2
 800819e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d041      	beq.n	800822a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	4413      	add	r3, r2
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	8952      	ldrh	r2, [r2, #10]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d905      	bls.n	80081c0 <f_read+0x160>
					cc = fs->csize - csect;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	895b      	ldrh	r3, [r3, #10]
 80081b8:	461a      	mov	r2, r3
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	7858      	ldrb	r0, [r3, #1]
 80081c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081ca:	f7fd fba3 	bl	8005914 <disk_read>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <f_read+0x17e>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	755a      	strb	r2, [r3, #21]
 80081da:	2301      	movs	r3, #1
 80081dc:	e09b      	b.n	8008316 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	7d1b      	ldrb	r3, [r3, #20]
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da18      	bge.n	800821a <f_read+0x1ba>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6a1a      	ldr	r2, [r3, #32]
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d911      	bls.n	800821a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a1a      	ldr	r2, [r3, #32]
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	8992      	ldrh	r2, [r2, #12]
 8008202:	fb02 f303 	mul.w	r3, r2, r3
 8008206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008208:	18d0      	adds	r0, r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	899b      	ldrh	r3, [r3, #12]
 8008214:	461a      	mov	r2, r3
 8008216:	f7fd fc5e 	bl	8005ad6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	899b      	ldrh	r3, [r3, #12]
 800821e:	461a      	mov	r2, r3
 8008220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008222:	fb02 f303 	mul.w	r3, r2, r3
 8008226:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008228:	e05c      	b.n	80082e4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	429a      	cmp	r2, r3
 8008232:	d02e      	beq.n	8008292 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	7d1b      	ldrb	r3, [r3, #20]
 8008238:	b25b      	sxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	da18      	bge.n	8008270 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	7858      	ldrb	r0, [r3, #1]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1a      	ldr	r2, [r3, #32]
 800824c:	2301      	movs	r3, #1
 800824e:	f7fd fb81 	bl	8005954 <disk_write>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <f_read+0x202>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	755a      	strb	r2, [r3, #21]
 800825e:	2301      	movs	r3, #1
 8008260:	e059      	b.n	8008316 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	7d1b      	ldrb	r3, [r3, #20]
 8008266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800826a:	b2da      	uxtb	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	7858      	ldrb	r0, [r3, #1]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800827a:	2301      	movs	r3, #1
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	f7fd fb49 	bl	8005914 <disk_read>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <f_read+0x232>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	755a      	strb	r2, [r3, #21]
 800828e:	2301      	movs	r3, #1
 8008290:	e041      	b.n	8008316 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	899b      	ldrh	r3, [r3, #12]
 800829c:	4618      	mov	r0, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	8992      	ldrh	r2, [r2, #12]
 80082a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80082aa:	fb01 f202 	mul.w	r2, r1, r2
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	1ac3      	subs	r3, r0, r3
 80082b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80082b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d901      	bls.n	80082c0 <f_read+0x260>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	8992      	ldrh	r2, [r2, #12]
 80082ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80082d2:	fb00 f202 	mul.w	r2, r0, r2
 80082d6:	1a9b      	subs	r3, r3, r2
 80082d8:	440b      	add	r3, r1
 80082da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082dc:	4619      	mov	r1, r3
 80082de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082e0:	f7fd fbf9 	bl	8005ad6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80082e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e8:	4413      	add	r3, r2
 80082ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	699a      	ldr	r2, [r3, #24]
 80082f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f2:	441a      	add	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	619a      	str	r2, [r3, #24]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fe:	441a      	add	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f47f aee1 	bne.w	80080d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3738      	adds	r7, #56	@ 0x38
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b08c      	sub	sp, #48	@ 0x30
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f107 0210 	add.w	r2, r7, #16
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff fc4a 	bl	8007bd8 <validate>
 8008344:	4603      	mov	r3, r0
 8008346:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800834a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800834e:	2b00      	cmp	r3, #0
 8008350:	d107      	bne.n	8008362 <f_write+0x44>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	7d5b      	ldrb	r3, [r3, #21]
 8008356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800835a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <f_write+0x4a>
 8008362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008366:	e16a      	b.n	800863e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	7d1b      	ldrb	r3, [r3, #20]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <f_write+0x5a>
 8008374:	2307      	movs	r3, #7
 8008376:	e162      	b.n	800863e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	699a      	ldr	r2, [r3, #24]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	441a      	add	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	429a      	cmp	r2, r3
 8008386:	f080 814c 	bcs.w	8008622 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	43db      	mvns	r3, r3
 8008390:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008392:	e146      	b.n	8008622 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	8992      	ldrh	r2, [r2, #12]
 800839c:	fbb3 f1f2 	udiv	r1, r3, r2
 80083a0:	fb01 f202 	mul.w	r2, r1, r2
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80f1 	bne.w	800858e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	8992      	ldrh	r2, [r2, #12]
 80083b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	8952      	ldrh	r2, [r2, #10]
 80083bc:	3a01      	subs	r2, #1
 80083be:	4013      	ands	r3, r2
 80083c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d143      	bne.n	8008450 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10c      	bne.n	80083ea <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80083d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d11a      	bne.n	8008412 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2100      	movs	r1, #0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe f8b6 	bl	8006552 <create_chain>
 80083e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80083e8:	e013      	b.n	8008412 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d007      	beq.n	8008402 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	4619      	mov	r1, r3
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f7fe f942 	bl	8006682 <clmt_clust>
 80083fe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008400:	e007      	b.n	8008412 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	4619      	mov	r1, r3
 800840a:	4610      	mov	r0, r2
 800840c:	f7fe f8a1 	bl	8006552 <create_chain>
 8008410:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 8109 	beq.w	800862c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800841a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841c:	2b01      	cmp	r3, #1
 800841e:	d104      	bne.n	800842a <f_write+0x10c>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2202      	movs	r2, #2
 8008424:	755a      	strb	r2, [r3, #21]
 8008426:	2302      	movs	r3, #2
 8008428:	e109      	b.n	800863e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d104      	bne.n	800843c <f_write+0x11e>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2201      	movs	r2, #1
 8008436:	755a      	strb	r2, [r3, #21]
 8008438:	2301      	movs	r3, #1
 800843a:	e100      	b.n	800863e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008440:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d102      	bne.n	8008450 <f_write+0x132>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800844e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	7d1b      	ldrb	r3, [r3, #20]
 8008454:	b25b      	sxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	da18      	bge.n	800848c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	7858      	ldrb	r0, [r3, #1]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	2301      	movs	r3, #1
 800846a:	f7fd fa73 	bl	8005954 <disk_write>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d004      	beq.n	800847e <f_write+0x160>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	755a      	strb	r2, [r3, #21]
 800847a:	2301      	movs	r3, #1
 800847c:	e0df      	b.n	800863e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	7d1b      	ldrb	r3, [r3, #20]
 8008482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008486:	b2da      	uxtb	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	4619      	mov	r1, r3
 8008494:	4610      	mov	r0, r2
 8008496:	f7fd fdeb 	bl	8006070 <clust2sect>
 800849a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <f_write+0x18e>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2202      	movs	r2, #2
 80084a6:	755a      	strb	r2, [r3, #21]
 80084a8:	2302      	movs	r3, #2
 80084aa:	e0c8      	b.n	800863e <f_write+0x320>
			sect += csect;
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	4413      	add	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	899b      	ldrh	r3, [r3, #12]
 80084b8:	461a      	mov	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d043      	beq.n	8008550 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	4413      	add	r3, r2
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	8952      	ldrh	r2, [r2, #10]
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d905      	bls.n	80084e2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	895b      	ldrh	r3, [r3, #10]
 80084da:	461a      	mov	r2, r3
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	7858      	ldrb	r0, [r3, #1]
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	69f9      	ldr	r1, [r7, #28]
 80084ec:	f7fd fa32 	bl	8005954 <disk_write>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <f_write+0x1e2>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	755a      	strb	r2, [r3, #21]
 80084fc:	2301      	movs	r3, #1
 80084fe:	e09e      	b.n	800863e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a1a      	ldr	r2, [r3, #32]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	6a3a      	ldr	r2, [r7, #32]
 800850a:	429a      	cmp	r2, r3
 800850c:	d918      	bls.n	8008540 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a1a      	ldr	r2, [r3, #32]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	8992      	ldrh	r2, [r2, #12]
 8008520:	fb02 f303 	mul.w	r3, r2, r3
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	18d1      	adds	r1, r2, r3
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	899b      	ldrh	r3, [r3, #12]
 800852c:	461a      	mov	r2, r3
 800852e:	f7fd fad2 	bl	8005ad6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	7d1b      	ldrb	r3, [r3, #20]
 8008536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800853a:	b2da      	uxtb	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	899b      	ldrh	r3, [r3, #12]
 8008544:	461a      	mov	r2, r3
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	fb02 f303 	mul.w	r3, r2, r3
 800854c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800854e:	e04b      	b.n	80085e8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	429a      	cmp	r2, r3
 8008558:	d016      	beq.n	8008588 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699a      	ldr	r2, [r3, #24]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008562:	429a      	cmp	r2, r3
 8008564:	d210      	bcs.n	8008588 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	7858      	ldrb	r0, [r3, #1]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008570:	2301      	movs	r3, #1
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	f7fd f9ce 	bl	8005914 <disk_read>
 8008578:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800857a:	2b00      	cmp	r3, #0
 800857c:	d004      	beq.n	8008588 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	755a      	strb	r2, [r3, #21]
 8008584:	2301      	movs	r3, #1
 8008586:	e05a      	b.n	800863e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	899b      	ldrh	r3, [r3, #12]
 8008592:	4618      	mov	r0, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	8992      	ldrh	r2, [r2, #12]
 800859c:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a0:	fb01 f202 	mul.w	r2, r1, r2
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	1ac3      	subs	r3, r0, r3
 80085a8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80085aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d901      	bls.n	80085b6 <f_write+0x298>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	8992      	ldrh	r2, [r2, #12]
 80085c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80085c8:	fb00 f202 	mul.w	r2, r0, r2
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	440b      	add	r3, r1
 80085d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d2:	69f9      	ldr	r1, [r7, #28]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fd fa7e 	bl	8005ad6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	7d1b      	ldrb	r3, [r3, #20]
 80085de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	4413      	add	r3, r2
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	699a      	ldr	r2, [r3, #24]
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f6:	441a      	add	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	619a      	str	r2, [r3, #24]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	429a      	cmp	r2, r3
 8008606:	bf38      	it	cc
 8008608:	461a      	movcc	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	441a      	add	r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f47f aeb5 	bne.w	8008394 <f_write+0x76>
 800862a:	e000      	b.n	800862e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800862c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	7d1b      	ldrb	r3, [r3, #20]
 8008632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008636:	b2da      	uxtb	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3730      	adds	r7, #48	@ 0x30
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b086      	sub	sp, #24
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f107 0208 	add.w	r2, r7, #8
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff fabe 	bl	8007bd8 <validate>
 800865c:	4603      	mov	r3, r0
 800865e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d168      	bne.n	8008738 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7d1b      	ldrb	r3, [r3, #20]
 800866a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d062      	beq.n	8008738 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7d1b      	ldrb	r3, [r3, #20]
 8008676:	b25b      	sxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	da15      	bge.n	80086a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	7858      	ldrb	r0, [r3, #1]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1a      	ldr	r2, [r3, #32]
 800868a:	2301      	movs	r3, #1
 800868c:	f7fd f962 	bl	8005954 <disk_write>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <f_sync+0x54>
 8008696:	2301      	movs	r3, #1
 8008698:	e04f      	b.n	800873a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7d1b      	ldrb	r3, [r3, #20]
 800869e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80086a8:	f7fc ff54 	bl	8005554 <get_fattime>
 80086ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f7fd fc3c 	bl	8005f34 <move_window>
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d138      	bne.n	8008738 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	330b      	adds	r3, #11
 80086d0:	781a      	ldrb	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	330b      	adds	r3, #11
 80086d6:	f042 0220 	orr.w	r2, r2, #32
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	461a      	mov	r2, r3
 80086e8:	68f9      	ldr	r1, [r7, #12]
 80086ea:	f7fe f9c7 	bl	8006a7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f103 021c 	add.w	r2, r3, #28
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	4619      	mov	r1, r3
 80086fa:	4610      	mov	r0, r2
 80086fc:	f7fd f9bf 	bl	8005a7e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3316      	adds	r3, #22
 8008704:	6939      	ldr	r1, [r7, #16]
 8008706:	4618      	mov	r0, r3
 8008708:	f7fd f9b9 	bl	8005a7e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3312      	adds	r3, #18
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f7fd f998 	bl	8005a48 <st_word>
					fs->wflag = 1;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2201      	movs	r2, #1
 800871c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd fc35 	bl	8005f90 <sync_fs>
 8008726:	4603      	mov	r3, r0
 8008728:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7d1b      	ldrb	r3, [r3, #20]
 800872e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008732:	b2da      	uxtb	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008738:	7dfb      	ldrb	r3, [r7, #23]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff ff7b 	bl	8008646 <f_sync>
 8008750:	4603      	mov	r3, r0
 8008752:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d118      	bne.n	800878c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f107 0208 	add.w	r2, r7, #8
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff fa38 	bl	8007bd8 <validate>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10c      	bne.n	800878c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	4618      	mov	r0, r3
 8008778:	f7fd fb38 	bl	8005dec <dec_lock>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d102      	bne.n	800878c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b090      	sub	sp, #64	@ 0x40
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f107 0208 	add.w	r2, r7, #8
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff fa15 	bl	8007bd8 <validate>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80087b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <f_lseek+0x2e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	7d5b      	ldrb	r3, [r3, #21]
 80087c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80087c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <f_lseek+0x3c>
 80087cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80087d0:	e201      	b.n	8008bd6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 80d9 	beq.w	800898e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e2:	d15a      	bne.n	800889a <f_lseek+0x104>
			tbl = fp->cltbl;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80087ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ec:	1d1a      	adds	r2, r3, #4
 80087ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	2302      	movs	r3, #2
 80087f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	2b00      	cmp	r3, #0
 8008802:	d03a      	beq.n	800887a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	613b      	str	r3, [r7, #16]
 8008808:	2300      	movs	r3, #0
 800880a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	3302      	adds	r3, #2
 8008810:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008818:	3301      	adds	r3, #1
 800881a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008820:	4618      	mov	r0, r3
 8008822:	f7fd fc44 	bl	80060ae <get_fat>
 8008826:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	2b01      	cmp	r3, #1
 800882c:	d804      	bhi.n	8008838 <f_lseek+0xa2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	755a      	strb	r2, [r3, #21]
 8008834:	2302      	movs	r3, #2
 8008836:	e1ce      	b.n	8008bd6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883e:	d104      	bne.n	800884a <f_lseek+0xb4>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	755a      	strb	r2, [r3, #21]
 8008846:	2301      	movs	r3, #1
 8008848:	e1c5      	b.n	8008bd6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008850:	429a      	cmp	r2, r3
 8008852:	d0de      	beq.n	8008812 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	429a      	cmp	r2, r3
 800885a:	d809      	bhi.n	8008870 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	627a      	str	r2, [r7, #36]	@ 0x24
 8008862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	1d1a      	adds	r2, r3, #4
 800886a:	627a      	str	r2, [r7, #36]	@ 0x24
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008876:	429a      	cmp	r2, r3
 8008878:	d3c4      	bcc.n	8008804 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008880:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	429a      	cmp	r2, r3
 8008888:	d803      	bhi.n	8008892 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	e19f      	b.n	8008bd2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008892:	2311      	movs	r3, #17
 8008894:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008898:	e19b      	b.n	8008bd2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d902      	bls.n	80088aa <f_lseek+0x114>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 818d 	beq.w	8008bd2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fd fedf 	bl	8006682 <clmt_clust>
 80088c4:	4602      	mov	r2, r0
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	4619      	mov	r1, r3
 80088d2:	4610      	mov	r0, r2
 80088d4:	f7fd fbcc 	bl	8006070 <clust2sect>
 80088d8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d104      	bne.n	80088ea <f_lseek+0x154>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	755a      	strb	r2, [r3, #21]
 80088e6:	2302      	movs	r3, #2
 80088e8:	e175      	b.n	8008bd6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	8992      	ldrh	r2, [r2, #12]
 80088f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	8952      	ldrh	r2, [r2, #10]
 80088fa:	3a01      	subs	r2, #1
 80088fc:	4013      	ands	r3, r2
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	4413      	add	r3, r2
 8008902:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	8992      	ldrh	r2, [r2, #12]
 800890c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008910:	fb01 f202 	mul.w	r2, r1, r2
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 815b 	beq.w	8008bd2 <f_lseek+0x43c>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	429a      	cmp	r2, r3
 8008924:	f000 8155 	beq.w	8008bd2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7d1b      	ldrb	r3, [r3, #20]
 800892c:	b25b      	sxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	da18      	bge.n	8008964 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	7858      	ldrb	r0, [r3, #1]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	2301      	movs	r3, #1
 8008942:	f7fd f807 	bl	8005954 <disk_write>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d004      	beq.n	8008956 <f_lseek+0x1c0>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	755a      	strb	r2, [r3, #21]
 8008952:	2301      	movs	r3, #1
 8008954:	e13f      	b.n	8008bd6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7d1b      	ldrb	r3, [r3, #20]
 800895a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800895e:	b2da      	uxtb	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	7858      	ldrb	r0, [r3, #1]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800896e:	2301      	movs	r3, #1
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	f7fc ffcf 	bl	8005914 <disk_read>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d004      	beq.n	8008986 <f_lseek+0x1f0>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	755a      	strb	r2, [r3, #21]
 8008982:	2301      	movs	r3, #1
 8008984:	e127      	b.n	8008bd6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	621a      	str	r2, [r3, #32]
 800898c:	e121      	b.n	8008bd2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d908      	bls.n	80089aa <f_lseek+0x214>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7d1b      	ldrb	r3, [r3, #20]
 800899c:	f003 0302 	and.w	r3, r3, #2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d102      	bne.n	80089aa <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089b8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 80b5 	beq.w	8008b2c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	895b      	ldrh	r3, [r3, #10]
 80089c6:	461a      	mov	r2, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	899b      	ldrh	r3, [r3, #12]
 80089cc:	fb02 f303 	mul.w	r3, r2, r3
 80089d0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01b      	beq.n	8008a10 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	1e5a      	subs	r2, r3, #1
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	fbb2 f2f3 	udiv	r2, r2, r3
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	1e59      	subs	r1, r3, #1
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d30f      	bcc.n	8008a10 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	1e5a      	subs	r2, r3, #1
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	425b      	negs	r3, r3
 80089f8:	401a      	ands	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a0e:	e022      	b.n	8008a56 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d119      	bne.n	8008a50 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2100      	movs	r1, #0
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fd fd96 	bl	8006552 <create_chain>
 8008a26:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d104      	bne.n	8008a38 <f_lseek+0x2a2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2202      	movs	r2, #2
 8008a32:	755a      	strb	r2, [r3, #21]
 8008a34:	2302      	movs	r3, #2
 8008a36:	e0ce      	b.n	8008bd6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d104      	bne.n	8008a4a <f_lseek+0x2b4>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	755a      	strb	r2, [r3, #21]
 8008a46:	2301      	movs	r3, #1
 8008a48:	e0c5      	b.n	8008bd6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a4e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a54:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d067      	beq.n	8008b2c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008a5c:	e03a      	b.n	8008ad4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	603b      	str	r3, [r7, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699a      	ldr	r2, [r3, #24]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	441a      	add	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	7d1b      	ldrb	r3, [r3, #20]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fd fd65 	bl	8006552 <create_chain>
 8008a88:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d108      	bne.n	8008aa2 <f_lseek+0x30c>
							ofs = 0; break;
 8008a90:	2300      	movs	r3, #0
 8008a92:	603b      	str	r3, [r7, #0]
 8008a94:	e022      	b.n	8008adc <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fd fb07 	bl	80060ae <get_fat>
 8008aa0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa8:	d104      	bne.n	8008ab4 <f_lseek+0x31e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	755a      	strb	r2, [r3, #21]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e090      	b.n	8008bd6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d904      	bls.n	8008ac4 <f_lseek+0x32e>
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d304      	bcc.n	8008ace <f_lseek+0x338>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	755a      	strb	r2, [r3, #21]
 8008aca:	2302      	movs	r3, #2
 8008acc:	e083      	b.n	8008bd6 <f_lseek+0x440>
					fp->clust = clst;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ad2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d8c0      	bhi.n	8008a5e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	699a      	ldr	r2, [r3, #24]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	441a      	add	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	899b      	ldrh	r3, [r3, #12]
 8008aec:	461a      	mov	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008af4:	fb01 f202 	mul.w	r2, r1, r2
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d016      	beq.n	8008b2c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fd fab4 	bl	8006070 <clust2sect>
 8008b08:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <f_lseek+0x384>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	755a      	strb	r2, [r3, #21]
 8008b16:	2302      	movs	r3, #2
 8008b18:	e05d      	b.n	8008bd6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	899b      	ldrh	r3, [r3, #12]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b28:	4413      	add	r3, r2
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699a      	ldr	r2, [r3, #24]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d90a      	bls.n	8008b4e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	7d1b      	ldrb	r3, [r3, #20]
 8008b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	8992      	ldrh	r2, [r2, #12]
 8008b56:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b5a:	fb01 f202 	mul.w	r2, r1, r2
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d036      	beq.n	8008bd2 <f_lseek+0x43c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d031      	beq.n	8008bd2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7d1b      	ldrb	r3, [r3, #20]
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	da18      	bge.n	8008baa <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	7858      	ldrb	r0, [r3, #1]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	2301      	movs	r3, #1
 8008b88:	f7fc fee4 	bl	8005954 <disk_write>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <f_lseek+0x406>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	755a      	strb	r2, [r3, #21]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e01c      	b.n	8008bd6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	7858      	ldrb	r0, [r3, #1]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bb8:	f7fc feac 	bl	8005914 <disk_read>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <f_lseek+0x436>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	755a      	strb	r2, [r3, #21]
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e004      	b.n	8008bd6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bd0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008bd2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3740      	adds	r7, #64	@ 0x40
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b092      	sub	sp, #72	@ 0x48
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008bea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008bee:	f107 030c 	add.w	r3, r7, #12
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fe fd69 	bl	80076cc <find_volume>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008c00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 8099 	bne.w	8008d3c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008c0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	3b02      	subs	r3, #2
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d804      	bhi.n	8008c28 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	e089      	b.n	8008d3c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d128      	bne.n	8008c86 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008c34:	2302      	movs	r3, #2
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fd fa33 	bl	80060ae <get_fat>
 8008c48:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c50:	d103      	bne.n	8008c5a <f_getfree+0x7c>
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008c58:	e063      	b.n	8008d22 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d103      	bne.n	8008c68 <f_getfree+0x8a>
 8008c60:	2302      	movs	r3, #2
 8008c62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008c66:	e05c      	b.n	8008d22 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <f_getfree+0x96>
 8008c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c70:	3301      	adds	r3, #1
 8008c72:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c76:	3301      	adds	r3, #1
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d3db      	bcc.n	8008c3c <f_getfree+0x5e>
 8008c84:	e04d      	b.n	8008d22 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c96:	2300      	movs	r3, #0
 8008c98:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d113      	bne.n	8008cc8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f7fd f943 	bl	8005f34 <move_window>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008cb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d131      	bne.n	8008d20 <f_getfree+0x142>
							p = fs->win;
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	3338      	adds	r3, #56	@ 0x38
 8008cc0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc4:	899b      	ldrh	r3, [r3, #12]
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d10f      	bne.n	8008cf0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cd2:	f7fc fe7d 	bl	80059d0 <ld_word>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d102      	bne.n	8008ce2 <f_getfree+0x104>
 8008cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cde:	3301      	adds	r3, #1
 8008ce0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cea:	3b02      	subs	r3, #2
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	e010      	b.n	8008d12 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cf2:	f7fc fe86 	bl	8005a02 <ld_dword>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <f_getfree+0x128>
 8008d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d02:	3301      	adds	r3, #1
 8008d04:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d08:	3304      	adds	r3, #4
 8008d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0e:	3b04      	subs	r3, #4
 8008d10:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d14:	3b01      	subs	r3, #1
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1bd      	bne.n	8008c9a <f_getfree+0xbc>
 8008d1e:	e000      	b.n	8008d22 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008d20:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d26:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d2c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	791a      	ldrb	r2, [r3, #4]
 8008d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d34:	f042 0201 	orr.w	r2, r2, #1
 8008d38:	b2d2      	uxtb	r2, r2
 8008d3a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008d3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3748      	adds	r7, #72	@ 0x48
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008d5c:	e01c      	b.n	8008d98 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008d5e:	f107 0310 	add.w	r3, r7, #16
 8008d62:	f107 0114 	add.w	r1, r7, #20
 8008d66:	2201      	movs	r2, #1
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff f979 	bl	8008060 <f_read>
		if (rc != 1) break;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d117      	bne.n	8008da4 <f_gets+0x5c>
		c = s[0];
 8008d74:	7d3b      	ldrb	r3, [r7, #20]
 8008d76:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	2b0d      	cmp	r3, #13
 8008d7c:	d00b      	beq.n	8008d96 <f_gets+0x4e>
		*p++ = c;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	61ba      	str	r2, [r7, #24]
 8008d84:	7dfa      	ldrb	r2, [r7, #23]
 8008d86:	701a      	strb	r2, [r3, #0]
		n++;
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b0a      	cmp	r3, #10
 8008d92:	d009      	beq.n	8008da8 <f_gets+0x60>
 8008d94:	e000      	b.n	8008d98 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008d96:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	dbdd      	blt.n	8008d5e <f_gets+0x16>
 8008da2:	e002      	b.n	8008daa <f_gets+0x62>
		if (rc != 1) break;
 8008da4:	bf00      	nop
 8008da6:	e000      	b.n	8008daa <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008da8:	bf00      	nop
	}
	*p = 0;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2200      	movs	r2, #0
 8008dae:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <f_gets+0x72>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	e000      	b.n	8008dbc <f_gets+0x74>
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	2b0a      	cmp	r3, #10
 8008dd4:	d103      	bne.n	8008dde <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008dd6:	210d      	movs	r1, #13
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fff3 	bl	8008dc4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	db25      	blt.n	8008e36 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	60fa      	str	r2, [r7, #12]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	78fa      	ldrb	r2, [r7, #3]
 8008df6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b3c      	cmp	r3, #60	@ 0x3c
 8008dfc:	dd12      	ble.n	8008e24 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f103 010c 	add.w	r1, r3, #12
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f107 0308 	add.w	r3, r7, #8
 8008e0e:	f7ff fa86 	bl	800831e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d101      	bne.n	8008e1e <putc_bfd+0x5a>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e001      	b.n	8008e22 <putc_bfd+0x5e>
 8008e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e22:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	609a      	str	r2, [r3, #8]
 8008e34:	e000      	b.n	8008e38 <putc_bfd+0x74>
	if (i < 0) return;
 8008e36:	bf00      	nop
}
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	db16      	blt.n	8008e7c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f103 010c 	add.w	r1, r3, #12
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f107 030c 	add.w	r3, r7, #12
 8008e62:	f7ff fa5c 	bl	800831e <f_write>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d107      	bne.n	8008e7c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d102      	bne.n	8008e7c <putc_flush+0x3e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	e001      	b.n	8008e80 <putc_flush+0x42>
	return EOF;
 8008e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	605a      	str	r2, [r3, #4]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	609a      	str	r2, [r3, #8]
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b096      	sub	sp, #88	@ 0x58
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008ebc:	f107 030c 	add.w	r3, r7, #12
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff ffe0 	bl	8008e88 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008ec8:	e009      	b.n	8008ede <f_puts+0x2c>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	f107 030c 	add.w	r3, r7, #12
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff ff73 	bl	8008dc4 <putc_bfd>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1f1      	bne.n	8008eca <f_puts+0x18>
	return putc_flush(&pb);
 8008ee6:	f107 030c 	add.w	r3, r7, #12
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff ffa7 	bl	8008e3e <putc_flush>
 8008ef0:	4603      	mov	r3, r0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3758      	adds	r7, #88	@ 0x58
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008f12:	4b1f      	ldr	r3, [pc, #124]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f14:	7a5b      	ldrb	r3, [r3, #9]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d131      	bne.n	8008f80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f1e:	7a5b      	ldrb	r3, [r3, #9]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	461a      	mov	r2, r3
 8008f24:	4b1a      	ldr	r3, [pc, #104]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f26:	2100      	movs	r1, #0
 8008f28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008f2a:	4b19      	ldr	r3, [pc, #100]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f2c:	7a5b      	ldrb	r3, [r3, #9]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	4a17      	ldr	r2, [pc, #92]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008f3a:	4b15      	ldr	r3, [pc, #84]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f3c:	7a5b      	ldrb	r3, [r3, #9]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	4b13      	ldr	r3, [pc, #76]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f44:	4413      	add	r3, r2
 8008f46:	79fa      	ldrb	r2, [r7, #7]
 8008f48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008f4a:	4b11      	ldr	r3, [pc, #68]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f4c:	7a5b      	ldrb	r3, [r3, #9]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	b2d1      	uxtb	r1, r2
 8008f54:	4a0e      	ldr	r2, [pc, #56]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f56:	7251      	strb	r1, [r2, #9]
 8008f58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008f5a:	7dbb      	ldrb	r3, [r7, #22]
 8008f5c:	3330      	adds	r3, #48	@ 0x30
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	3301      	adds	r3, #1
 8008f68:	223a      	movs	r2, #58	@ 0x3a
 8008f6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	3302      	adds	r3, #2
 8008f70:	222f      	movs	r2, #47	@ 0x2f
 8008f72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	3303      	adds	r3, #3
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	200004cc 	.word	0x200004cc

08008f94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff ffaa 	bl	8008efc <FATFS_LinkDriverEx>
 8008fa8:	4603      	mov	r3, r0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008fc0:	88fb      	ldrh	r3, [r7, #6]
 8008fc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fc4:	d802      	bhi.n	8008fcc <ff_convert+0x18>
		c = chr;
 8008fc6:	88fb      	ldrh	r3, [r7, #6]
 8008fc8:	81fb      	strh	r3, [r7, #14]
 8008fca:	e025      	b.n	8009018 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00b      	beq.n	8008fea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	2bff      	cmp	r3, #255	@ 0xff
 8008fd6:	d805      	bhi.n	8008fe4 <ff_convert+0x30>
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	3b80      	subs	r3, #128	@ 0x80
 8008fdc:	4a12      	ldr	r2, [pc, #72]	@ (8009028 <ff_convert+0x74>)
 8008fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe2:	e000      	b.n	8008fe6 <ff_convert+0x32>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	81fb      	strh	r3, [r7, #14]
 8008fe8:	e016      	b.n	8009018 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008fea:	2300      	movs	r3, #0
 8008fec:	81fb      	strh	r3, [r7, #14]
 8008fee:	e009      	b.n	8009004 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008ff0:	89fb      	ldrh	r3, [r7, #14]
 8008ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8009028 <ff_convert+0x74>)
 8008ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ff8:	88fa      	ldrh	r2, [r7, #6]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d006      	beq.n	800900c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008ffe:	89fb      	ldrh	r3, [r7, #14]
 8009000:	3301      	adds	r3, #1
 8009002:	81fb      	strh	r3, [r7, #14]
 8009004:	89fb      	ldrh	r3, [r7, #14]
 8009006:	2b7f      	cmp	r3, #127	@ 0x7f
 8009008:	d9f2      	bls.n	8008ff0 <ff_convert+0x3c>
 800900a:	e000      	b.n	800900e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800900c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800900e:	89fb      	ldrh	r3, [r7, #14]
 8009010:	3380      	adds	r3, #128	@ 0x80
 8009012:	b29b      	uxth	r3, r3
 8009014:	b2db      	uxtb	r3, r3
 8009016:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009018:	89fb      	ldrh	r3, [r7, #14]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	0800ac48 	.word	0x0800ac48

0800902c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800903c:	d201      	bcs.n	8009042 <ff_wtoupper+0x16>
 800903e:	4b3e      	ldr	r3, [pc, #248]	@ (8009138 <ff_wtoupper+0x10c>)
 8009040:	e000      	b.n	8009044 <ff_wtoupper+0x18>
 8009042:	4b3e      	ldr	r3, [pc, #248]	@ (800913c <ff_wtoupper+0x110>)
 8009044:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	1c9a      	adds	r2, r3, #2
 800904a:	617a      	str	r2, [r7, #20]
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009050:	8a7b      	ldrh	r3, [r7, #18]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d068      	beq.n	8009128 <ff_wtoupper+0xfc>
 8009056:	88fa      	ldrh	r2, [r7, #6]
 8009058:	8a7b      	ldrh	r3, [r7, #18]
 800905a:	429a      	cmp	r2, r3
 800905c:	d364      	bcc.n	8009128 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	1c9a      	adds	r2, r3, #2
 8009062:	617a      	str	r2, [r7, #20]
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	823b      	strh	r3, [r7, #16]
 8009068:	8a3b      	ldrh	r3, [r7, #16]
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	81fb      	strh	r3, [r7, #14]
 800906e:	8a3b      	ldrh	r3, [r7, #16]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009074:	88fa      	ldrh	r2, [r7, #6]
 8009076:	8a79      	ldrh	r1, [r7, #18]
 8009078:	8a3b      	ldrh	r3, [r7, #16]
 800907a:	440b      	add	r3, r1
 800907c:	429a      	cmp	r2, r3
 800907e:	da49      	bge.n	8009114 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009080:	89fb      	ldrh	r3, [r7, #14]
 8009082:	2b08      	cmp	r3, #8
 8009084:	d84f      	bhi.n	8009126 <ff_wtoupper+0xfa>
 8009086:	a201      	add	r2, pc, #4	@ (adr r2, 800908c <ff_wtoupper+0x60>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	080090b1 	.word	0x080090b1
 8009090:	080090c3 	.word	0x080090c3
 8009094:	080090d9 	.word	0x080090d9
 8009098:	080090e1 	.word	0x080090e1
 800909c:	080090e9 	.word	0x080090e9
 80090a0:	080090f1 	.word	0x080090f1
 80090a4:	080090f9 	.word	0x080090f9
 80090a8:	08009101 	.word	0x08009101
 80090ac:	08009109 	.word	0x08009109
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80090b0:	88fa      	ldrh	r2, [r7, #6]
 80090b2:	8a7b      	ldrh	r3, [r7, #18]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4413      	add	r3, r2
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	80fb      	strh	r3, [r7, #6]
 80090c0:	e027      	b.n	8009112 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	8a7b      	ldrh	r3, [r7, #18]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	88fa      	ldrh	r2, [r7, #6]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	80fb      	strh	r3, [r7, #6]
 80090d6:	e01c      	b.n	8009112 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80090d8:	88fb      	ldrh	r3, [r7, #6]
 80090da:	3b10      	subs	r3, #16
 80090dc:	80fb      	strh	r3, [r7, #6]
 80090de:	e018      	b.n	8009112 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	3b20      	subs	r3, #32
 80090e4:	80fb      	strh	r3, [r7, #6]
 80090e6:	e014      	b.n	8009112 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	3b30      	subs	r3, #48	@ 0x30
 80090ec:	80fb      	strh	r3, [r7, #6]
 80090ee:	e010      	b.n	8009112 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80090f0:	88fb      	ldrh	r3, [r7, #6]
 80090f2:	3b1a      	subs	r3, #26
 80090f4:	80fb      	strh	r3, [r7, #6]
 80090f6:	e00c      	b.n	8009112 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	3308      	adds	r3, #8
 80090fc:	80fb      	strh	r3, [r7, #6]
 80090fe:	e008      	b.n	8009112 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	3b50      	subs	r3, #80	@ 0x50
 8009104:	80fb      	strh	r3, [r7, #6]
 8009106:	e004      	b.n	8009112 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800910e:	80fb      	strh	r3, [r7, #6]
 8009110:	bf00      	nop
			}
			break;
 8009112:	e008      	b.n	8009126 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009114:	89fb      	ldrh	r3, [r7, #14]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d195      	bne.n	8009046 <ff_wtoupper+0x1a>
 800911a:	8a3b      	ldrh	r3, [r7, #16]
 800911c:	005b      	lsls	r3, r3, #1
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4413      	add	r3, r2
 8009122:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009124:	e78f      	b.n	8009046 <ff_wtoupper+0x1a>
			break;
 8009126:	bf00      	nop
	}

	return chr;
 8009128:	88fb      	ldrh	r3, [r7, #6]
}
 800912a:	4618      	mov	r0, r3
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	0800ad48 	.word	0x0800ad48
 800913c:	0800af3c 	.word	0x0800af3c

08009140 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8009146:	4b26      	ldr	r3, [pc, #152]	@ (80091e0 <_DoInit+0xa0>)
 8009148:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800914a:	22a8      	movs	r2, #168	@ 0xa8
 800914c:	2100      	movs	r1, #0
 800914e:	6838      	ldr	r0, [r7, #0]
 8009150:	f000 fbe8 	bl	8009924 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2203      	movs	r2, #3
 8009158:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2203      	movs	r2, #3
 800915e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	4a20      	ldr	r2, [pc, #128]	@ (80091e4 <_DoInit+0xa4>)
 8009164:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	4a1f      	ldr	r2, [pc, #124]	@ (80091e8 <_DoInit+0xa8>)
 800916a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009172:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2200      	movs	r2, #0
 8009178:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2200      	movs	r2, #0
 800917e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2200      	movs	r2, #0
 8009184:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	4a16      	ldr	r2, [pc, #88]	@ (80091e4 <_DoInit+0xa4>)
 800918a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	4a17      	ldr	r2, [pc, #92]	@ (80091ec <_DoInit+0xac>)
 8009190:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2210      	movs	r2, #16
 8009196:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2200      	movs	r2, #0
 800919c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2200      	movs	r2, #0
 80091a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2200      	movs	r2, #0
 80091a8:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80091aa:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80091ae:	2300      	movs	r3, #0
 80091b0:	607b      	str	r3, [r7, #4]
 80091b2:	e00c      	b.n	80091ce <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f1c3 030f 	rsb	r3, r3, #15
 80091ba:	4a0d      	ldr	r2, [pc, #52]	@ (80091f0 <_DoInit+0xb0>)
 80091bc:	5cd1      	ldrb	r1, [r2, r3]
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4413      	add	r3, r2
 80091c4:	460a      	mov	r2, r1
 80091c6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3301      	adds	r3, #1
 80091cc:	607b      	str	r3, [r7, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b0f      	cmp	r3, #15
 80091d2:	d9ef      	bls.n	80091b4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80091d4:	f3bf 8f5f 	dmb	sy
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	200004d8 	.word	0x200004d8
 80091e4:	0800ab80 	.word	0x0800ab80
 80091e8:	20000580 	.word	0x20000580
 80091ec:	20000980 	.word	0x20000980
 80091f0:	0800aff8 	.word	0x0800aff8

080091f4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	@ 0x28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8009200:	2300      	movs	r3, #0
 8009202:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	429a      	cmp	r2, r3
 8009216:	d905      	bls.n	8009224 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	627b      	str	r3, [r7, #36]	@ 0x24
 8009222:	e007      	b.n	8009234 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	69b9      	ldr	r1, [r7, #24]
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	1acb      	subs	r3, r1, r3
 800922e:	4413      	add	r3, r2
 8009230:	3b01      	subs	r3, #1
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	689a      	ldr	r2, [r3, #8]
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923e:	4293      	cmp	r3, r2
 8009240:	bf28      	it	cs
 8009242:	4613      	movcs	r3, r2
 8009244:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8009246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4293      	cmp	r3, r2
 800924c:	bf28      	it	cs
 800924e:	4613      	movcs	r3, r2
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800925c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	6978      	ldr	r0, [r7, #20]
 8009262:	f000 fbda 	bl	8009a1a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8009266:	6a3a      	ldr	r2, [r7, #32]
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	4413      	add	r3, r2
 800926c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	4413      	add	r3, r2
 8009274:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	4413      	add	r3, r2
 8009284:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	429a      	cmp	r2, r3
 800928e:	d101      	bne.n	8009294 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009294:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1b2      	bne.n	800920a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80092a4:	6a3b      	ldr	r3, [r7, #32]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3728      	adds	r7, #40	@ 0x28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b088      	sub	sp, #32
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d911      	bls.n	80092f6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	4413      	add	r3, r2
 80092da:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	6938      	ldr	r0, [r7, #16]
 80092e2:	f000 fb9a 	bl	8009a1a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80092e6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	441a      	add	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80092f4:	e01f      	b.n	8009336 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	4413      	add	r3, r2
 8009302:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	6938      	ldr	r0, [r7, #16]
 800930a:	f000 fb86 	bl	8009a1a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	4413      	add	r3, r2
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4619      	mov	r1, r3
 8009326:	6938      	ldr	r0, [r7, #16]
 8009328:	f000 fb77 	bl	8009a1a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800932c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	60da      	str	r2, [r3, #12]
}
 8009336:	bf00      	nop
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800933e:	b480      	push	{r7}
 8009340:	b087      	sub	sp, #28
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	429a      	cmp	r2, r3
 8009358:	d808      	bhi.n	800936c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1ad2      	subs	r2, r2, r3
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	4413      	add	r3, r2
 8009366:	3b01      	subs	r3, #1
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	e004      	b.n	8009376 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	3b01      	subs	r3, #1
 8009374:	617b      	str	r3, [r7, #20]
  }
  return r;
 8009376:	697b      	ldr	r3, [r7, #20]
}
 8009378:	4618      	mov	r0, r3
 800937a:	371c      	adds	r7, #28
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	4613      	mov	r3, r2
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	4413      	add	r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009420 <SEGGER_RTT_WriteNoLock+0x9c>)
 80093a2:	4413      	add	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d029      	beq.n	8009402 <SEGGER_RTT_WriteNoLock+0x7e>
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d82e      	bhi.n	8009410 <SEGGER_RTT_WriteNoLock+0x8c>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <SEGGER_RTT_WriteNoLock+0x38>
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d013      	beq.n	80093e2 <SEGGER_RTT_WriteNoLock+0x5e>
 80093ba:	e029      	b.n	8009410 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80093bc:	6978      	ldr	r0, [r7, #20]
 80093be:	f7ff ffbe 	bl	800933e <_GetAvailWriteSpace>
 80093c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d202      	bcs.n	80093d2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80093d0:	e021      	b.n	8009416 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	69b9      	ldr	r1, [r7, #24]
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7ff ff67 	bl	80092ae <_WriteNoCheck>
    break;
 80093e0:	e019      	b.n	8009416 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80093e2:	6978      	ldr	r0, [r7, #20]
 80093e4:	f7ff ffab 	bl	800933e <_GetAvailWriteSpace>
 80093e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	4293      	cmp	r3, r2
 80093f0:	bf28      	it	cs
 80093f2:	4613      	movcs	r3, r2
 80093f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	69b9      	ldr	r1, [r7, #24]
 80093fa:	6978      	ldr	r0, [r7, #20]
 80093fc:	f7ff ff57 	bl	80092ae <_WriteNoCheck>
    break;
 8009400:	e009      	b.n	8009416 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	69b9      	ldr	r1, [r7, #24]
 8009406:	6978      	ldr	r0, [r7, #20]
 8009408:	f7ff fef4 	bl	80091f4 <_WriteBlocking>
 800940c:	61f8      	str	r0, [r7, #28]
    break;
 800940e:	e002      	b.n	8009416 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009410:	2300      	movs	r3, #0
 8009412:	61fb      	str	r3, [r7, #28]
    break;
 8009414:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009416:	69fb      	ldr	r3, [r7, #28]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	200004d8 	.word	0x200004d8

08009424 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009430:	4b0e      	ldr	r3, [pc, #56]	@ (800946c <SEGGER_RTT_Write+0x48>)
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b53      	cmp	r3, #83	@ 0x53
 800943c:	d001      	beq.n	8009442 <SEGGER_RTT_Write+0x1e>
 800943e:	f7ff fe7f 	bl	8009140 <_DoInit>
  SEGGER_RTT_LOCK();
 8009442:	f3ef 8311 	mrs	r3, BASEPRI
 8009446:	f04f 0120 	mov.w	r1, #32
 800944a:	f381 8811 	msr	BASEPRI, r1
 800944e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	68b9      	ldr	r1, [r7, #8]
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7ff ff95 	bl	8009384 <SEGGER_RTT_WriteNoLock>
 800945a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009462:	697b      	ldr	r3, [r7, #20]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3720      	adds	r7, #32
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	200004d8 	.word	0x200004d8

08009470 <ha_hal_hardware_delay>:
#include "ha_hal_delay.h"

void ha_hal_hardware_delay(uint8_t _ms)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(_ms);
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	4618      	mov	r0, r3
 800947e:	f7f8 f9e9 	bl	8001854 <HAL_Delay>
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <ha_hal_gpio_set_level>:
#include "ha_hal_gpio.h"

uint8_t ha_hal_gpio_set_level(GPIO_TypeDef *_gpio_type, uint16_t _gpio_number, GPIO_PinState _gpio_level)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	807b      	strh	r3, [r7, #2]
 8009496:	4613      	mov	r3, r2
 8009498:	707b      	strb	r3, [r7, #1]
    if (_gpio_type == NULL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <ha_hal_gpio_set_level+0x1a>
    {
        return 0; // Error: GPIO type is NULL
 80094a0:	2300      	movs	r3, #0
 80094a2:	e00e      	b.n	80094c2 <ha_hal_gpio_set_level+0x38>
    }
    if (_gpio_level != GPIO_PIN_SET && _gpio_level != GPIO_PIN_RESET)
 80094a4:	787b      	ldrb	r3, [r7, #1]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d004      	beq.n	80094b4 <ha_hal_gpio_set_level+0x2a>
 80094aa:	787b      	ldrb	r3, [r7, #1]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <ha_hal_gpio_set_level+0x2a>
    {
        return 0; // Error: Invalid GPIO level
 80094b0:	2300      	movs	r3, #0
 80094b2:	e006      	b.n	80094c2 <ha_hal_gpio_set_level+0x38>
    }
    HAL_GPIO_WritePin(_gpio_type, _gpio_number, _gpio_level);
 80094b4:	787a      	ldrb	r2, [r7, #1]
 80094b6:	887b      	ldrh	r3, [r7, #2]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7f8 fd2e 	bl	8001f1c <HAL_GPIO_WritePin>
    return 1; // Success
 80094c0:	2301      	movs	r3, #1
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <std>:
 80094cc:	2300      	movs	r3, #0
 80094ce:	b510      	push	{r4, lr}
 80094d0:	4604      	mov	r4, r0
 80094d2:	e9c0 3300 	strd	r3, r3, [r0]
 80094d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094da:	6083      	str	r3, [r0, #8]
 80094dc:	8181      	strh	r1, [r0, #12]
 80094de:	6643      	str	r3, [r0, #100]	@ 0x64
 80094e0:	81c2      	strh	r2, [r0, #14]
 80094e2:	6183      	str	r3, [r0, #24]
 80094e4:	4619      	mov	r1, r3
 80094e6:	2208      	movs	r2, #8
 80094e8:	305c      	adds	r0, #92	@ 0x5c
 80094ea:	f000 fa1b 	bl	8009924 <memset>
 80094ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009524 <std+0x58>)
 80094f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80094f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009528 <std+0x5c>)
 80094f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094f6:	4b0d      	ldr	r3, [pc, #52]	@ (800952c <std+0x60>)
 80094f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009530 <std+0x64>)
 80094fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80094fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009534 <std+0x68>)
 8009500:	6224      	str	r4, [r4, #32]
 8009502:	429c      	cmp	r4, r3
 8009504:	d006      	beq.n	8009514 <std+0x48>
 8009506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800950a:	4294      	cmp	r4, r2
 800950c:	d002      	beq.n	8009514 <std+0x48>
 800950e:	33d0      	adds	r3, #208	@ 0xd0
 8009510:	429c      	cmp	r4, r3
 8009512:	d105      	bne.n	8009520 <std+0x54>
 8009514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951c:	f000 ba7a 	b.w	8009a14 <__retarget_lock_init_recursive>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	bf00      	nop
 8009524:	08009775 	.word	0x08009775
 8009528:	08009797 	.word	0x08009797
 800952c:	080097cf 	.word	0x080097cf
 8009530:	080097f3 	.word	0x080097f3
 8009534:	20000990 	.word	0x20000990

08009538 <stdio_exit_handler>:
 8009538:	4a02      	ldr	r2, [pc, #8]	@ (8009544 <stdio_exit_handler+0xc>)
 800953a:	4903      	ldr	r1, [pc, #12]	@ (8009548 <stdio_exit_handler+0x10>)
 800953c:	4803      	ldr	r0, [pc, #12]	@ (800954c <stdio_exit_handler+0x14>)
 800953e:	f000 b869 	b.w	8009614 <_fwalk_sglue>
 8009542:	bf00      	nop
 8009544:	2000000c 	.word	0x2000000c
 8009548:	0800a57d 	.word	0x0800a57d
 800954c:	2000001c 	.word	0x2000001c

08009550 <cleanup_stdio>:
 8009550:	6841      	ldr	r1, [r0, #4]
 8009552:	4b0c      	ldr	r3, [pc, #48]	@ (8009584 <cleanup_stdio+0x34>)
 8009554:	4299      	cmp	r1, r3
 8009556:	b510      	push	{r4, lr}
 8009558:	4604      	mov	r4, r0
 800955a:	d001      	beq.n	8009560 <cleanup_stdio+0x10>
 800955c:	f001 f80e 	bl	800a57c <_fflush_r>
 8009560:	68a1      	ldr	r1, [r4, #8]
 8009562:	4b09      	ldr	r3, [pc, #36]	@ (8009588 <cleanup_stdio+0x38>)
 8009564:	4299      	cmp	r1, r3
 8009566:	d002      	beq.n	800956e <cleanup_stdio+0x1e>
 8009568:	4620      	mov	r0, r4
 800956a:	f001 f807 	bl	800a57c <_fflush_r>
 800956e:	68e1      	ldr	r1, [r4, #12]
 8009570:	4b06      	ldr	r3, [pc, #24]	@ (800958c <cleanup_stdio+0x3c>)
 8009572:	4299      	cmp	r1, r3
 8009574:	d004      	beq.n	8009580 <cleanup_stdio+0x30>
 8009576:	4620      	mov	r0, r4
 8009578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800957c:	f000 bffe 	b.w	800a57c <_fflush_r>
 8009580:	bd10      	pop	{r4, pc}
 8009582:	bf00      	nop
 8009584:	20000990 	.word	0x20000990
 8009588:	200009f8 	.word	0x200009f8
 800958c:	20000a60 	.word	0x20000a60

08009590 <global_stdio_init.part.0>:
 8009590:	b510      	push	{r4, lr}
 8009592:	4b0b      	ldr	r3, [pc, #44]	@ (80095c0 <global_stdio_init.part.0+0x30>)
 8009594:	4c0b      	ldr	r4, [pc, #44]	@ (80095c4 <global_stdio_init.part.0+0x34>)
 8009596:	4a0c      	ldr	r2, [pc, #48]	@ (80095c8 <global_stdio_init.part.0+0x38>)
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	4620      	mov	r0, r4
 800959c:	2200      	movs	r2, #0
 800959e:	2104      	movs	r1, #4
 80095a0:	f7ff ff94 	bl	80094cc <std>
 80095a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095a8:	2201      	movs	r2, #1
 80095aa:	2109      	movs	r1, #9
 80095ac:	f7ff ff8e 	bl	80094cc <std>
 80095b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095b4:	2202      	movs	r2, #2
 80095b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ba:	2112      	movs	r1, #18
 80095bc:	f7ff bf86 	b.w	80094cc <std>
 80095c0:	20000ac8 	.word	0x20000ac8
 80095c4:	20000990 	.word	0x20000990
 80095c8:	08009539 	.word	0x08009539

080095cc <__sfp_lock_acquire>:
 80095cc:	4801      	ldr	r0, [pc, #4]	@ (80095d4 <__sfp_lock_acquire+0x8>)
 80095ce:	f000 ba22 	b.w	8009a16 <__retarget_lock_acquire_recursive>
 80095d2:	bf00      	nop
 80095d4:	20000ad1 	.word	0x20000ad1

080095d8 <__sfp_lock_release>:
 80095d8:	4801      	ldr	r0, [pc, #4]	@ (80095e0 <__sfp_lock_release+0x8>)
 80095da:	f000 ba1d 	b.w	8009a18 <__retarget_lock_release_recursive>
 80095de:	bf00      	nop
 80095e0:	20000ad1 	.word	0x20000ad1

080095e4 <__sinit>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	4604      	mov	r4, r0
 80095e8:	f7ff fff0 	bl	80095cc <__sfp_lock_acquire>
 80095ec:	6a23      	ldr	r3, [r4, #32]
 80095ee:	b11b      	cbz	r3, 80095f8 <__sinit+0x14>
 80095f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f4:	f7ff bff0 	b.w	80095d8 <__sfp_lock_release>
 80095f8:	4b04      	ldr	r3, [pc, #16]	@ (800960c <__sinit+0x28>)
 80095fa:	6223      	str	r3, [r4, #32]
 80095fc:	4b04      	ldr	r3, [pc, #16]	@ (8009610 <__sinit+0x2c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1f5      	bne.n	80095f0 <__sinit+0xc>
 8009604:	f7ff ffc4 	bl	8009590 <global_stdio_init.part.0>
 8009608:	e7f2      	b.n	80095f0 <__sinit+0xc>
 800960a:	bf00      	nop
 800960c:	08009551 	.word	0x08009551
 8009610:	20000ac8 	.word	0x20000ac8

08009614 <_fwalk_sglue>:
 8009614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009618:	4607      	mov	r7, r0
 800961a:	4688      	mov	r8, r1
 800961c:	4614      	mov	r4, r2
 800961e:	2600      	movs	r6, #0
 8009620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009624:	f1b9 0901 	subs.w	r9, r9, #1
 8009628:	d505      	bpl.n	8009636 <_fwalk_sglue+0x22>
 800962a:	6824      	ldr	r4, [r4, #0]
 800962c:	2c00      	cmp	r4, #0
 800962e:	d1f7      	bne.n	8009620 <_fwalk_sglue+0xc>
 8009630:	4630      	mov	r0, r6
 8009632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d907      	bls.n	800964c <_fwalk_sglue+0x38>
 800963c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009640:	3301      	adds	r3, #1
 8009642:	d003      	beq.n	800964c <_fwalk_sglue+0x38>
 8009644:	4629      	mov	r1, r5
 8009646:	4638      	mov	r0, r7
 8009648:	47c0      	blx	r8
 800964a:	4306      	orrs	r6, r0
 800964c:	3568      	adds	r5, #104	@ 0x68
 800964e:	e7e9      	b.n	8009624 <_fwalk_sglue+0x10>

08009650 <iprintf>:
 8009650:	b40f      	push	{r0, r1, r2, r3}
 8009652:	b507      	push	{r0, r1, r2, lr}
 8009654:	4906      	ldr	r1, [pc, #24]	@ (8009670 <iprintf+0x20>)
 8009656:	ab04      	add	r3, sp, #16
 8009658:	6808      	ldr	r0, [r1, #0]
 800965a:	f853 2b04 	ldr.w	r2, [r3], #4
 800965e:	6881      	ldr	r1, [r0, #8]
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	f000 fc63 	bl	8009f2c <_vfiprintf_r>
 8009666:	b003      	add	sp, #12
 8009668:	f85d eb04 	ldr.w	lr, [sp], #4
 800966c:	b004      	add	sp, #16
 800966e:	4770      	bx	lr
 8009670:	20000018 	.word	0x20000018

08009674 <_puts_r>:
 8009674:	6a03      	ldr	r3, [r0, #32]
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	6884      	ldr	r4, [r0, #8]
 800967a:	4605      	mov	r5, r0
 800967c:	460e      	mov	r6, r1
 800967e:	b90b      	cbnz	r3, 8009684 <_puts_r+0x10>
 8009680:	f7ff ffb0 	bl	80095e4 <__sinit>
 8009684:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009686:	07db      	lsls	r3, r3, #31
 8009688:	d405      	bmi.n	8009696 <_puts_r+0x22>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	0598      	lsls	r0, r3, #22
 800968e:	d402      	bmi.n	8009696 <_puts_r+0x22>
 8009690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009692:	f000 f9c0 	bl	8009a16 <__retarget_lock_acquire_recursive>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	0719      	lsls	r1, r3, #28
 800969a:	d502      	bpl.n	80096a2 <_puts_r+0x2e>
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d135      	bne.n	800970e <_puts_r+0x9a>
 80096a2:	4621      	mov	r1, r4
 80096a4:	4628      	mov	r0, r5
 80096a6:	f000 f8e7 	bl	8009878 <__swsetup_r>
 80096aa:	b380      	cbz	r0, 800970e <_puts_r+0x9a>
 80096ac:	f04f 35ff 	mov.w	r5, #4294967295
 80096b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096b2:	07da      	lsls	r2, r3, #31
 80096b4:	d405      	bmi.n	80096c2 <_puts_r+0x4e>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	059b      	lsls	r3, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_puts_r+0x4e>
 80096bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096be:	f000 f9ab 	bl	8009a18 <__retarget_lock_release_recursive>
 80096c2:	4628      	mov	r0, r5
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	da04      	bge.n	80096d4 <_puts_r+0x60>
 80096ca:	69a2      	ldr	r2, [r4, #24]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	dc17      	bgt.n	8009700 <_puts_r+0x8c>
 80096d0:	290a      	cmp	r1, #10
 80096d2:	d015      	beq.n	8009700 <_puts_r+0x8c>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	6022      	str	r2, [r4, #0]
 80096da:	7019      	strb	r1, [r3, #0]
 80096dc:	68a3      	ldr	r3, [r4, #8]
 80096de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096e2:	3b01      	subs	r3, #1
 80096e4:	60a3      	str	r3, [r4, #8]
 80096e6:	2900      	cmp	r1, #0
 80096e8:	d1ed      	bne.n	80096c6 <_puts_r+0x52>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	da11      	bge.n	8009712 <_puts_r+0x9e>
 80096ee:	4622      	mov	r2, r4
 80096f0:	210a      	movs	r1, #10
 80096f2:	4628      	mov	r0, r5
 80096f4:	f000 f881 	bl	80097fa <__swbuf_r>
 80096f8:	3001      	adds	r0, #1
 80096fa:	d0d7      	beq.n	80096ac <_puts_r+0x38>
 80096fc:	250a      	movs	r5, #10
 80096fe:	e7d7      	b.n	80096b0 <_puts_r+0x3c>
 8009700:	4622      	mov	r2, r4
 8009702:	4628      	mov	r0, r5
 8009704:	f000 f879 	bl	80097fa <__swbuf_r>
 8009708:	3001      	adds	r0, #1
 800970a:	d1e7      	bne.n	80096dc <_puts_r+0x68>
 800970c:	e7ce      	b.n	80096ac <_puts_r+0x38>
 800970e:	3e01      	subs	r6, #1
 8009710:	e7e4      	b.n	80096dc <_puts_r+0x68>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	6022      	str	r2, [r4, #0]
 8009718:	220a      	movs	r2, #10
 800971a:	701a      	strb	r2, [r3, #0]
 800971c:	e7ee      	b.n	80096fc <_puts_r+0x88>
	...

08009720 <puts>:
 8009720:	4b02      	ldr	r3, [pc, #8]	@ (800972c <puts+0xc>)
 8009722:	4601      	mov	r1, r0
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	f7ff bfa5 	b.w	8009674 <_puts_r>
 800972a:	bf00      	nop
 800972c:	20000018 	.word	0x20000018

08009730 <siprintf>:
 8009730:	b40e      	push	{r1, r2, r3}
 8009732:	b510      	push	{r4, lr}
 8009734:	b09d      	sub	sp, #116	@ 0x74
 8009736:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009738:	9002      	str	r0, [sp, #8]
 800973a:	9006      	str	r0, [sp, #24]
 800973c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009740:	480a      	ldr	r0, [pc, #40]	@ (800976c <siprintf+0x3c>)
 8009742:	9107      	str	r1, [sp, #28]
 8009744:	9104      	str	r1, [sp, #16]
 8009746:	490a      	ldr	r1, [pc, #40]	@ (8009770 <siprintf+0x40>)
 8009748:	f853 2b04 	ldr.w	r2, [r3], #4
 800974c:	9105      	str	r1, [sp, #20]
 800974e:	2400      	movs	r4, #0
 8009750:	a902      	add	r1, sp, #8
 8009752:	6800      	ldr	r0, [r0, #0]
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009758:	f000 fac2 	bl	8009ce0 <_svfiprintf_r>
 800975c:	9b02      	ldr	r3, [sp, #8]
 800975e:	701c      	strb	r4, [r3, #0]
 8009760:	b01d      	add	sp, #116	@ 0x74
 8009762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009766:	b003      	add	sp, #12
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	20000018 	.word	0x20000018
 8009770:	ffff0208 	.word	0xffff0208

08009774 <__sread>:
 8009774:	b510      	push	{r4, lr}
 8009776:	460c      	mov	r4, r1
 8009778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977c:	f000 f8fc 	bl	8009978 <_read_r>
 8009780:	2800      	cmp	r0, #0
 8009782:	bfab      	itete	ge
 8009784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009786:	89a3      	ldrhlt	r3, [r4, #12]
 8009788:	181b      	addge	r3, r3, r0
 800978a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800978e:	bfac      	ite	ge
 8009790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009792:	81a3      	strhlt	r3, [r4, #12]
 8009794:	bd10      	pop	{r4, pc}

08009796 <__swrite>:
 8009796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	461f      	mov	r7, r3
 800979c:	898b      	ldrh	r3, [r1, #12]
 800979e:	05db      	lsls	r3, r3, #23
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4616      	mov	r6, r2
 80097a6:	d505      	bpl.n	80097b4 <__swrite+0x1e>
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	2302      	movs	r3, #2
 80097ae:	2200      	movs	r2, #0
 80097b0:	f000 f8d0 	bl	8009954 <_lseek_r>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	4628      	mov	r0, r5
 80097c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	f000 b8e7 	b.w	800999c <_write_r>

080097ce <__sseek>:
 80097ce:	b510      	push	{r4, lr}
 80097d0:	460c      	mov	r4, r1
 80097d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d6:	f000 f8bd 	bl	8009954 <_lseek_r>
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	bf15      	itete	ne
 80097e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097ea:	81a3      	strheq	r3, [r4, #12]
 80097ec:	bf18      	it	ne
 80097ee:	81a3      	strhne	r3, [r4, #12]
 80097f0:	bd10      	pop	{r4, pc}

080097f2 <__sclose>:
 80097f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f6:	f000 b89d 	b.w	8009934 <_close_r>

080097fa <__swbuf_r>:
 80097fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fc:	460e      	mov	r6, r1
 80097fe:	4614      	mov	r4, r2
 8009800:	4605      	mov	r5, r0
 8009802:	b118      	cbz	r0, 800980c <__swbuf_r+0x12>
 8009804:	6a03      	ldr	r3, [r0, #32]
 8009806:	b90b      	cbnz	r3, 800980c <__swbuf_r+0x12>
 8009808:	f7ff feec 	bl	80095e4 <__sinit>
 800980c:	69a3      	ldr	r3, [r4, #24]
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	071a      	lsls	r2, r3, #28
 8009814:	d501      	bpl.n	800981a <__swbuf_r+0x20>
 8009816:	6923      	ldr	r3, [r4, #16]
 8009818:	b943      	cbnz	r3, 800982c <__swbuf_r+0x32>
 800981a:	4621      	mov	r1, r4
 800981c:	4628      	mov	r0, r5
 800981e:	f000 f82b 	bl	8009878 <__swsetup_r>
 8009822:	b118      	cbz	r0, 800982c <__swbuf_r+0x32>
 8009824:	f04f 37ff 	mov.w	r7, #4294967295
 8009828:	4638      	mov	r0, r7
 800982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	6922      	ldr	r2, [r4, #16]
 8009830:	1a98      	subs	r0, r3, r2
 8009832:	6963      	ldr	r3, [r4, #20]
 8009834:	b2f6      	uxtb	r6, r6
 8009836:	4283      	cmp	r3, r0
 8009838:	4637      	mov	r7, r6
 800983a:	dc05      	bgt.n	8009848 <__swbuf_r+0x4e>
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 fe9c 	bl	800a57c <_fflush_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	d1ed      	bne.n	8009824 <__swbuf_r+0x2a>
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	701e      	strb	r6, [r3, #0]
 8009856:	6962      	ldr	r2, [r4, #20]
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	429a      	cmp	r2, r3
 800985c:	d004      	beq.n	8009868 <__swbuf_r+0x6e>
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	07db      	lsls	r3, r3, #31
 8009862:	d5e1      	bpl.n	8009828 <__swbuf_r+0x2e>
 8009864:	2e0a      	cmp	r6, #10
 8009866:	d1df      	bne.n	8009828 <__swbuf_r+0x2e>
 8009868:	4621      	mov	r1, r4
 800986a:	4628      	mov	r0, r5
 800986c:	f000 fe86 	bl	800a57c <_fflush_r>
 8009870:	2800      	cmp	r0, #0
 8009872:	d0d9      	beq.n	8009828 <__swbuf_r+0x2e>
 8009874:	e7d6      	b.n	8009824 <__swbuf_r+0x2a>
	...

08009878 <__swsetup_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <__swsetup_r+0xa8>)
 800987c:	4605      	mov	r5, r0
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	460c      	mov	r4, r1
 8009882:	b118      	cbz	r0, 800988c <__swsetup_r+0x14>
 8009884:	6a03      	ldr	r3, [r0, #32]
 8009886:	b90b      	cbnz	r3, 800988c <__swsetup_r+0x14>
 8009888:	f7ff feac 	bl	80095e4 <__sinit>
 800988c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009890:	0719      	lsls	r1, r3, #28
 8009892:	d422      	bmi.n	80098da <__swsetup_r+0x62>
 8009894:	06da      	lsls	r2, r3, #27
 8009896:	d407      	bmi.n	80098a8 <__swsetup_r+0x30>
 8009898:	2209      	movs	r2, #9
 800989a:	602a      	str	r2, [r5, #0]
 800989c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	e033      	b.n	8009910 <__swsetup_r+0x98>
 80098a8:	0758      	lsls	r0, r3, #29
 80098aa:	d512      	bpl.n	80098d2 <__swsetup_r+0x5a>
 80098ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ae:	b141      	cbz	r1, 80098c2 <__swsetup_r+0x4a>
 80098b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098b4:	4299      	cmp	r1, r3
 80098b6:	d002      	beq.n	80098be <__swsetup_r+0x46>
 80098b8:	4628      	mov	r0, r5
 80098ba:	f000 f8bd 	bl	8009a38 <_free_r>
 80098be:	2300      	movs	r3, #0
 80098c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	2300      	movs	r3, #0
 80098cc:	6063      	str	r3, [r4, #4]
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	f043 0308 	orr.w	r3, r3, #8
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	b94b      	cbnz	r3, 80098f2 <__swsetup_r+0x7a>
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e8:	d003      	beq.n	80098f2 <__swsetup_r+0x7a>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	f000 fe93 	bl	800a618 <__smakebuf_r>
 80098f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f6:	f013 0201 	ands.w	r2, r3, #1
 80098fa:	d00a      	beq.n	8009912 <__swsetup_r+0x9a>
 80098fc:	2200      	movs	r2, #0
 80098fe:	60a2      	str	r2, [r4, #8]
 8009900:	6962      	ldr	r2, [r4, #20]
 8009902:	4252      	negs	r2, r2
 8009904:	61a2      	str	r2, [r4, #24]
 8009906:	6922      	ldr	r2, [r4, #16]
 8009908:	b942      	cbnz	r2, 800991c <__swsetup_r+0xa4>
 800990a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800990e:	d1c5      	bne.n	800989c <__swsetup_r+0x24>
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	0799      	lsls	r1, r3, #30
 8009914:	bf58      	it	pl
 8009916:	6962      	ldrpl	r2, [r4, #20]
 8009918:	60a2      	str	r2, [r4, #8]
 800991a:	e7f4      	b.n	8009906 <__swsetup_r+0x8e>
 800991c:	2000      	movs	r0, #0
 800991e:	e7f7      	b.n	8009910 <__swsetup_r+0x98>
 8009920:	20000018 	.word	0x20000018

08009924 <memset>:
 8009924:	4402      	add	r2, r0
 8009926:	4603      	mov	r3, r0
 8009928:	4293      	cmp	r3, r2
 800992a:	d100      	bne.n	800992e <memset+0xa>
 800992c:	4770      	bx	lr
 800992e:	f803 1b01 	strb.w	r1, [r3], #1
 8009932:	e7f9      	b.n	8009928 <memset+0x4>

08009934 <_close_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4d06      	ldr	r5, [pc, #24]	@ (8009950 <_close_r+0x1c>)
 8009938:	2300      	movs	r3, #0
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	f7f7 fe6f 	bl	8001622 <_close>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_close_r+0x1a>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b103      	cbz	r3, 800994e <_close_r+0x1a>
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	20000acc 	.word	0x20000acc

08009954 <_lseek_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d07      	ldr	r5, [pc, #28]	@ (8009974 <_lseek_r+0x20>)
 8009958:	4604      	mov	r4, r0
 800995a:	4608      	mov	r0, r1
 800995c:	4611      	mov	r1, r2
 800995e:	2200      	movs	r2, #0
 8009960:	602a      	str	r2, [r5, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	f7f7 fe84 	bl	8001670 <_lseek>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	d102      	bne.n	8009972 <_lseek_r+0x1e>
 800996c:	682b      	ldr	r3, [r5, #0]
 800996e:	b103      	cbz	r3, 8009972 <_lseek_r+0x1e>
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	bd38      	pop	{r3, r4, r5, pc}
 8009974:	20000acc 	.word	0x20000acc

08009978 <_read_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4d07      	ldr	r5, [pc, #28]	@ (8009998 <_read_r+0x20>)
 800997c:	4604      	mov	r4, r0
 800997e:	4608      	mov	r0, r1
 8009980:	4611      	mov	r1, r2
 8009982:	2200      	movs	r2, #0
 8009984:	602a      	str	r2, [r5, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	f7f7 fe2e 	bl	80015e8 <_read>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_read_r+0x1e>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_read_r+0x1e>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20000acc 	.word	0x20000acc

0800999c <_write_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4d07      	ldr	r5, [pc, #28]	@ (80099bc <_write_r+0x20>)
 80099a0:	4604      	mov	r4, r0
 80099a2:	4608      	mov	r0, r1
 80099a4:	4611      	mov	r1, r2
 80099a6:	2200      	movs	r2, #0
 80099a8:	602a      	str	r2, [r5, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	f7f7 f904 	bl	8000bb8 <_write>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d102      	bne.n	80099ba <_write_r+0x1e>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	b103      	cbz	r3, 80099ba <_write_r+0x1e>
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	20000acc 	.word	0x20000acc

080099c0 <__errno>:
 80099c0:	4b01      	ldr	r3, [pc, #4]	@ (80099c8 <__errno+0x8>)
 80099c2:	6818      	ldr	r0, [r3, #0]
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	20000018 	.word	0x20000018

080099cc <__libc_init_array>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009a04 <__libc_init_array+0x38>)
 80099d0:	4c0d      	ldr	r4, [pc, #52]	@ (8009a08 <__libc_init_array+0x3c>)
 80099d2:	1b64      	subs	r4, r4, r5
 80099d4:	10a4      	asrs	r4, r4, #2
 80099d6:	2600      	movs	r6, #0
 80099d8:	42a6      	cmp	r6, r4
 80099da:	d109      	bne.n	80099f0 <__libc_init_array+0x24>
 80099dc:	4d0b      	ldr	r5, [pc, #44]	@ (8009a0c <__libc_init_array+0x40>)
 80099de:	4c0c      	ldr	r4, [pc, #48]	@ (8009a10 <__libc_init_array+0x44>)
 80099e0:	f000 fed8 	bl	800a794 <_init>
 80099e4:	1b64      	subs	r4, r4, r5
 80099e6:	10a4      	asrs	r4, r4, #2
 80099e8:	2600      	movs	r6, #0
 80099ea:	42a6      	cmp	r6, r4
 80099ec:	d105      	bne.n	80099fa <__libc_init_array+0x2e>
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f4:	4798      	blx	r3
 80099f6:	3601      	adds	r6, #1
 80099f8:	e7ee      	b.n	80099d8 <__libc_init_array+0xc>
 80099fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fe:	4798      	blx	r3
 8009a00:	3601      	adds	r6, #1
 8009a02:	e7f2      	b.n	80099ea <__libc_init_array+0x1e>
 8009a04:	0800b044 	.word	0x0800b044
 8009a08:	0800b044 	.word	0x0800b044
 8009a0c:	0800b044 	.word	0x0800b044
 8009a10:	0800b048 	.word	0x0800b048

08009a14 <__retarget_lock_init_recursive>:
 8009a14:	4770      	bx	lr

08009a16 <__retarget_lock_acquire_recursive>:
 8009a16:	4770      	bx	lr

08009a18 <__retarget_lock_release_recursive>:
 8009a18:	4770      	bx	lr

08009a1a <memcpy>:
 8009a1a:	440a      	add	r2, r1
 8009a1c:	4291      	cmp	r1, r2
 8009a1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a22:	d100      	bne.n	8009a26 <memcpy+0xc>
 8009a24:	4770      	bx	lr
 8009a26:	b510      	push	{r4, lr}
 8009a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a30:	4291      	cmp	r1, r2
 8009a32:	d1f9      	bne.n	8009a28 <memcpy+0xe>
 8009a34:	bd10      	pop	{r4, pc}
	...

08009a38 <_free_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	2900      	cmp	r1, #0
 8009a3e:	d041      	beq.n	8009ac4 <_free_r+0x8c>
 8009a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a44:	1f0c      	subs	r4, r1, #4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bfb8      	it	lt
 8009a4a:	18e4      	addlt	r4, r4, r3
 8009a4c:	f000 f8e0 	bl	8009c10 <__malloc_lock>
 8009a50:	4a1d      	ldr	r2, [pc, #116]	@ (8009ac8 <_free_r+0x90>)
 8009a52:	6813      	ldr	r3, [r2, #0]
 8009a54:	b933      	cbnz	r3, 8009a64 <_free_r+0x2c>
 8009a56:	6063      	str	r3, [r4, #4]
 8009a58:	6014      	str	r4, [r2, #0]
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a60:	f000 b8dc 	b.w	8009c1c <__malloc_unlock>
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	d908      	bls.n	8009a7a <_free_r+0x42>
 8009a68:	6820      	ldr	r0, [r4, #0]
 8009a6a:	1821      	adds	r1, r4, r0
 8009a6c:	428b      	cmp	r3, r1
 8009a6e:	bf01      	itttt	eq
 8009a70:	6819      	ldreq	r1, [r3, #0]
 8009a72:	685b      	ldreq	r3, [r3, #4]
 8009a74:	1809      	addeq	r1, r1, r0
 8009a76:	6021      	streq	r1, [r4, #0]
 8009a78:	e7ed      	b.n	8009a56 <_free_r+0x1e>
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	b10b      	cbz	r3, 8009a84 <_free_r+0x4c>
 8009a80:	42a3      	cmp	r3, r4
 8009a82:	d9fa      	bls.n	8009a7a <_free_r+0x42>
 8009a84:	6811      	ldr	r1, [r2, #0]
 8009a86:	1850      	adds	r0, r2, r1
 8009a88:	42a0      	cmp	r0, r4
 8009a8a:	d10b      	bne.n	8009aa4 <_free_r+0x6c>
 8009a8c:	6820      	ldr	r0, [r4, #0]
 8009a8e:	4401      	add	r1, r0
 8009a90:	1850      	adds	r0, r2, r1
 8009a92:	4283      	cmp	r3, r0
 8009a94:	6011      	str	r1, [r2, #0]
 8009a96:	d1e0      	bne.n	8009a5a <_free_r+0x22>
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	6053      	str	r3, [r2, #4]
 8009a9e:	4408      	add	r0, r1
 8009aa0:	6010      	str	r0, [r2, #0]
 8009aa2:	e7da      	b.n	8009a5a <_free_r+0x22>
 8009aa4:	d902      	bls.n	8009aac <_free_r+0x74>
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	e7d6      	b.n	8009a5a <_free_r+0x22>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	1821      	adds	r1, r4, r0
 8009ab0:	428b      	cmp	r3, r1
 8009ab2:	bf04      	itt	eq
 8009ab4:	6819      	ldreq	r1, [r3, #0]
 8009ab6:	685b      	ldreq	r3, [r3, #4]
 8009ab8:	6063      	str	r3, [r4, #4]
 8009aba:	bf04      	itt	eq
 8009abc:	1809      	addeq	r1, r1, r0
 8009abe:	6021      	streq	r1, [r4, #0]
 8009ac0:	6054      	str	r4, [r2, #4]
 8009ac2:	e7ca      	b.n	8009a5a <_free_r+0x22>
 8009ac4:	bd38      	pop	{r3, r4, r5, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20000ad8 	.word	0x20000ad8

08009acc <sbrk_aligned>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	4e0f      	ldr	r6, [pc, #60]	@ (8009b0c <sbrk_aligned+0x40>)
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	6831      	ldr	r1, [r6, #0]
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	b911      	cbnz	r1, 8009ade <sbrk_aligned+0x12>
 8009ad8:	f000 fe16 	bl	800a708 <_sbrk_r>
 8009adc:	6030      	str	r0, [r6, #0]
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f000 fe11 	bl	800a708 <_sbrk_r>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	d103      	bne.n	8009af2 <sbrk_aligned+0x26>
 8009aea:	f04f 34ff 	mov.w	r4, #4294967295
 8009aee:	4620      	mov	r0, r4
 8009af0:	bd70      	pop	{r4, r5, r6, pc}
 8009af2:	1cc4      	adds	r4, r0, #3
 8009af4:	f024 0403 	bic.w	r4, r4, #3
 8009af8:	42a0      	cmp	r0, r4
 8009afa:	d0f8      	beq.n	8009aee <sbrk_aligned+0x22>
 8009afc:	1a21      	subs	r1, r4, r0
 8009afe:	4628      	mov	r0, r5
 8009b00:	f000 fe02 	bl	800a708 <_sbrk_r>
 8009b04:	3001      	adds	r0, #1
 8009b06:	d1f2      	bne.n	8009aee <sbrk_aligned+0x22>
 8009b08:	e7ef      	b.n	8009aea <sbrk_aligned+0x1e>
 8009b0a:	bf00      	nop
 8009b0c:	20000ad4 	.word	0x20000ad4

08009b10 <_malloc_r>:
 8009b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b14:	1ccd      	adds	r5, r1, #3
 8009b16:	f025 0503 	bic.w	r5, r5, #3
 8009b1a:	3508      	adds	r5, #8
 8009b1c:	2d0c      	cmp	r5, #12
 8009b1e:	bf38      	it	cc
 8009b20:	250c      	movcc	r5, #12
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	4606      	mov	r6, r0
 8009b26:	db01      	blt.n	8009b2c <_malloc_r+0x1c>
 8009b28:	42a9      	cmp	r1, r5
 8009b2a:	d904      	bls.n	8009b36 <_malloc_r+0x26>
 8009b2c:	230c      	movs	r3, #12
 8009b2e:	6033      	str	r3, [r6, #0]
 8009b30:	2000      	movs	r0, #0
 8009b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c0c <_malloc_r+0xfc>
 8009b3a:	f000 f869 	bl	8009c10 <__malloc_lock>
 8009b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b42:	461c      	mov	r4, r3
 8009b44:	bb44      	cbnz	r4, 8009b98 <_malloc_r+0x88>
 8009b46:	4629      	mov	r1, r5
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7ff ffbf 	bl	8009acc <sbrk_aligned>
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	4604      	mov	r4, r0
 8009b52:	d158      	bne.n	8009c06 <_malloc_r+0xf6>
 8009b54:	f8d8 4000 	ldr.w	r4, [r8]
 8009b58:	4627      	mov	r7, r4
 8009b5a:	2f00      	cmp	r7, #0
 8009b5c:	d143      	bne.n	8009be6 <_malloc_r+0xd6>
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d04b      	beq.n	8009bfa <_malloc_r+0xea>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	4639      	mov	r1, r7
 8009b66:	4630      	mov	r0, r6
 8009b68:	eb04 0903 	add.w	r9, r4, r3
 8009b6c:	f000 fdcc 	bl	800a708 <_sbrk_r>
 8009b70:	4581      	cmp	r9, r0
 8009b72:	d142      	bne.n	8009bfa <_malloc_r+0xea>
 8009b74:	6821      	ldr	r1, [r4, #0]
 8009b76:	1a6d      	subs	r5, r5, r1
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7ff ffa6 	bl	8009acc <sbrk_aligned>
 8009b80:	3001      	adds	r0, #1
 8009b82:	d03a      	beq.n	8009bfa <_malloc_r+0xea>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	442b      	add	r3, r5
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	bb62      	cbnz	r2, 8009bec <_malloc_r+0xdc>
 8009b92:	f8c8 7000 	str.w	r7, [r8]
 8009b96:	e00f      	b.n	8009bb8 <_malloc_r+0xa8>
 8009b98:	6822      	ldr	r2, [r4, #0]
 8009b9a:	1b52      	subs	r2, r2, r5
 8009b9c:	d420      	bmi.n	8009be0 <_malloc_r+0xd0>
 8009b9e:	2a0b      	cmp	r2, #11
 8009ba0:	d917      	bls.n	8009bd2 <_malloc_r+0xc2>
 8009ba2:	1961      	adds	r1, r4, r5
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	6025      	str	r5, [r4, #0]
 8009ba8:	bf18      	it	ne
 8009baa:	6059      	strne	r1, [r3, #4]
 8009bac:	6863      	ldr	r3, [r4, #4]
 8009bae:	bf08      	it	eq
 8009bb0:	f8c8 1000 	streq.w	r1, [r8]
 8009bb4:	5162      	str	r2, [r4, r5]
 8009bb6:	604b      	str	r3, [r1, #4]
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f000 f82f 	bl	8009c1c <__malloc_unlock>
 8009bbe:	f104 000b 	add.w	r0, r4, #11
 8009bc2:	1d23      	adds	r3, r4, #4
 8009bc4:	f020 0007 	bic.w	r0, r0, #7
 8009bc8:	1ac2      	subs	r2, r0, r3
 8009bca:	bf1c      	itt	ne
 8009bcc:	1a1b      	subne	r3, r3, r0
 8009bce:	50a3      	strne	r3, [r4, r2]
 8009bd0:	e7af      	b.n	8009b32 <_malloc_r+0x22>
 8009bd2:	6862      	ldr	r2, [r4, #4]
 8009bd4:	42a3      	cmp	r3, r4
 8009bd6:	bf0c      	ite	eq
 8009bd8:	f8c8 2000 	streq.w	r2, [r8]
 8009bdc:	605a      	strne	r2, [r3, #4]
 8009bde:	e7eb      	b.n	8009bb8 <_malloc_r+0xa8>
 8009be0:	4623      	mov	r3, r4
 8009be2:	6864      	ldr	r4, [r4, #4]
 8009be4:	e7ae      	b.n	8009b44 <_malloc_r+0x34>
 8009be6:	463c      	mov	r4, r7
 8009be8:	687f      	ldr	r7, [r7, #4]
 8009bea:	e7b6      	b.n	8009b5a <_malloc_r+0x4a>
 8009bec:	461a      	mov	r2, r3
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	d1fb      	bne.n	8009bec <_malloc_r+0xdc>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	6053      	str	r3, [r2, #4]
 8009bf8:	e7de      	b.n	8009bb8 <_malloc_r+0xa8>
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	6033      	str	r3, [r6, #0]
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f000 f80c 	bl	8009c1c <__malloc_unlock>
 8009c04:	e794      	b.n	8009b30 <_malloc_r+0x20>
 8009c06:	6005      	str	r5, [r0, #0]
 8009c08:	e7d6      	b.n	8009bb8 <_malloc_r+0xa8>
 8009c0a:	bf00      	nop
 8009c0c:	20000ad8 	.word	0x20000ad8

08009c10 <__malloc_lock>:
 8009c10:	4801      	ldr	r0, [pc, #4]	@ (8009c18 <__malloc_lock+0x8>)
 8009c12:	f7ff bf00 	b.w	8009a16 <__retarget_lock_acquire_recursive>
 8009c16:	bf00      	nop
 8009c18:	20000ad0 	.word	0x20000ad0

08009c1c <__malloc_unlock>:
 8009c1c:	4801      	ldr	r0, [pc, #4]	@ (8009c24 <__malloc_unlock+0x8>)
 8009c1e:	f7ff befb 	b.w	8009a18 <__retarget_lock_release_recursive>
 8009c22:	bf00      	nop
 8009c24:	20000ad0 	.word	0x20000ad0

08009c28 <__ssputs_r>:
 8009c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2c:	688e      	ldr	r6, [r1, #8]
 8009c2e:	461f      	mov	r7, r3
 8009c30:	42be      	cmp	r6, r7
 8009c32:	680b      	ldr	r3, [r1, #0]
 8009c34:	4682      	mov	sl, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4690      	mov	r8, r2
 8009c3a:	d82d      	bhi.n	8009c98 <__ssputs_r+0x70>
 8009c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c44:	d026      	beq.n	8009c94 <__ssputs_r+0x6c>
 8009c46:	6965      	ldr	r5, [r4, #20]
 8009c48:	6909      	ldr	r1, [r1, #16]
 8009c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c4e:	eba3 0901 	sub.w	r9, r3, r1
 8009c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c56:	1c7b      	adds	r3, r7, #1
 8009c58:	444b      	add	r3, r9
 8009c5a:	106d      	asrs	r5, r5, #1
 8009c5c:	429d      	cmp	r5, r3
 8009c5e:	bf38      	it	cc
 8009c60:	461d      	movcc	r5, r3
 8009c62:	0553      	lsls	r3, r2, #21
 8009c64:	d527      	bpl.n	8009cb6 <__ssputs_r+0x8e>
 8009c66:	4629      	mov	r1, r5
 8009c68:	f7ff ff52 	bl	8009b10 <_malloc_r>
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	b360      	cbz	r0, 8009cca <__ssputs_r+0xa2>
 8009c70:	6921      	ldr	r1, [r4, #16]
 8009c72:	464a      	mov	r2, r9
 8009c74:	f7ff fed1 	bl	8009a1a <memcpy>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	6126      	str	r6, [r4, #16]
 8009c86:	6165      	str	r5, [r4, #20]
 8009c88:	444e      	add	r6, r9
 8009c8a:	eba5 0509 	sub.w	r5, r5, r9
 8009c8e:	6026      	str	r6, [r4, #0]
 8009c90:	60a5      	str	r5, [r4, #8]
 8009c92:	463e      	mov	r6, r7
 8009c94:	42be      	cmp	r6, r7
 8009c96:	d900      	bls.n	8009c9a <__ssputs_r+0x72>
 8009c98:	463e      	mov	r6, r7
 8009c9a:	6820      	ldr	r0, [r4, #0]
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	4641      	mov	r1, r8
 8009ca0:	f000 fcf6 	bl	800a690 <memmove>
 8009ca4:	68a3      	ldr	r3, [r4, #8]
 8009ca6:	1b9b      	subs	r3, r3, r6
 8009ca8:	60a3      	str	r3, [r4, #8]
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	4433      	add	r3, r6
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	f000 fd36 	bl	800a728 <_realloc_r>
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d1e0      	bne.n	8009c84 <__ssputs_r+0x5c>
 8009cc2:	6921      	ldr	r1, [r4, #16]
 8009cc4:	4650      	mov	r0, sl
 8009cc6:	f7ff feb7 	bl	8009a38 <_free_r>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	f8ca 3000 	str.w	r3, [sl]
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	e7e9      	b.n	8009cb2 <__ssputs_r+0x8a>
	...

08009ce0 <_svfiprintf_r>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	4698      	mov	r8, r3
 8009ce6:	898b      	ldrh	r3, [r1, #12]
 8009ce8:	061b      	lsls	r3, r3, #24
 8009cea:	b09d      	sub	sp, #116	@ 0x74
 8009cec:	4607      	mov	r7, r0
 8009cee:	460d      	mov	r5, r1
 8009cf0:	4614      	mov	r4, r2
 8009cf2:	d510      	bpl.n	8009d16 <_svfiprintf_r+0x36>
 8009cf4:	690b      	ldr	r3, [r1, #16]
 8009cf6:	b973      	cbnz	r3, 8009d16 <_svfiprintf_r+0x36>
 8009cf8:	2140      	movs	r1, #64	@ 0x40
 8009cfa:	f7ff ff09 	bl	8009b10 <_malloc_r>
 8009cfe:	6028      	str	r0, [r5, #0]
 8009d00:	6128      	str	r0, [r5, #16]
 8009d02:	b930      	cbnz	r0, 8009d12 <_svfiprintf_r+0x32>
 8009d04:	230c      	movs	r3, #12
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0c:	b01d      	add	sp, #116	@ 0x74
 8009d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d12:	2340      	movs	r3, #64	@ 0x40
 8009d14:	616b      	str	r3, [r5, #20]
 8009d16:	2300      	movs	r3, #0
 8009d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d1a:	2320      	movs	r3, #32
 8009d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d24:	2330      	movs	r3, #48	@ 0x30
 8009d26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ec4 <_svfiprintf_r+0x1e4>
 8009d2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d2e:	f04f 0901 	mov.w	r9, #1
 8009d32:	4623      	mov	r3, r4
 8009d34:	469a      	mov	sl, r3
 8009d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3a:	b10a      	cbz	r2, 8009d40 <_svfiprintf_r+0x60>
 8009d3c:	2a25      	cmp	r2, #37	@ 0x25
 8009d3e:	d1f9      	bne.n	8009d34 <_svfiprintf_r+0x54>
 8009d40:	ebba 0b04 	subs.w	fp, sl, r4
 8009d44:	d00b      	beq.n	8009d5e <_svfiprintf_r+0x7e>
 8009d46:	465b      	mov	r3, fp
 8009d48:	4622      	mov	r2, r4
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	f7ff ff6b 	bl	8009c28 <__ssputs_r>
 8009d52:	3001      	adds	r0, #1
 8009d54:	f000 80a7 	beq.w	8009ea6 <_svfiprintf_r+0x1c6>
 8009d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d5a:	445a      	add	r2, fp
 8009d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 809f 	beq.w	8009ea6 <_svfiprintf_r+0x1c6>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d72:	f10a 0a01 	add.w	sl, sl, #1
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	9307      	str	r3, [sp, #28]
 8009d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d80:	4654      	mov	r4, sl
 8009d82:	2205      	movs	r2, #5
 8009d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d88:	484e      	ldr	r0, [pc, #312]	@ (8009ec4 <_svfiprintf_r+0x1e4>)
 8009d8a:	f7f6 fa29 	bl	80001e0 <memchr>
 8009d8e:	9a04      	ldr	r2, [sp, #16]
 8009d90:	b9d8      	cbnz	r0, 8009dca <_svfiprintf_r+0xea>
 8009d92:	06d0      	lsls	r0, r2, #27
 8009d94:	bf44      	itt	mi
 8009d96:	2320      	movmi	r3, #32
 8009d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d9c:	0711      	lsls	r1, r2, #28
 8009d9e:	bf44      	itt	mi
 8009da0:	232b      	movmi	r3, #43	@ 0x2b
 8009da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da6:	f89a 3000 	ldrb.w	r3, [sl]
 8009daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dac:	d015      	beq.n	8009dda <_svfiprintf_r+0xfa>
 8009dae:	9a07      	ldr	r2, [sp, #28]
 8009db0:	4654      	mov	r4, sl
 8009db2:	2000      	movs	r0, #0
 8009db4:	f04f 0c0a 	mov.w	ip, #10
 8009db8:	4621      	mov	r1, r4
 8009dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dbe:	3b30      	subs	r3, #48	@ 0x30
 8009dc0:	2b09      	cmp	r3, #9
 8009dc2:	d94b      	bls.n	8009e5c <_svfiprintf_r+0x17c>
 8009dc4:	b1b0      	cbz	r0, 8009df4 <_svfiprintf_r+0x114>
 8009dc6:	9207      	str	r2, [sp, #28]
 8009dc8:	e014      	b.n	8009df4 <_svfiprintf_r+0x114>
 8009dca:	eba0 0308 	sub.w	r3, r0, r8
 8009dce:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	9304      	str	r3, [sp, #16]
 8009dd6:	46a2      	mov	sl, r4
 8009dd8:	e7d2      	b.n	8009d80 <_svfiprintf_r+0xa0>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	1d19      	adds	r1, r3, #4
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	9103      	str	r1, [sp, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	bfbb      	ittet	lt
 8009de6:	425b      	neglt	r3, r3
 8009de8:	f042 0202 	orrlt.w	r2, r2, #2
 8009dec:	9307      	strge	r3, [sp, #28]
 8009dee:	9307      	strlt	r3, [sp, #28]
 8009df0:	bfb8      	it	lt
 8009df2:	9204      	strlt	r2, [sp, #16]
 8009df4:	7823      	ldrb	r3, [r4, #0]
 8009df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009df8:	d10a      	bne.n	8009e10 <_svfiprintf_r+0x130>
 8009dfa:	7863      	ldrb	r3, [r4, #1]
 8009dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dfe:	d132      	bne.n	8009e66 <_svfiprintf_r+0x186>
 8009e00:	9b03      	ldr	r3, [sp, #12]
 8009e02:	1d1a      	adds	r2, r3, #4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	9203      	str	r2, [sp, #12]
 8009e08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e0c:	3402      	adds	r4, #2
 8009e0e:	9305      	str	r3, [sp, #20]
 8009e10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ed4 <_svfiprintf_r+0x1f4>
 8009e14:	7821      	ldrb	r1, [r4, #0]
 8009e16:	2203      	movs	r2, #3
 8009e18:	4650      	mov	r0, sl
 8009e1a:	f7f6 f9e1 	bl	80001e0 <memchr>
 8009e1e:	b138      	cbz	r0, 8009e30 <_svfiprintf_r+0x150>
 8009e20:	9b04      	ldr	r3, [sp, #16]
 8009e22:	eba0 000a 	sub.w	r0, r0, sl
 8009e26:	2240      	movs	r2, #64	@ 0x40
 8009e28:	4082      	lsls	r2, r0
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	9304      	str	r3, [sp, #16]
 8009e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e34:	4824      	ldr	r0, [pc, #144]	@ (8009ec8 <_svfiprintf_r+0x1e8>)
 8009e36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e3a:	2206      	movs	r2, #6
 8009e3c:	f7f6 f9d0 	bl	80001e0 <memchr>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d036      	beq.n	8009eb2 <_svfiprintf_r+0x1d2>
 8009e44:	4b21      	ldr	r3, [pc, #132]	@ (8009ecc <_svfiprintf_r+0x1ec>)
 8009e46:	bb1b      	cbnz	r3, 8009e90 <_svfiprintf_r+0x1b0>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	3307      	adds	r3, #7
 8009e4c:	f023 0307 	bic.w	r3, r3, #7
 8009e50:	3308      	adds	r3, #8
 8009e52:	9303      	str	r3, [sp, #12]
 8009e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e56:	4433      	add	r3, r6
 8009e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e5a:	e76a      	b.n	8009d32 <_svfiprintf_r+0x52>
 8009e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e60:	460c      	mov	r4, r1
 8009e62:	2001      	movs	r0, #1
 8009e64:	e7a8      	b.n	8009db8 <_svfiprintf_r+0xd8>
 8009e66:	2300      	movs	r3, #0
 8009e68:	3401      	adds	r4, #1
 8009e6a:	9305      	str	r3, [sp, #20]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f04f 0c0a 	mov.w	ip, #10
 8009e72:	4620      	mov	r0, r4
 8009e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e78:	3a30      	subs	r2, #48	@ 0x30
 8009e7a:	2a09      	cmp	r2, #9
 8009e7c:	d903      	bls.n	8009e86 <_svfiprintf_r+0x1a6>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0c6      	beq.n	8009e10 <_svfiprintf_r+0x130>
 8009e82:	9105      	str	r1, [sp, #20]
 8009e84:	e7c4      	b.n	8009e10 <_svfiprintf_r+0x130>
 8009e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e7f0      	b.n	8009e72 <_svfiprintf_r+0x192>
 8009e90:	ab03      	add	r3, sp, #12
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	462a      	mov	r2, r5
 8009e96:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed0 <_svfiprintf_r+0x1f0>)
 8009e98:	a904      	add	r1, sp, #16
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	1c42      	adds	r2, r0, #1
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	d1d6      	bne.n	8009e54 <_svfiprintf_r+0x174>
 8009ea6:	89ab      	ldrh	r3, [r5, #12]
 8009ea8:	065b      	lsls	r3, r3, #25
 8009eaa:	f53f af2d 	bmi.w	8009d08 <_svfiprintf_r+0x28>
 8009eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eb0:	e72c      	b.n	8009d0c <_svfiprintf_r+0x2c>
 8009eb2:	ab03      	add	r3, sp, #12
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	462a      	mov	r2, r5
 8009eb8:	4b05      	ldr	r3, [pc, #20]	@ (8009ed0 <_svfiprintf_r+0x1f0>)
 8009eba:	a904      	add	r1, sp, #16
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f000 f9bb 	bl	800a238 <_printf_i>
 8009ec2:	e7ed      	b.n	8009ea0 <_svfiprintf_r+0x1c0>
 8009ec4:	0800b009 	.word	0x0800b009
 8009ec8:	0800b013 	.word	0x0800b013
 8009ecc:	00000000 	.word	0x00000000
 8009ed0:	08009c29 	.word	0x08009c29
 8009ed4:	0800b00f 	.word	0x0800b00f

08009ed8 <__sfputc_r>:
 8009ed8:	6893      	ldr	r3, [r2, #8]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	b410      	push	{r4}
 8009ee0:	6093      	str	r3, [r2, #8]
 8009ee2:	da08      	bge.n	8009ef6 <__sfputc_r+0x1e>
 8009ee4:	6994      	ldr	r4, [r2, #24]
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	db01      	blt.n	8009eee <__sfputc_r+0x16>
 8009eea:	290a      	cmp	r1, #10
 8009eec:	d103      	bne.n	8009ef6 <__sfputc_r+0x1e>
 8009eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef2:	f7ff bc82 	b.w	80097fa <__swbuf_r>
 8009ef6:	6813      	ldr	r3, [r2, #0]
 8009ef8:	1c58      	adds	r0, r3, #1
 8009efa:	6010      	str	r0, [r2, #0]
 8009efc:	7019      	strb	r1, [r3, #0]
 8009efe:	4608      	mov	r0, r1
 8009f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <__sfputs_r>:
 8009f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f08:	4606      	mov	r6, r0
 8009f0a:	460f      	mov	r7, r1
 8009f0c:	4614      	mov	r4, r2
 8009f0e:	18d5      	adds	r5, r2, r3
 8009f10:	42ac      	cmp	r4, r5
 8009f12:	d101      	bne.n	8009f18 <__sfputs_r+0x12>
 8009f14:	2000      	movs	r0, #0
 8009f16:	e007      	b.n	8009f28 <__sfputs_r+0x22>
 8009f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1c:	463a      	mov	r2, r7
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7ff ffda 	bl	8009ed8 <__sfputc_r>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d1f3      	bne.n	8009f10 <__sfputs_r+0xa>
 8009f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f2c <_vfiprintf_r>:
 8009f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f30:	460d      	mov	r5, r1
 8009f32:	b09d      	sub	sp, #116	@ 0x74
 8009f34:	4614      	mov	r4, r2
 8009f36:	4698      	mov	r8, r3
 8009f38:	4606      	mov	r6, r0
 8009f3a:	b118      	cbz	r0, 8009f44 <_vfiprintf_r+0x18>
 8009f3c:	6a03      	ldr	r3, [r0, #32]
 8009f3e:	b90b      	cbnz	r3, 8009f44 <_vfiprintf_r+0x18>
 8009f40:	f7ff fb50 	bl	80095e4 <__sinit>
 8009f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	d405      	bmi.n	8009f56 <_vfiprintf_r+0x2a>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	059a      	lsls	r2, r3, #22
 8009f4e:	d402      	bmi.n	8009f56 <_vfiprintf_r+0x2a>
 8009f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f52:	f7ff fd60 	bl	8009a16 <__retarget_lock_acquire_recursive>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	071b      	lsls	r3, r3, #28
 8009f5a:	d501      	bpl.n	8009f60 <_vfiprintf_r+0x34>
 8009f5c:	692b      	ldr	r3, [r5, #16]
 8009f5e:	b99b      	cbnz	r3, 8009f88 <_vfiprintf_r+0x5c>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4630      	mov	r0, r6
 8009f64:	f7ff fc88 	bl	8009878 <__swsetup_r>
 8009f68:	b170      	cbz	r0, 8009f88 <_vfiprintf_r+0x5c>
 8009f6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f6c:	07dc      	lsls	r4, r3, #31
 8009f6e:	d504      	bpl.n	8009f7a <_vfiprintf_r+0x4e>
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	b01d      	add	sp, #116	@ 0x74
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	0598      	lsls	r0, r3, #22
 8009f7e:	d4f7      	bmi.n	8009f70 <_vfiprintf_r+0x44>
 8009f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f82:	f7ff fd49 	bl	8009a18 <__retarget_lock_release_recursive>
 8009f86:	e7f3      	b.n	8009f70 <_vfiprintf_r+0x44>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f96:	2330      	movs	r3, #48	@ 0x30
 8009f98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a148 <_vfiprintf_r+0x21c>
 8009f9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fa0:	f04f 0901 	mov.w	r9, #1
 8009fa4:	4623      	mov	r3, r4
 8009fa6:	469a      	mov	sl, r3
 8009fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fac:	b10a      	cbz	r2, 8009fb2 <_vfiprintf_r+0x86>
 8009fae:	2a25      	cmp	r2, #37	@ 0x25
 8009fb0:	d1f9      	bne.n	8009fa6 <_vfiprintf_r+0x7a>
 8009fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb6:	d00b      	beq.n	8009fd0 <_vfiprintf_r+0xa4>
 8009fb8:	465b      	mov	r3, fp
 8009fba:	4622      	mov	r2, r4
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ffa1 	bl	8009f06 <__sfputs_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f000 80a7 	beq.w	800a118 <_vfiprintf_r+0x1ec>
 8009fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fcc:	445a      	add	r2, fp
 8009fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 809f 	beq.w	800a118 <_vfiprintf_r+0x1ec>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe4:	f10a 0a01 	add.w	sl, sl, #1
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	9307      	str	r3, [sp, #28]
 8009fec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ff2:	4654      	mov	r4, sl
 8009ff4:	2205      	movs	r2, #5
 8009ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ffa:	4853      	ldr	r0, [pc, #332]	@ (800a148 <_vfiprintf_r+0x21c>)
 8009ffc:	f7f6 f8f0 	bl	80001e0 <memchr>
 800a000:	9a04      	ldr	r2, [sp, #16]
 800a002:	b9d8      	cbnz	r0, 800a03c <_vfiprintf_r+0x110>
 800a004:	06d1      	lsls	r1, r2, #27
 800a006:	bf44      	itt	mi
 800a008:	2320      	movmi	r3, #32
 800a00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a00e:	0713      	lsls	r3, r2, #28
 800a010:	bf44      	itt	mi
 800a012:	232b      	movmi	r3, #43	@ 0x2b
 800a014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a018:	f89a 3000 	ldrb.w	r3, [sl]
 800a01c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a01e:	d015      	beq.n	800a04c <_vfiprintf_r+0x120>
 800a020:	9a07      	ldr	r2, [sp, #28]
 800a022:	4654      	mov	r4, sl
 800a024:	2000      	movs	r0, #0
 800a026:	f04f 0c0a 	mov.w	ip, #10
 800a02a:	4621      	mov	r1, r4
 800a02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a030:	3b30      	subs	r3, #48	@ 0x30
 800a032:	2b09      	cmp	r3, #9
 800a034:	d94b      	bls.n	800a0ce <_vfiprintf_r+0x1a2>
 800a036:	b1b0      	cbz	r0, 800a066 <_vfiprintf_r+0x13a>
 800a038:	9207      	str	r2, [sp, #28]
 800a03a:	e014      	b.n	800a066 <_vfiprintf_r+0x13a>
 800a03c:	eba0 0308 	sub.w	r3, r0, r8
 800a040:	fa09 f303 	lsl.w	r3, r9, r3
 800a044:	4313      	orrs	r3, r2
 800a046:	9304      	str	r3, [sp, #16]
 800a048:	46a2      	mov	sl, r4
 800a04a:	e7d2      	b.n	8009ff2 <_vfiprintf_r+0xc6>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	1d19      	adds	r1, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	9103      	str	r1, [sp, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfbb      	ittet	lt
 800a058:	425b      	neglt	r3, r3
 800a05a:	f042 0202 	orrlt.w	r2, r2, #2
 800a05e:	9307      	strge	r3, [sp, #28]
 800a060:	9307      	strlt	r3, [sp, #28]
 800a062:	bfb8      	it	lt
 800a064:	9204      	strlt	r2, [sp, #16]
 800a066:	7823      	ldrb	r3, [r4, #0]
 800a068:	2b2e      	cmp	r3, #46	@ 0x2e
 800a06a:	d10a      	bne.n	800a082 <_vfiprintf_r+0x156>
 800a06c:	7863      	ldrb	r3, [r4, #1]
 800a06e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a070:	d132      	bne.n	800a0d8 <_vfiprintf_r+0x1ac>
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	1d1a      	adds	r2, r3, #4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	9203      	str	r2, [sp, #12]
 800a07a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a07e:	3402      	adds	r4, #2
 800a080:	9305      	str	r3, [sp, #20]
 800a082:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a158 <_vfiprintf_r+0x22c>
 800a086:	7821      	ldrb	r1, [r4, #0]
 800a088:	2203      	movs	r2, #3
 800a08a:	4650      	mov	r0, sl
 800a08c:	f7f6 f8a8 	bl	80001e0 <memchr>
 800a090:	b138      	cbz	r0, 800a0a2 <_vfiprintf_r+0x176>
 800a092:	9b04      	ldr	r3, [sp, #16]
 800a094:	eba0 000a 	sub.w	r0, r0, sl
 800a098:	2240      	movs	r2, #64	@ 0x40
 800a09a:	4082      	lsls	r2, r0
 800a09c:	4313      	orrs	r3, r2
 800a09e:	3401      	adds	r4, #1
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a6:	4829      	ldr	r0, [pc, #164]	@ (800a14c <_vfiprintf_r+0x220>)
 800a0a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0ac:	2206      	movs	r2, #6
 800a0ae:	f7f6 f897 	bl	80001e0 <memchr>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d03f      	beq.n	800a136 <_vfiprintf_r+0x20a>
 800a0b6:	4b26      	ldr	r3, [pc, #152]	@ (800a150 <_vfiprintf_r+0x224>)
 800a0b8:	bb1b      	cbnz	r3, 800a102 <_vfiprintf_r+0x1d6>
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	3307      	adds	r3, #7
 800a0be:	f023 0307 	bic.w	r3, r3, #7
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c8:	443b      	add	r3, r7
 800a0ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0cc:	e76a      	b.n	8009fa4 <_vfiprintf_r+0x78>
 800a0ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	e7a8      	b.n	800a02a <_vfiprintf_r+0xfe>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	3401      	adds	r4, #1
 800a0dc:	9305      	str	r3, [sp, #20]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	f04f 0c0a 	mov.w	ip, #10
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ea:	3a30      	subs	r2, #48	@ 0x30
 800a0ec:	2a09      	cmp	r2, #9
 800a0ee:	d903      	bls.n	800a0f8 <_vfiprintf_r+0x1cc>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0c6      	beq.n	800a082 <_vfiprintf_r+0x156>
 800a0f4:	9105      	str	r1, [sp, #20]
 800a0f6:	e7c4      	b.n	800a082 <_vfiprintf_r+0x156>
 800a0f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	2301      	movs	r3, #1
 800a100:	e7f0      	b.n	800a0e4 <_vfiprintf_r+0x1b8>
 800a102:	ab03      	add	r3, sp, #12
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	462a      	mov	r2, r5
 800a108:	4b12      	ldr	r3, [pc, #72]	@ (800a154 <_vfiprintf_r+0x228>)
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	4630      	mov	r0, r6
 800a10e:	f3af 8000 	nop.w
 800a112:	4607      	mov	r7, r0
 800a114:	1c78      	adds	r0, r7, #1
 800a116:	d1d6      	bne.n	800a0c6 <_vfiprintf_r+0x19a>
 800a118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a11a:	07d9      	lsls	r1, r3, #31
 800a11c:	d405      	bmi.n	800a12a <_vfiprintf_r+0x1fe>
 800a11e:	89ab      	ldrh	r3, [r5, #12]
 800a120:	059a      	lsls	r2, r3, #22
 800a122:	d402      	bmi.n	800a12a <_vfiprintf_r+0x1fe>
 800a124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a126:	f7ff fc77 	bl	8009a18 <__retarget_lock_release_recursive>
 800a12a:	89ab      	ldrh	r3, [r5, #12]
 800a12c:	065b      	lsls	r3, r3, #25
 800a12e:	f53f af1f 	bmi.w	8009f70 <_vfiprintf_r+0x44>
 800a132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a134:	e71e      	b.n	8009f74 <_vfiprintf_r+0x48>
 800a136:	ab03      	add	r3, sp, #12
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	462a      	mov	r2, r5
 800a13c:	4b05      	ldr	r3, [pc, #20]	@ (800a154 <_vfiprintf_r+0x228>)
 800a13e:	a904      	add	r1, sp, #16
 800a140:	4630      	mov	r0, r6
 800a142:	f000 f879 	bl	800a238 <_printf_i>
 800a146:	e7e4      	b.n	800a112 <_vfiprintf_r+0x1e6>
 800a148:	0800b009 	.word	0x0800b009
 800a14c:	0800b013 	.word	0x0800b013
 800a150:	00000000 	.word	0x00000000
 800a154:	08009f07 	.word	0x08009f07
 800a158:	0800b00f 	.word	0x0800b00f

0800a15c <_printf_common>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	4616      	mov	r6, r2
 800a162:	4698      	mov	r8, r3
 800a164:	688a      	ldr	r2, [r1, #8]
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a16c:	4293      	cmp	r3, r2
 800a16e:	bfb8      	it	lt
 800a170:	4613      	movlt	r3, r2
 800a172:	6033      	str	r3, [r6, #0]
 800a174:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a178:	4607      	mov	r7, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b10a      	cbz	r2, 800a182 <_printf_common+0x26>
 800a17e:	3301      	adds	r3, #1
 800a180:	6033      	str	r3, [r6, #0]
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	0699      	lsls	r1, r3, #26
 800a186:	bf42      	ittt	mi
 800a188:	6833      	ldrmi	r3, [r6, #0]
 800a18a:	3302      	addmi	r3, #2
 800a18c:	6033      	strmi	r3, [r6, #0]
 800a18e:	6825      	ldr	r5, [r4, #0]
 800a190:	f015 0506 	ands.w	r5, r5, #6
 800a194:	d106      	bne.n	800a1a4 <_printf_common+0x48>
 800a196:	f104 0a19 	add.w	sl, r4, #25
 800a19a:	68e3      	ldr	r3, [r4, #12]
 800a19c:	6832      	ldr	r2, [r6, #0]
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	42ab      	cmp	r3, r5
 800a1a2:	dc26      	bgt.n	800a1f2 <_printf_common+0x96>
 800a1a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1a8:	6822      	ldr	r2, [r4, #0]
 800a1aa:	3b00      	subs	r3, #0
 800a1ac:	bf18      	it	ne
 800a1ae:	2301      	movne	r3, #1
 800a1b0:	0692      	lsls	r2, r2, #26
 800a1b2:	d42b      	bmi.n	800a20c <_printf_common+0xb0>
 800a1b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1b8:	4641      	mov	r1, r8
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c8      	blx	r9
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d01e      	beq.n	800a200 <_printf_common+0xa4>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	6922      	ldr	r2, [r4, #16]
 800a1c6:	f003 0306 	and.w	r3, r3, #6
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	bf02      	ittt	eq
 800a1ce:	68e5      	ldreq	r5, [r4, #12]
 800a1d0:	6833      	ldreq	r3, [r6, #0]
 800a1d2:	1aed      	subeq	r5, r5, r3
 800a1d4:	68a3      	ldr	r3, [r4, #8]
 800a1d6:	bf0c      	ite	eq
 800a1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1dc:	2500      	movne	r5, #0
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	bfc4      	itt	gt
 800a1e2:	1a9b      	subgt	r3, r3, r2
 800a1e4:	18ed      	addgt	r5, r5, r3
 800a1e6:	2600      	movs	r6, #0
 800a1e8:	341a      	adds	r4, #26
 800a1ea:	42b5      	cmp	r5, r6
 800a1ec:	d11a      	bne.n	800a224 <_printf_common+0xc8>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e008      	b.n	800a204 <_printf_common+0xa8>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	4641      	mov	r1, r8
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	47c8      	blx	r9
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d103      	bne.n	800a208 <_printf_common+0xac>
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a208:	3501      	adds	r5, #1
 800a20a:	e7c6      	b.n	800a19a <_printf_common+0x3e>
 800a20c:	18e1      	adds	r1, r4, r3
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	2030      	movs	r0, #48	@ 0x30
 800a212:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a216:	4422      	add	r2, r4
 800a218:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a21c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a220:	3302      	adds	r3, #2
 800a222:	e7c7      	b.n	800a1b4 <_printf_common+0x58>
 800a224:	2301      	movs	r3, #1
 800a226:	4622      	mov	r2, r4
 800a228:	4641      	mov	r1, r8
 800a22a:	4638      	mov	r0, r7
 800a22c:	47c8      	blx	r9
 800a22e:	3001      	adds	r0, #1
 800a230:	d0e6      	beq.n	800a200 <_printf_common+0xa4>
 800a232:	3601      	adds	r6, #1
 800a234:	e7d9      	b.n	800a1ea <_printf_common+0x8e>
	...

0800a238 <_printf_i>:
 800a238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a23c:	7e0f      	ldrb	r7, [r1, #24]
 800a23e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a240:	2f78      	cmp	r7, #120	@ 0x78
 800a242:	4691      	mov	r9, r2
 800a244:	4680      	mov	r8, r0
 800a246:	460c      	mov	r4, r1
 800a248:	469a      	mov	sl, r3
 800a24a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a24e:	d807      	bhi.n	800a260 <_printf_i+0x28>
 800a250:	2f62      	cmp	r7, #98	@ 0x62
 800a252:	d80a      	bhi.n	800a26a <_printf_i+0x32>
 800a254:	2f00      	cmp	r7, #0
 800a256:	f000 80d1 	beq.w	800a3fc <_printf_i+0x1c4>
 800a25a:	2f58      	cmp	r7, #88	@ 0x58
 800a25c:	f000 80b8 	beq.w	800a3d0 <_printf_i+0x198>
 800a260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a264:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a268:	e03a      	b.n	800a2e0 <_printf_i+0xa8>
 800a26a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a26e:	2b15      	cmp	r3, #21
 800a270:	d8f6      	bhi.n	800a260 <_printf_i+0x28>
 800a272:	a101      	add	r1, pc, #4	@ (adr r1, 800a278 <_printf_i+0x40>)
 800a274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a278:	0800a2d1 	.word	0x0800a2d1
 800a27c:	0800a2e5 	.word	0x0800a2e5
 800a280:	0800a261 	.word	0x0800a261
 800a284:	0800a261 	.word	0x0800a261
 800a288:	0800a261 	.word	0x0800a261
 800a28c:	0800a261 	.word	0x0800a261
 800a290:	0800a2e5 	.word	0x0800a2e5
 800a294:	0800a261 	.word	0x0800a261
 800a298:	0800a261 	.word	0x0800a261
 800a29c:	0800a261 	.word	0x0800a261
 800a2a0:	0800a261 	.word	0x0800a261
 800a2a4:	0800a3e3 	.word	0x0800a3e3
 800a2a8:	0800a30f 	.word	0x0800a30f
 800a2ac:	0800a39d 	.word	0x0800a39d
 800a2b0:	0800a261 	.word	0x0800a261
 800a2b4:	0800a261 	.word	0x0800a261
 800a2b8:	0800a405 	.word	0x0800a405
 800a2bc:	0800a261 	.word	0x0800a261
 800a2c0:	0800a30f 	.word	0x0800a30f
 800a2c4:	0800a261 	.word	0x0800a261
 800a2c8:	0800a261 	.word	0x0800a261
 800a2cc:	0800a3a5 	.word	0x0800a3a5
 800a2d0:	6833      	ldr	r3, [r6, #0]
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6032      	str	r2, [r6, #0]
 800a2d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e09c      	b.n	800a41e <_printf_i+0x1e6>
 800a2e4:	6833      	ldr	r3, [r6, #0]
 800a2e6:	6820      	ldr	r0, [r4, #0]
 800a2e8:	1d19      	adds	r1, r3, #4
 800a2ea:	6031      	str	r1, [r6, #0]
 800a2ec:	0606      	lsls	r6, r0, #24
 800a2ee:	d501      	bpl.n	800a2f4 <_printf_i+0xbc>
 800a2f0:	681d      	ldr	r5, [r3, #0]
 800a2f2:	e003      	b.n	800a2fc <_printf_i+0xc4>
 800a2f4:	0645      	lsls	r5, r0, #25
 800a2f6:	d5fb      	bpl.n	800a2f0 <_printf_i+0xb8>
 800a2f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2fc:	2d00      	cmp	r5, #0
 800a2fe:	da03      	bge.n	800a308 <_printf_i+0xd0>
 800a300:	232d      	movs	r3, #45	@ 0x2d
 800a302:	426d      	negs	r5, r5
 800a304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a308:	4858      	ldr	r0, [pc, #352]	@ (800a46c <_printf_i+0x234>)
 800a30a:	230a      	movs	r3, #10
 800a30c:	e011      	b.n	800a332 <_printf_i+0xfa>
 800a30e:	6821      	ldr	r1, [r4, #0]
 800a310:	6833      	ldr	r3, [r6, #0]
 800a312:	0608      	lsls	r0, r1, #24
 800a314:	f853 5b04 	ldr.w	r5, [r3], #4
 800a318:	d402      	bmi.n	800a320 <_printf_i+0xe8>
 800a31a:	0649      	lsls	r1, r1, #25
 800a31c:	bf48      	it	mi
 800a31e:	b2ad      	uxthmi	r5, r5
 800a320:	2f6f      	cmp	r7, #111	@ 0x6f
 800a322:	4852      	ldr	r0, [pc, #328]	@ (800a46c <_printf_i+0x234>)
 800a324:	6033      	str	r3, [r6, #0]
 800a326:	bf14      	ite	ne
 800a328:	230a      	movne	r3, #10
 800a32a:	2308      	moveq	r3, #8
 800a32c:	2100      	movs	r1, #0
 800a32e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a332:	6866      	ldr	r6, [r4, #4]
 800a334:	60a6      	str	r6, [r4, #8]
 800a336:	2e00      	cmp	r6, #0
 800a338:	db05      	blt.n	800a346 <_printf_i+0x10e>
 800a33a:	6821      	ldr	r1, [r4, #0]
 800a33c:	432e      	orrs	r6, r5
 800a33e:	f021 0104 	bic.w	r1, r1, #4
 800a342:	6021      	str	r1, [r4, #0]
 800a344:	d04b      	beq.n	800a3de <_printf_i+0x1a6>
 800a346:	4616      	mov	r6, r2
 800a348:	fbb5 f1f3 	udiv	r1, r5, r3
 800a34c:	fb03 5711 	mls	r7, r3, r1, r5
 800a350:	5dc7      	ldrb	r7, [r0, r7]
 800a352:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a356:	462f      	mov	r7, r5
 800a358:	42bb      	cmp	r3, r7
 800a35a:	460d      	mov	r5, r1
 800a35c:	d9f4      	bls.n	800a348 <_printf_i+0x110>
 800a35e:	2b08      	cmp	r3, #8
 800a360:	d10b      	bne.n	800a37a <_printf_i+0x142>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	07df      	lsls	r7, r3, #31
 800a366:	d508      	bpl.n	800a37a <_printf_i+0x142>
 800a368:	6923      	ldr	r3, [r4, #16]
 800a36a:	6861      	ldr	r1, [r4, #4]
 800a36c:	4299      	cmp	r1, r3
 800a36e:	bfde      	ittt	le
 800a370:	2330      	movle	r3, #48	@ 0x30
 800a372:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a376:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a37a:	1b92      	subs	r2, r2, r6
 800a37c:	6122      	str	r2, [r4, #16]
 800a37e:	f8cd a000 	str.w	sl, [sp]
 800a382:	464b      	mov	r3, r9
 800a384:	aa03      	add	r2, sp, #12
 800a386:	4621      	mov	r1, r4
 800a388:	4640      	mov	r0, r8
 800a38a:	f7ff fee7 	bl	800a15c <_printf_common>
 800a38e:	3001      	adds	r0, #1
 800a390:	d14a      	bne.n	800a428 <_printf_i+0x1f0>
 800a392:	f04f 30ff 	mov.w	r0, #4294967295
 800a396:	b004      	add	sp, #16
 800a398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	f043 0320 	orr.w	r3, r3, #32
 800a3a2:	6023      	str	r3, [r4, #0]
 800a3a4:	4832      	ldr	r0, [pc, #200]	@ (800a470 <_printf_i+0x238>)
 800a3a6:	2778      	movs	r7, #120	@ 0x78
 800a3a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	6831      	ldr	r1, [r6, #0]
 800a3b0:	061f      	lsls	r7, r3, #24
 800a3b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3b6:	d402      	bmi.n	800a3be <_printf_i+0x186>
 800a3b8:	065f      	lsls	r7, r3, #25
 800a3ba:	bf48      	it	mi
 800a3bc:	b2ad      	uxthmi	r5, r5
 800a3be:	6031      	str	r1, [r6, #0]
 800a3c0:	07d9      	lsls	r1, r3, #31
 800a3c2:	bf44      	itt	mi
 800a3c4:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c8:	6023      	strmi	r3, [r4, #0]
 800a3ca:	b11d      	cbz	r5, 800a3d4 <_printf_i+0x19c>
 800a3cc:	2310      	movs	r3, #16
 800a3ce:	e7ad      	b.n	800a32c <_printf_i+0xf4>
 800a3d0:	4826      	ldr	r0, [pc, #152]	@ (800a46c <_printf_i+0x234>)
 800a3d2:	e7e9      	b.n	800a3a8 <_printf_i+0x170>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	f023 0320 	bic.w	r3, r3, #32
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	e7f6      	b.n	800a3cc <_printf_i+0x194>
 800a3de:	4616      	mov	r6, r2
 800a3e0:	e7bd      	b.n	800a35e <_printf_i+0x126>
 800a3e2:	6833      	ldr	r3, [r6, #0]
 800a3e4:	6825      	ldr	r5, [r4, #0]
 800a3e6:	6961      	ldr	r1, [r4, #20]
 800a3e8:	1d18      	adds	r0, r3, #4
 800a3ea:	6030      	str	r0, [r6, #0]
 800a3ec:	062e      	lsls	r6, r5, #24
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	d501      	bpl.n	800a3f6 <_printf_i+0x1be>
 800a3f2:	6019      	str	r1, [r3, #0]
 800a3f4:	e002      	b.n	800a3fc <_printf_i+0x1c4>
 800a3f6:	0668      	lsls	r0, r5, #25
 800a3f8:	d5fb      	bpl.n	800a3f2 <_printf_i+0x1ba>
 800a3fa:	8019      	strh	r1, [r3, #0]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	4616      	mov	r6, r2
 800a402:	e7bc      	b.n	800a37e <_printf_i+0x146>
 800a404:	6833      	ldr	r3, [r6, #0]
 800a406:	1d1a      	adds	r2, r3, #4
 800a408:	6032      	str	r2, [r6, #0]
 800a40a:	681e      	ldr	r6, [r3, #0]
 800a40c:	6862      	ldr	r2, [r4, #4]
 800a40e:	2100      	movs	r1, #0
 800a410:	4630      	mov	r0, r6
 800a412:	f7f5 fee5 	bl	80001e0 <memchr>
 800a416:	b108      	cbz	r0, 800a41c <_printf_i+0x1e4>
 800a418:	1b80      	subs	r0, r0, r6
 800a41a:	6060      	str	r0, [r4, #4]
 800a41c:	6863      	ldr	r3, [r4, #4]
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	2300      	movs	r3, #0
 800a422:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a426:	e7aa      	b.n	800a37e <_printf_i+0x146>
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	4632      	mov	r2, r6
 800a42c:	4649      	mov	r1, r9
 800a42e:	4640      	mov	r0, r8
 800a430:	47d0      	blx	sl
 800a432:	3001      	adds	r0, #1
 800a434:	d0ad      	beq.n	800a392 <_printf_i+0x15a>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	079b      	lsls	r3, r3, #30
 800a43a:	d413      	bmi.n	800a464 <_printf_i+0x22c>
 800a43c:	68e0      	ldr	r0, [r4, #12]
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	4298      	cmp	r0, r3
 800a442:	bfb8      	it	lt
 800a444:	4618      	movlt	r0, r3
 800a446:	e7a6      	b.n	800a396 <_printf_i+0x15e>
 800a448:	2301      	movs	r3, #1
 800a44a:	4632      	mov	r2, r6
 800a44c:	4649      	mov	r1, r9
 800a44e:	4640      	mov	r0, r8
 800a450:	47d0      	blx	sl
 800a452:	3001      	adds	r0, #1
 800a454:	d09d      	beq.n	800a392 <_printf_i+0x15a>
 800a456:	3501      	adds	r5, #1
 800a458:	68e3      	ldr	r3, [r4, #12]
 800a45a:	9903      	ldr	r1, [sp, #12]
 800a45c:	1a5b      	subs	r3, r3, r1
 800a45e:	42ab      	cmp	r3, r5
 800a460:	dcf2      	bgt.n	800a448 <_printf_i+0x210>
 800a462:	e7eb      	b.n	800a43c <_printf_i+0x204>
 800a464:	2500      	movs	r5, #0
 800a466:	f104 0619 	add.w	r6, r4, #25
 800a46a:	e7f5      	b.n	800a458 <_printf_i+0x220>
 800a46c:	0800b01a 	.word	0x0800b01a
 800a470:	0800b02b 	.word	0x0800b02b

0800a474 <__sflush_r>:
 800a474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47c:	0716      	lsls	r6, r2, #28
 800a47e:	4605      	mov	r5, r0
 800a480:	460c      	mov	r4, r1
 800a482:	d454      	bmi.n	800a52e <__sflush_r+0xba>
 800a484:	684b      	ldr	r3, [r1, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	dc02      	bgt.n	800a490 <__sflush_r+0x1c>
 800a48a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dd48      	ble.n	800a522 <__sflush_r+0xae>
 800a490:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a492:	2e00      	cmp	r6, #0
 800a494:	d045      	beq.n	800a522 <__sflush_r+0xae>
 800a496:	2300      	movs	r3, #0
 800a498:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a49c:	682f      	ldr	r7, [r5, #0]
 800a49e:	6a21      	ldr	r1, [r4, #32]
 800a4a0:	602b      	str	r3, [r5, #0]
 800a4a2:	d030      	beq.n	800a506 <__sflush_r+0x92>
 800a4a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	0759      	lsls	r1, r3, #29
 800a4aa:	d505      	bpl.n	800a4b8 <__sflush_r+0x44>
 800a4ac:	6863      	ldr	r3, [r4, #4]
 800a4ae:	1ad2      	subs	r2, r2, r3
 800a4b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4b2:	b10b      	cbz	r3, 800a4b8 <__sflush_r+0x44>
 800a4b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4bc:	6a21      	ldr	r1, [r4, #32]
 800a4be:	4628      	mov	r0, r5
 800a4c0:	47b0      	blx	r6
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	d106      	bne.n	800a4d6 <__sflush_r+0x62>
 800a4c8:	6829      	ldr	r1, [r5, #0]
 800a4ca:	291d      	cmp	r1, #29
 800a4cc:	d82b      	bhi.n	800a526 <__sflush_r+0xb2>
 800a4ce:	4a2a      	ldr	r2, [pc, #168]	@ (800a578 <__sflush_r+0x104>)
 800a4d0:	40ca      	lsrs	r2, r1
 800a4d2:	07d6      	lsls	r6, r2, #31
 800a4d4:	d527      	bpl.n	800a526 <__sflush_r+0xb2>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	6062      	str	r2, [r4, #4]
 800a4da:	04d9      	lsls	r1, r3, #19
 800a4dc:	6922      	ldr	r2, [r4, #16]
 800a4de:	6022      	str	r2, [r4, #0]
 800a4e0:	d504      	bpl.n	800a4ec <__sflush_r+0x78>
 800a4e2:	1c42      	adds	r2, r0, #1
 800a4e4:	d101      	bne.n	800a4ea <__sflush_r+0x76>
 800a4e6:	682b      	ldr	r3, [r5, #0]
 800a4e8:	b903      	cbnz	r3, 800a4ec <__sflush_r+0x78>
 800a4ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ee:	602f      	str	r7, [r5, #0]
 800a4f0:	b1b9      	cbz	r1, 800a522 <__sflush_r+0xae>
 800a4f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4f6:	4299      	cmp	r1, r3
 800a4f8:	d002      	beq.n	800a500 <__sflush_r+0x8c>
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f7ff fa9c 	bl	8009a38 <_free_r>
 800a500:	2300      	movs	r3, #0
 800a502:	6363      	str	r3, [r4, #52]	@ 0x34
 800a504:	e00d      	b.n	800a522 <__sflush_r+0xae>
 800a506:	2301      	movs	r3, #1
 800a508:	4628      	mov	r0, r5
 800a50a:	47b0      	blx	r6
 800a50c:	4602      	mov	r2, r0
 800a50e:	1c50      	adds	r0, r2, #1
 800a510:	d1c9      	bne.n	800a4a6 <__sflush_r+0x32>
 800a512:	682b      	ldr	r3, [r5, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0c6      	beq.n	800a4a6 <__sflush_r+0x32>
 800a518:	2b1d      	cmp	r3, #29
 800a51a:	d001      	beq.n	800a520 <__sflush_r+0xac>
 800a51c:	2b16      	cmp	r3, #22
 800a51e:	d11e      	bne.n	800a55e <__sflush_r+0xea>
 800a520:	602f      	str	r7, [r5, #0]
 800a522:	2000      	movs	r0, #0
 800a524:	e022      	b.n	800a56c <__sflush_r+0xf8>
 800a526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	e01b      	b.n	800a566 <__sflush_r+0xf2>
 800a52e:	690f      	ldr	r7, [r1, #16]
 800a530:	2f00      	cmp	r7, #0
 800a532:	d0f6      	beq.n	800a522 <__sflush_r+0xae>
 800a534:	0793      	lsls	r3, r2, #30
 800a536:	680e      	ldr	r6, [r1, #0]
 800a538:	bf08      	it	eq
 800a53a:	694b      	ldreq	r3, [r1, #20]
 800a53c:	600f      	str	r7, [r1, #0]
 800a53e:	bf18      	it	ne
 800a540:	2300      	movne	r3, #0
 800a542:	eba6 0807 	sub.w	r8, r6, r7
 800a546:	608b      	str	r3, [r1, #8]
 800a548:	f1b8 0f00 	cmp.w	r8, #0
 800a54c:	dde9      	ble.n	800a522 <__sflush_r+0xae>
 800a54e:	6a21      	ldr	r1, [r4, #32]
 800a550:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a552:	4643      	mov	r3, r8
 800a554:	463a      	mov	r2, r7
 800a556:	4628      	mov	r0, r5
 800a558:	47b0      	blx	r6
 800a55a:	2800      	cmp	r0, #0
 800a55c:	dc08      	bgt.n	800a570 <__sflush_r+0xfc>
 800a55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a570:	4407      	add	r7, r0
 800a572:	eba8 0800 	sub.w	r8, r8, r0
 800a576:	e7e7      	b.n	800a548 <__sflush_r+0xd4>
 800a578:	20400001 	.word	0x20400001

0800a57c <_fflush_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	690b      	ldr	r3, [r1, #16]
 800a580:	4605      	mov	r5, r0
 800a582:	460c      	mov	r4, r1
 800a584:	b913      	cbnz	r3, 800a58c <_fflush_r+0x10>
 800a586:	2500      	movs	r5, #0
 800a588:	4628      	mov	r0, r5
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	b118      	cbz	r0, 800a596 <_fflush_r+0x1a>
 800a58e:	6a03      	ldr	r3, [r0, #32]
 800a590:	b90b      	cbnz	r3, 800a596 <_fflush_r+0x1a>
 800a592:	f7ff f827 	bl	80095e4 <__sinit>
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0f3      	beq.n	800a586 <_fflush_r+0xa>
 800a59e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5a0:	07d0      	lsls	r0, r2, #31
 800a5a2:	d404      	bmi.n	800a5ae <_fflush_r+0x32>
 800a5a4:	0599      	lsls	r1, r3, #22
 800a5a6:	d402      	bmi.n	800a5ae <_fflush_r+0x32>
 800a5a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5aa:	f7ff fa34 	bl	8009a16 <__retarget_lock_acquire_recursive>
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	f7ff ff5f 	bl	800a474 <__sflush_r>
 800a5b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5b8:	07da      	lsls	r2, r3, #31
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	d4e4      	bmi.n	800a588 <_fflush_r+0xc>
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	059b      	lsls	r3, r3, #22
 800a5c2:	d4e1      	bmi.n	800a588 <_fflush_r+0xc>
 800a5c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5c6:	f7ff fa27 	bl	8009a18 <__retarget_lock_release_recursive>
 800a5ca:	e7dd      	b.n	800a588 <_fflush_r+0xc>

0800a5cc <__swhatbuf_r>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d4:	2900      	cmp	r1, #0
 800a5d6:	b096      	sub	sp, #88	@ 0x58
 800a5d8:	4615      	mov	r5, r2
 800a5da:	461e      	mov	r6, r3
 800a5dc:	da0d      	bge.n	800a5fa <__swhatbuf_r+0x2e>
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5e4:	f04f 0100 	mov.w	r1, #0
 800a5e8:	bf14      	ite	ne
 800a5ea:	2340      	movne	r3, #64	@ 0x40
 800a5ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	6031      	str	r1, [r6, #0]
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	b016      	add	sp, #88	@ 0x58
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	466a      	mov	r2, sp
 800a5fc:	f000 f862 	bl	800a6c4 <_fstat_r>
 800a600:	2800      	cmp	r0, #0
 800a602:	dbec      	blt.n	800a5de <__swhatbuf_r+0x12>
 800a604:	9901      	ldr	r1, [sp, #4]
 800a606:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a60a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a60e:	4259      	negs	r1, r3
 800a610:	4159      	adcs	r1, r3
 800a612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a616:	e7eb      	b.n	800a5f0 <__swhatbuf_r+0x24>

0800a618 <__smakebuf_r>:
 800a618:	898b      	ldrh	r3, [r1, #12]
 800a61a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a61c:	079d      	lsls	r5, r3, #30
 800a61e:	4606      	mov	r6, r0
 800a620:	460c      	mov	r4, r1
 800a622:	d507      	bpl.n	800a634 <__smakebuf_r+0x1c>
 800a624:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	6123      	str	r3, [r4, #16]
 800a62c:	2301      	movs	r3, #1
 800a62e:	6163      	str	r3, [r4, #20]
 800a630:	b003      	add	sp, #12
 800a632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a634:	ab01      	add	r3, sp, #4
 800a636:	466a      	mov	r2, sp
 800a638:	f7ff ffc8 	bl	800a5cc <__swhatbuf_r>
 800a63c:	9f00      	ldr	r7, [sp, #0]
 800a63e:	4605      	mov	r5, r0
 800a640:	4639      	mov	r1, r7
 800a642:	4630      	mov	r0, r6
 800a644:	f7ff fa64 	bl	8009b10 <_malloc_r>
 800a648:	b948      	cbnz	r0, 800a65e <__smakebuf_r+0x46>
 800a64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a64e:	059a      	lsls	r2, r3, #22
 800a650:	d4ee      	bmi.n	800a630 <__smakebuf_r+0x18>
 800a652:	f023 0303 	bic.w	r3, r3, #3
 800a656:	f043 0302 	orr.w	r3, r3, #2
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	e7e2      	b.n	800a624 <__smakebuf_r+0xc>
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	6020      	str	r0, [r4, #0]
 800a662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a666:	81a3      	strh	r3, [r4, #12]
 800a668:	9b01      	ldr	r3, [sp, #4]
 800a66a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a66e:	b15b      	cbz	r3, 800a688 <__smakebuf_r+0x70>
 800a670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a674:	4630      	mov	r0, r6
 800a676:	f000 f837 	bl	800a6e8 <_isatty_r>
 800a67a:	b128      	cbz	r0, 800a688 <__smakebuf_r+0x70>
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	f023 0303 	bic.w	r3, r3, #3
 800a682:	f043 0301 	orr.w	r3, r3, #1
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	431d      	orrs	r5, r3
 800a68c:	81a5      	strh	r5, [r4, #12]
 800a68e:	e7cf      	b.n	800a630 <__smakebuf_r+0x18>

0800a690 <memmove>:
 800a690:	4288      	cmp	r0, r1
 800a692:	b510      	push	{r4, lr}
 800a694:	eb01 0402 	add.w	r4, r1, r2
 800a698:	d902      	bls.n	800a6a0 <memmove+0x10>
 800a69a:	4284      	cmp	r4, r0
 800a69c:	4623      	mov	r3, r4
 800a69e:	d807      	bhi.n	800a6b0 <memmove+0x20>
 800a6a0:	1e43      	subs	r3, r0, #1
 800a6a2:	42a1      	cmp	r1, r4
 800a6a4:	d008      	beq.n	800a6b8 <memmove+0x28>
 800a6a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ae:	e7f8      	b.n	800a6a2 <memmove+0x12>
 800a6b0:	4402      	add	r2, r0
 800a6b2:	4601      	mov	r1, r0
 800a6b4:	428a      	cmp	r2, r1
 800a6b6:	d100      	bne.n	800a6ba <memmove+0x2a>
 800a6b8:	bd10      	pop	{r4, pc}
 800a6ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6c2:	e7f7      	b.n	800a6b4 <memmove+0x24>

0800a6c4 <_fstat_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	@ (800a6e4 <_fstat_r+0x20>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	f7f6 ffb2 	bl	800163a <_fstat>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d102      	bne.n	800a6e0 <_fstat_r+0x1c>
 800a6da:	682b      	ldr	r3, [r5, #0]
 800a6dc:	b103      	cbz	r3, 800a6e0 <_fstat_r+0x1c>
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	bd38      	pop	{r3, r4, r5, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000acc 	.word	0x20000acc

0800a6e8 <_isatty_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d06      	ldr	r5, [pc, #24]	@ (800a704 <_isatty_r+0x1c>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f6 ffb1 	bl	800165a <_isatty>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_isatty_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_isatty_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	20000acc 	.word	0x20000acc

0800a708 <_sbrk_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d06      	ldr	r5, [pc, #24]	@ (800a724 <_sbrk_r+0x1c>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	f7f6 ffba 	bl	800168c <_sbrk>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_sbrk_r+0x1a>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_sbrk_r+0x1a>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	20000acc 	.word	0x20000acc

0800a728 <_realloc_r>:
 800a728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a72c:	4607      	mov	r7, r0
 800a72e:	4614      	mov	r4, r2
 800a730:	460d      	mov	r5, r1
 800a732:	b921      	cbnz	r1, 800a73e <_realloc_r+0x16>
 800a734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	4611      	mov	r1, r2
 800a73a:	f7ff b9e9 	b.w	8009b10 <_malloc_r>
 800a73e:	b92a      	cbnz	r2, 800a74c <_realloc_r+0x24>
 800a740:	f7ff f97a 	bl	8009a38 <_free_r>
 800a744:	4625      	mov	r5, r4
 800a746:	4628      	mov	r0, r5
 800a748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a74c:	f000 f81a 	bl	800a784 <_malloc_usable_size_r>
 800a750:	4284      	cmp	r4, r0
 800a752:	4606      	mov	r6, r0
 800a754:	d802      	bhi.n	800a75c <_realloc_r+0x34>
 800a756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a75a:	d8f4      	bhi.n	800a746 <_realloc_r+0x1e>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4638      	mov	r0, r7
 800a760:	f7ff f9d6 	bl	8009b10 <_malloc_r>
 800a764:	4680      	mov	r8, r0
 800a766:	b908      	cbnz	r0, 800a76c <_realloc_r+0x44>
 800a768:	4645      	mov	r5, r8
 800a76a:	e7ec      	b.n	800a746 <_realloc_r+0x1e>
 800a76c:	42b4      	cmp	r4, r6
 800a76e:	4622      	mov	r2, r4
 800a770:	4629      	mov	r1, r5
 800a772:	bf28      	it	cs
 800a774:	4632      	movcs	r2, r6
 800a776:	f7ff f950 	bl	8009a1a <memcpy>
 800a77a:	4629      	mov	r1, r5
 800a77c:	4638      	mov	r0, r7
 800a77e:	f7ff f95b 	bl	8009a38 <_free_r>
 800a782:	e7f1      	b.n	800a768 <_realloc_r+0x40>

0800a784 <_malloc_usable_size_r>:
 800a784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a788:	1f18      	subs	r0, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bfbc      	itt	lt
 800a78e:	580b      	ldrlt	r3, [r1, r0]
 800a790:	18c0      	addlt	r0, r0, r3
 800a792:	4770      	bx	lr

0800a794 <_init>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr

0800a7a0 <_fini>:
 800a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a2:	bf00      	nop
 800a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a6:	bc08      	pop	{r3}
 800a7a8:	469e      	mov	lr, r3
 800a7aa:	4770      	bx	lr
