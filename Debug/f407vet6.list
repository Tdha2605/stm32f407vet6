
f407vet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000353c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080036c4  080036c4  000046c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003720  08003720  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003728  08003728  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003728  08003728  00004728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800372c  0800372c  0000472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003730  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000006b8  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000720  20000720  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a246  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d18  00000000  00000000  0000f2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  00010ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ed  00000000  00000000  00011920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218af  00000000  00000000  0001200d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b384  00000000  00000000  000338bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5e9e  00000000  00000000  0003ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104ade  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a44  00000000  00000000  00104b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00107568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036ac 	.word	0x080036ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080036ac 	.word	0x080036ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN _write */
  for (int i = 0; i < len; i++)
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e00a      	b.n	800051c <_write+0x28>
  {
    SEGGER_RTT_Write(0, &ptr[i], 1);
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	68ba      	ldr	r2, [r7, #8]
 800050a:	4413      	add	r3, r2
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	2000      	movs	r0, #0
 8000512:	f002 fbbd 	bl	8002c90 <SEGGER_RTT_Write>
  for (int i = 0; i < len; i++)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	3301      	adds	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	dbf0      	blt.n	8000506 <_write+0x12>
  }
  return len;
 8000524:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END _write */
}
 8000526:	4618      	mov	r0, r3
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  printf("===== STM32F407 GPS Tracker =====\n");
 8000534:	4814      	ldr	r0, [pc, #80]	@ (8000588 <main+0x58>)
 8000536:	f002 fd17 	bl	8002f68 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fabd 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f827 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f8d7 	bl	80006f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000546:	f000 f881 	bl	800064c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800054a:	f000 f8a9 	bl	80006a0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2140      	movs	r1, #64	@ 0x40
 8000552:	480e      	ldr	r0, [pc, #56]	@ (800058c <main+0x5c>)
 8000554:	f002 fbcf 	bl	8002cf6 <ha_hal_gpio_set_level>
    ha_hal_hardware_delay(1000);
 8000558:	20e8      	movs	r0, #232	@ 0xe8
 800055a:	f002 fbbf 	bl	8002cdc <ha_hal_hardware_delay>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2140      	movs	r1, #64	@ 0x40
 8000562:	480a      	ldr	r0, [pc, #40]	@ (800058c <main+0x5c>)
 8000564:	f002 fbc7 	bl	8002cf6 <ha_hal_gpio_set_level>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_2_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2180      	movs	r1, #128	@ 0x80
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <main+0x5c>)
 800056e:	f002 fbc2 	bl	8002cf6 <ha_hal_gpio_set_level>
    ha_hal_hardware_delay(1000);
 8000572:	20e8      	movs	r0, #232	@ 0xe8
 8000574:	f002 fbb2 	bl	8002cdc <ha_hal_hardware_delay>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_2_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <main+0x5c>)
 800057e:	f002 fbba 	bl	8002cf6 <ha_hal_gpio_set_level>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_SET);
 8000582:	bf00      	nop
 8000584:	e7e3      	b.n	800054e <main+0x1e>
 8000586:	bf00      	nop
 8000588:	080036c4 	.word	0x080036c4
 800058c:	40020000 	.word	0x40020000

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	@ 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fdc2 	bl	8003128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <SystemClock_Config+0xb4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a21      	ldr	r2, [pc, #132]	@ (8000644 <SystemClock_Config+0xb4>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <SystemClock_Config+0xb4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <SystemClock_Config+0xb8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000648 <SystemClock_Config+0xb8>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <SystemClock_Config+0xb8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fe49 	bl	8001298 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800060c:	f000 f8a4 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8ac 	bl	8001788 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000636:	f000 f88f 	bl	8000758 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_USART1_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000684:	f001 fa60 	bl	8001b48 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f863 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000084 	.word	0x20000084
 800069c:	40011000 	.word	0x40011000

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 fa36 	bl	8001b48 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f839 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000cc 	.word	0x200000cc
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_GPIO_Init+0x5c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a0f      	ldr	r2, [pc, #60]	@ (8000750 <MX_GPIO_Init+0x5c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_GPIO_Init+0x5c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PIN_1_Pin|LED_PIN_2_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	21c0      	movs	r1, #192	@ 0xc0
 8000728:	480a      	ldr	r0, [pc, #40]	@ (8000754 <MX_GPIO_Init+0x60>)
 800072a:	f000 fd9b 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_PIN_1_Pin LED_PIN_2_Pin */
  GPIO_InitStruct.Pin = LED_PIN_1_Pin|LED_PIN_2_Pin;
 800072e:	23c0      	movs	r3, #192	@ 0xc0
 8000730:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_GPIO_Init+0x60>)
 8000744:	f000 fbf2 	bl	8000f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40020000 	.word	0x40020000

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <Error_Handler+0x8>

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000772:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <HAL_MspInit+0x4c>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000778:	6453      	str	r3, [r2, #68]	@ 0x44
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <HAL_MspInit+0x4c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	@ 0x40
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a36      	ldr	r2, [pc, #216]	@ (80008ac <HAL_UART_MspInit+0xf8>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12d      	bne.n	8000832 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b35      	ldr	r3, [pc, #212]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	4a34      	ldr	r2, [pc, #208]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e6:	4b32      	ldr	r3, [pc, #200]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a2d      	ldr	r2, [pc, #180]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800080e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000820:	2307      	movs	r3, #7
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4822      	ldr	r0, [pc, #136]	@ (80008b4 <HAL_UART_MspInit+0x100>)
 800082c:	f000 fb7e 	bl	8000f2c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000830:	e038      	b.n	80008a4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a20      	ldr	r2, [pc, #128]	@ (80008b8 <HAL_UART_MspInit+0x104>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d133      	bne.n	80008a4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	4a1a      	ldr	r2, [pc, #104]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 8000846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084a:	6413      	str	r3, [r2, #64]	@ 0x40
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000860:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	6313      	str	r3, [r2, #48]	@ 0x30
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_UART_MspInit+0xfc>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000874:	230c      	movs	r3, #12
 8000876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000884:	2307      	movs	r3, #7
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <HAL_UART_MspInit+0x100>)
 8000890:	f000 fb4c 	bl	8000f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2026      	movs	r0, #38	@ 0x26
 800089a:	f000 fa7e 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800089e:	2026      	movs	r0, #38	@ 0x26
 80008a0:	f000 fa97 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
}
 80008a4:	bf00      	nop
 80008a6:	3730      	adds	r7, #48	@ 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40011000 	.word	0x40011000
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40004400 	.word	0x40004400

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 f923 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <USART2_IRQHandler+0x10>)
 8000922:	f001 f961 	bl	8001be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000cc 	.word	0x200000cc

08000930 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e00a      	b.n	8000958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000942:	f3af 8000 	nop.w
 8000946:	4601      	mov	r1, r0
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60ba      	str	r2, [r7, #8]
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3301      	adds	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	dbf0      	blt.n	8000942 <_read+0x12>
  }

  return len;
 8000960:	687b      	ldr	r3, [r7, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_close>:
  }
  return len;
}

int _close(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000992:	605a      	str	r2, [r3, #4]
  return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <_isatty>:

int _isatty(int file)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f002 fbde 	bl	80031c4 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20020000 	.word	0x20020000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	20000114 	.word	0x20000114
 8000a3c:	20000720 	.word	0x20000720

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a68:	f7ff ffea 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	@ (8000aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f002 fb9d 	bl	80031d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fd4b 	bl	8000530 <main>
  bx  lr    
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000aa8:	08003730 	.word	0x08003730
  ldr r2, =_sbss
 8000aac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ab0:	20000720 	.word	0x20000720

08000ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <HAL_Init+0x40>)
 8000ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <HAL_Init+0x40>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	@ (8000af8 <HAL_Init+0x40>)
 8000ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f94f 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	200f      	movs	r0, #15
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fe3a 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023c00 	.word	0x40023c00

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f967 	bl	8000dee <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f000 f92f 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	@ (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000118 	.word	0x20000118

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000118 	.word	0x20000118

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_Delay+0x44>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffde 	bl	8000b84 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	@ (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	@ 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff29 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff3e 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff31 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b084      	sub	sp, #16
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff feb6 	bl	8000b84 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d008      	beq.n	8000e38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e052      	b.n	8000ede <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0216 	bic.w	r2, r2, #22
 8000e46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d103      	bne.n	8000e68 <HAL_DMA_Abort+0x62>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0208 	bic.w	r2, r2, #8
 8000e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0201 	bic.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e88:	e013      	b.n	8000eb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e8a:	f7ff fe7b 	bl	8000b84 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d90c      	bls.n	8000eb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e015      	b.n	8000ede <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1e4      	bne.n	8000e8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ec4:	223f      	movs	r2, #63	@ 0x3f
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d004      	beq.n	8000f04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e00c      	b.n	8000f1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2205      	movs	r2, #5
 8000f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0201 	bic.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	e16b      	b.n	8001220 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f040 815a 	bne.w	800121a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d005      	beq.n	8000f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d130      	bne.n	8000fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 0201 	and.w	r2, r3, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d017      	beq.n	800101c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	69b9      	ldr	r1, [r7, #24]
 800106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0203 	and.w	r2, r3, #3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80b4 	beq.w	800121a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b60      	ldr	r3, [pc, #384]	@ (8001238 <HAL_GPIO_Init+0x30c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001238 <HAL_GPIO_Init+0x30c>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001238 <HAL_GPIO_Init+0x30c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ce:	4a5b      	ldr	r2, [pc, #364]	@ (800123c <HAL_GPIO_Init+0x310>)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <HAL_GPIO_Init+0x314>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d02b      	beq.n	8001152 <HAL_GPIO_Init+0x226>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a51      	ldr	r2, [pc, #324]	@ (8001244 <HAL_GPIO_Init+0x318>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d025      	beq.n	800114e <HAL_GPIO_Init+0x222>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a50      	ldr	r2, [pc, #320]	@ (8001248 <HAL_GPIO_Init+0x31c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d01f      	beq.n	800114a <HAL_GPIO_Init+0x21e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4f      	ldr	r2, [pc, #316]	@ (800124c <HAL_GPIO_Init+0x320>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d019      	beq.n	8001146 <HAL_GPIO_Init+0x21a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4e      	ldr	r2, [pc, #312]	@ (8001250 <HAL_GPIO_Init+0x324>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0x216>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4d      	ldr	r2, [pc, #308]	@ (8001254 <HAL_GPIO_Init+0x328>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00d      	beq.n	800113e <HAL_GPIO_Init+0x212>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4c      	ldr	r2, [pc, #304]	@ (8001258 <HAL_GPIO_Init+0x32c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d007      	beq.n	800113a <HAL_GPIO_Init+0x20e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4b      	ldr	r2, [pc, #300]	@ (800125c <HAL_GPIO_Init+0x330>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d101      	bne.n	8001136 <HAL_GPIO_Init+0x20a>
 8001132:	2307      	movs	r3, #7
 8001134:	e00e      	b.n	8001154 <HAL_GPIO_Init+0x228>
 8001136:	2308      	movs	r3, #8
 8001138:	e00c      	b.n	8001154 <HAL_GPIO_Init+0x228>
 800113a:	2306      	movs	r3, #6
 800113c:	e00a      	b.n	8001154 <HAL_GPIO_Init+0x228>
 800113e:	2305      	movs	r3, #5
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x228>
 8001142:	2304      	movs	r3, #4
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x228>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x228>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x228>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x228>
 8001152:	2300      	movs	r3, #0
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001164:	4935      	ldr	r1, [pc, #212]	@ (800123c <HAL_GPIO_Init+0x310>)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001172:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <HAL_GPIO_Init+0x334>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001196:	4a32      	ldr	r2, [pc, #200]	@ (8001260 <HAL_GPIO_Init+0x334>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_GPIO_Init+0x334>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c0:	4a27      	ldr	r2, [pc, #156]	@ (8001260 <HAL_GPIO_Init+0x334>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <HAL_GPIO_Init+0x334>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <HAL_GPIO_Init+0x334>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <HAL_GPIO_Init+0x334>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001214:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <HAL_GPIO_Init+0x334>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3301      	adds	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	f67f ae90 	bls.w	8000f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40021400 	.word	0x40021400
 8001258:	40021800 	.word	0x40021800
 800125c:	40021c00 	.word	0x40021c00
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e267      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012b6:	4b88      	ldr	r3, [pc, #544]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b85      	ldr	r3, [pc, #532]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b82      	ldr	r3, [pc, #520]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012da:	d10b      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b7e      	ldr	r3, [pc, #504]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d157      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e242      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b76      	ldr	r3, [pc, #472]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a75      	ldr	r2, [pc, #468]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b70      	ldr	r3, [pc, #448]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6f      	ldr	r2, [pc, #444]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6c      	ldr	r2, [pc, #432]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 8001330:	4b69      	ldr	r3, [pc, #420]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a68      	ldr	r2, [pc, #416]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b66      	ldr	r3, [pc, #408]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a65      	ldr	r2, [pc, #404]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc18 	bl	8000b84 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fc14 	bl	8000b84 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	@ 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e207      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b5b      	ldr	r3, [pc, #364]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xc0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fc04 	bl	8000b84 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fc00 	bl	8000b84 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1f3      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b51      	ldr	r3, [pc, #324]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013ae:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c7      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b3b      	ldr	r3, [pc, #236]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4937      	ldr	r1, [pc, #220]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <HAL_RCC_OscConfig+0x244>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fbb9 	bl	8000b84 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fbb5 	bl	8000b84 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a8      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4925      	ldr	r1, [pc, #148]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <HAL_RCC_OscConfig+0x244>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fb98 	bl	8000b84 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fb94 	bl	8000b84 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e187      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d036      	beq.n	80014f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_RCC_OscConfig+0x248>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff fb78 	bl	8000b84 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fb74 	bl	8000b84 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e167      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
 80014b6:	e01b      	b.n	80014f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_RCC_OscConfig+0x248>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fb61 	bl	8000b84 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	e00e      	b.n	80014e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fb5d 	bl	8000b84 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d907      	bls.n	80014e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e150      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
 80014d8:	40023800 	.word	0x40023800
 80014dc:	42470000 	.word	0x42470000
 80014e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b88      	ldr	r3, [pc, #544]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ea      	bne.n	80014c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8097 	beq.w	800162c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b81      	ldr	r3, [pc, #516]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10f      	bne.n	800152e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b7d      	ldr	r3, [pc, #500]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	4a7c      	ldr	r2, [pc, #496]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	@ 0x40
 800151e:	4b7a      	ldr	r3, [pc, #488]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b77      	ldr	r3, [pc, #476]	@ (800170c <HAL_RCC_OscConfig+0x474>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4b74      	ldr	r3, [pc, #464]	@ (800170c <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a73      	ldr	r2, [pc, #460]	@ (800170c <HAL_RCC_OscConfig+0x474>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff fb1d 	bl	8000b84 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154e:	f7ff fb19 	bl	8000b84 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e10c      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	4b6a      	ldr	r3, [pc, #424]	@ (800170c <HAL_RCC_OscConfig+0x474>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x2ea>
 8001574:	4b64      	ldr	r3, [pc, #400]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001578:	4a63      	ldr	r2, [pc, #396]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x324>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x30c>
 800158a:	4b5f      	ldr	r3, [pc, #380]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158e:	4a5e      	ldr	r2, [pc, #376]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	@ 0x70
 8001596:	4b5c      	ldr	r3, [pc, #368]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159a:	4a5b      	ldr	r2, [pc, #364]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0x324>
 80015a4:	4b58      	ldr	r3, [pc, #352]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a8:	4a57      	ldr	r2, [pc, #348]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b0:	4b55      	ldr	r3, [pc, #340]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b4:	4a54      	ldr	r2, [pc, #336]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0304 	bic.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d015      	beq.n	80015f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fade 	bl	8000b84 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff fada 	bl	8000b84 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e0cb      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e2:	4b49      	ldr	r3, [pc, #292]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0ee      	beq.n	80015cc <HAL_RCC_OscConfig+0x334>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fac8 	bl	8000b84 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fac4 	bl	8000b84 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0b5      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160e:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ee      	bne.n	80015f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001620:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	4a38      	ldr	r2, [pc, #224]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a1 	beq.w	8001778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001636:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d05c      	beq.n	80016fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d141      	bne.n	80016ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164a:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <HAL_RCC_OscConfig+0x478>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fa98 	bl	8000b84 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fa94 	bl	8000b84 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e087      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001684:	019b      	lsls	r3, r3, #6
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	3b01      	subs	r3, #1
 8001690:	041b      	lsls	r3, r3, #16
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	491b      	ldr	r1, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCC_OscConfig+0x478>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fa6d 	bl	8000b84 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fa69 	bl	8000b84 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e05c      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x416>
 80016cc:	e054      	b.n	8001778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_RCC_OscConfig+0x478>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa56 	bl	8000b84 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fa52 	bl	8000b84 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e045      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x444>
 80016fa:	e03d      	b.n	8001778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e038      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000
 8001710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_RCC_OscConfig+0x4ec>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d028      	beq.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d121      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d11a      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001744:	4013      	ands	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800174a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174c:	4293      	cmp	r3, r2
 800174e:	d111      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	3b01      	subs	r3, #1
 800175e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0cc      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b68      	ldr	r3, [pc, #416]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d90c      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b65      	ldr	r3, [pc, #404]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b63      	ldr	r3, [pc, #396]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0b8      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017dc:	4b59      	ldr	r3, [pc, #356]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a58      	ldr	r2, [pc, #352]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f4:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a52      	ldr	r2, [pc, #328]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001800:	4b50      	ldr	r3, [pc, #320]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	494d      	ldr	r1, [pc, #308]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d044      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b47      	ldr	r3, [pc, #284]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d119      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e07f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d003      	beq.n	8001846 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	2b03      	cmp	r3, #3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b3f      	ldr	r3, [pc, #252]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e067      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001866:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f023 0203 	bic.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4934      	ldr	r1, [pc, #208]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001878:	f7ff f984 	bl	8000b84 <HAL_GetTick>
 800187c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	e00a      	b.n	8001896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff f980 	bl	8000b84 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e04f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 020c 	and.w	r2, r3, #12
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1eb      	bne.n	8001880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a8:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d20c      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e032      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4916      	ldr	r1, [pc, #88]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	490e      	ldr	r1, [pc, #56]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800190e:	f000 f821 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8001912:	4602      	mov	r2, r0
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	490a      	ldr	r1, [pc, #40]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	5ccb      	ldrb	r3, [r1, r3]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	4a09      	ldr	r2, [pc, #36]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_RCC_ClockConfig+0x1c8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f8e4 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00
 8001944:	40023800 	.word	0x40023800
 8001948:	080036f4 	.word	0x080036f4
 800194c:	20000000 	.word	0x20000000
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001958:	b090      	sub	sp, #64	@ 0x40
 800195a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800196c:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d00d      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x40>
 8001978:	2b08      	cmp	r3, #8
 800197a:	f200 80a1 	bhi.w	8001ac0 <HAL_RCC_GetSysClockFreq+0x16c>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x34>
 8001982:	2b04      	cmp	r3, #4
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x3a>
 8001986:	e09b      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b53      	ldr	r3, [pc, #332]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 800198a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800198c:	e09b      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800198e:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x188>)
 8001990:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001992:	e098      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001994:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d028      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	2200      	movs	r2, #0
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019bc:	2100      	movs	r1, #0
 80019be:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x188>)
 80019c0:	fb03 f201 	mul.w	r2, r3, r1
 80019c4:	2300      	movs	r3, #0
 80019c6:	fb00 f303 	mul.w	r3, r0, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	4a43      	ldr	r2, [pc, #268]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x188>)
 80019ce:	fba0 1202 	umull	r1, r2, r0, r2
 80019d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019d4:	460a      	mov	r2, r1
 80019d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019da:	4413      	add	r3, r2
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	2200      	movs	r2, #0
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	61fa      	str	r2, [r7, #28]
 80019e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019ee:	f7fe fbeb 	bl	80001c8 <__aeabi_uldivmod>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4613      	mov	r3, r2
 80019f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019fa:	e053      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fc:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	2200      	movs	r2, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	617a      	str	r2, [r7, #20]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a0e:	f04f 0b00 	mov.w	fp, #0
 8001a12:	4652      	mov	r2, sl
 8001a14:	465b      	mov	r3, fp
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	0159      	lsls	r1, r3, #5
 8001a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a24:	0150      	lsls	r0, r2, #5
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a2e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a46:	ebb2 0408 	subs.w	r4, r2, r8
 8001a4a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	00eb      	lsls	r3, r5, #3
 8001a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5c:	00e2      	lsls	r2, r4, #3
 8001a5e:	4614      	mov	r4, r2
 8001a60:	461d      	mov	r5, r3
 8001a62:	eb14 030a 	adds.w	r3, r4, sl
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	eb45 030b 	adc.w	r3, r5, fp
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	028b      	lsls	r3, r1, #10
 8001a7e:	4621      	mov	r1, r4
 8001a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a84:	4621      	mov	r1, r4
 8001a86:	028a      	lsls	r2, r1, #10
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	60fa      	str	r2, [r7, #12]
 8001a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a98:	f7fe fb96 	bl	80001c8 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ab4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001abe:	e002      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3740      	adds	r7, #64	@ 0x40
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	00f42400 	.word	0x00f42400
 8001adc:	017d7840 	.word	0x017d7840

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0a9b      	lsrs	r3, r3, #10
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4903      	ldr	r1, [pc, #12]	@ (8001b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08003704 	.word	0x08003704

08001b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b24:	f7ff ffdc 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0b5b      	lsrs	r3, r3, #13
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	@ (8001b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	08003704 	.word	0x08003704

08001b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e042      	b.n	8001be0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe fe20 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	@ 0x24
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fc99 	bl	80024c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0ba      	sub	sp, #232	@ 0xe8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10f      	bne.n	8001c4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_UART_IRQHandler+0x66>
 8001c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fb7e 	bl	8002348 <UART_Receive_IT>
      return;
 8001c4c:	e273      	b.n	8002136 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80de 	beq.w	8001e14 <HAL_UART_IRQHandler+0x22c>
 8001c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d106      	bne.n	8001c72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80d1 	beq.w	8001e14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_UART_IRQHandler+0xae>
 8001c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_UART_IRQHandler+0xd2>
 8001ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00b      	beq.n	8001cde <HAL_UART_IRQHandler+0xf6>
 8001cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d011      	beq.n	8001d0e <HAL_UART_IRQHandler+0x126>
 8001cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f043 0208 	orr.w	r2, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 820a 	beq.w	800212c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_UART_IRQHandler+0x14e>
 8001d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fb09 	bl	8002348 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d40:	2b40      	cmp	r3, #64	@ 0x40
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_UART_IRQHandler+0x17a>
 8001d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04f      	beq.n	8001e02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa14 	bl	8002190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d72:	2b40      	cmp	r3, #64	@ 0x40
 8001d74:	d141      	bne.n	8001dfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3314      	adds	r3, #20
 8001d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d84:	e853 3f00 	ldrex	r3, [r3]
 8001d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3314      	adds	r3, #20
 8001d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001da2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001da6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001db2:	e841 2300 	strex	r3, r2, [r1]
 8001db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1d9      	bne.n	8001d76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d013      	beq.n	8001df2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dce:	4a8a      	ldr	r2, [pc, #552]	@ (8001ff8 <HAL_UART_IRQHandler+0x410>)
 8001dd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f885 	bl	8000ee6 <HAL_DMA_Abort_IT>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d016      	beq.n	8001e10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dec:	4610      	mov	r0, r2
 8001dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df0:	e00e      	b.n	8001e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f9b6 	bl	8002164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df8:	e00a      	b.n	8001e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f9b2 	bl	8002164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e00:	e006      	b.n	8001e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9ae 	bl	8002164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001e0e:	e18d      	b.n	800212c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e10:	bf00      	nop
    return;
 8001e12:	e18b      	b.n	800212c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	f040 8167 	bne.w	80020ec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8160 	beq.w	80020ec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8001e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8159 	beq.w	80020ec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5a:	2b40      	cmp	r3, #64	@ 0x40
 8001e5c:	f040 80ce 	bne.w	8001ffc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a9 	beq.w	8001fc8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	f080 80a2 	bcs.w	8001fc8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e96:	f000 8088 	beq.w	8001faa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	330c      	adds	r3, #12
 8001ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea8:	e853 3f00 	ldrex	r3, [r3]
 8001eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001ec6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ece:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ed6:	e841 2300 	strex	r3, r2, [r1]
 8001eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1d9      	bne.n	8001e9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3314      	adds	r3, #20
 8001eec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ef0:	e853 3f00 	ldrex	r3, [r3]
 8001ef4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3314      	adds	r3, #20
 8001f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001f12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f16:	e841 2300 	strex	r3, r2, [r1]
 8001f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1e1      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3314      	adds	r3, #20
 8001f28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f2c:	e853 3f00 	ldrex	r3, [r3]
 8001f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3314      	adds	r3, #20
 8001f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001f4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f4e:	e841 2300 	strex	r3, r2, [r1]
 8001f52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1e3      	bne.n	8001f22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f72:	e853 3f00 	ldrex	r3, [r3]
 8001f76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f7a:	f023 0310 	bic.w	r3, r3, #16
 8001f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	330c      	adds	r3, #12
 8001f88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f94:	e841 2300 	strex	r3, r2, [r1]
 8001f98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e3      	bne.n	8001f68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe ff2e 	bl	8000e06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8d9 	bl	8002178 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8001fc6:	e0b3      	b.n	8002130 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001fcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 80ad 	bne.w	8002130 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fe0:	f040 80a6 	bne.w	8002130 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8c1 	bl	8002178 <HAL_UARTEx_RxEventCallback>
      return;
 8001ff6:	e09b      	b.n	8002130 <HAL_UART_IRQHandler+0x548>
 8001ff8:	08002257 	.word	0x08002257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002004:	b29b      	uxth	r3, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 808e 	beq.w	8002134 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8089 	beq.w	8002134 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800202c:	e853 3f00 	ldrex	r3, [r3]
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	330c      	adds	r3, #12
 8002042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002046:	647a      	str	r2, [r7, #68]	@ 0x44
 8002048:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800204c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800204e:	e841 2300 	strex	r3, r2, [r1]
 8002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e3      	bne.n	8002022 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3314      	adds	r3, #20
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	e853 3f00 	ldrex	r3, [r3]
 8002068:	623b      	str	r3, [r7, #32]
   return(result);
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3314      	adds	r3, #20
 800207a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800207e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002080:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002086:	e841 2300 	strex	r3, r2, [r1]
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800208c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e3      	bne.n	800205a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	330c      	adds	r3, #12
 80020a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	e853 3f00 	ldrex	r3, [r3]
 80020ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0310 	bic.w	r3, r3, #16
 80020b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80020c4:	61fa      	str	r2, [r7, #28]
 80020c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c8:	69b9      	ldr	r1, [r7, #24]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	e841 2300 	strex	r3, r2, [r1]
 80020d0:	617b      	str	r3, [r7, #20]
   return(result);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e3      	bne.n	80020a0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f847 	bl	8002178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020ea:	e023      	b.n	8002134 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_UART_IRQHandler+0x524>
 80020f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f8b7 	bl	8002278 <UART_Transmit_IT>
    return;
 800210a:	e014      	b.n	8002136 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800210c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <HAL_UART_IRQHandler+0x54e>
 8002118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800211c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8f7 	bl	8002318 <UART_EndTransmit_IT>
    return;
 800212a:	e004      	b.n	8002136 <HAL_UART_IRQHandler+0x54e>
    return;
 800212c:	bf00      	nop
 800212e:	e002      	b.n	8002136 <HAL_UART_IRQHandler+0x54e>
      return;
 8002130:	bf00      	nop
 8002132:	e000      	b.n	8002136 <HAL_UART_IRQHandler+0x54e>
      return;
 8002134:	bf00      	nop
  }
}
 8002136:	37e8      	adds	r7, #232	@ 0xe8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002190:	b480      	push	{r7}
 8002192:	b095      	sub	sp, #84	@ 0x54
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a2:	e853 3f00 	ldrex	r3, [r3]
 80021a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	330c      	adds	r3, #12
 80021b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80021ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80021c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e5      	bne.n	8002198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3314      	adds	r3, #20
 80021d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	e853 3f00 	ldrex	r3, [r3]
 80021da:	61fb      	str	r3, [r7, #28]
   return(result);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3314      	adds	r3, #20
 80021ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021f4:	e841 2300 	strex	r3, r2, [r1]
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e5      	bne.n	80021cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	2b01      	cmp	r3, #1
 8002206:	d119      	bne.n	800223c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	330c      	adds	r3, #12
 800220e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	e853 3f00 	ldrex	r3, [r3]
 8002216:	60bb      	str	r3, [r7, #8]
   return(result);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f023 0310 	bic.w	r3, r3, #16
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002228:	61ba      	str	r2, [r7, #24]
 800222a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222c:	6979      	ldr	r1, [r7, #20]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	e841 2300 	strex	r3, r2, [r1]
 8002234:	613b      	str	r3, [r7, #16]
   return(result);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e5      	bne.n	8002208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800224a:	bf00      	nop
 800224c:	3754      	adds	r7, #84	@ 0x54
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7ff ff7a 	bl	8002164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b21      	cmp	r3, #33	@ 0x21
 800228a:	d13e      	bne.n	800230a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002294:	d114      	bne.n	80022c0 <UART_Transmit_IT+0x48>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d110      	bne.n	80022c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	621a      	str	r2, [r3, #32]
 80022be:	e008      	b.n	80022d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	1c59      	adds	r1, r3, #1
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6211      	str	r1, [r2, #32]
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4619      	mov	r1, r3
 80022e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002304:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800230a:	2302      	movs	r3, #2
  }
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800232e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff feff 	bl	800213c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	@ 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b22      	cmp	r3, #34	@ 0x22
 8002362:	f040 80aa 	bne.w	80024ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800236e:	d115      	bne.n	800239c <UART_Receive_IT+0x54>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238a:	b29a      	uxth	r2, r3
 800238c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	1c9a      	adds	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28
 800239a:	e024      	b.n	80023e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023aa:	d007      	beq.n	80023bc <UART_Receive_IT+0x74>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <UART_Receive_IT+0x82>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e008      	b.n	80023dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4619      	mov	r1, r3
 80023f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d15d      	bne.n	80024b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0220 	bic.w	r2, r2, #32
 8002408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	2b01      	cmp	r3, #1
 800243e:	d135      	bne.n	80024ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	330c      	adds	r3, #12
 800244c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	e853 3f00 	ldrex	r3, [r3]
 8002454:	613b      	str	r3, [r7, #16]
   return(result);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f023 0310 	bic.w	r3, r3, #16
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002466:	623a      	str	r2, [r7, #32]
 8002468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246a:	69f9      	ldr	r1, [r7, #28]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	e841 2300 	strex	r3, r2, [r1]
 8002472:	61bb      	str	r3, [r7, #24]
   return(result);
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e5      	bne.n	8002446 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b10      	cmp	r3, #16
 8002486:	d10a      	bne.n	800249e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff fe67 	bl	8002178 <HAL_UARTEx_RxEventCallback>
 80024aa:	e002      	b.n	80024b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fe4f 	bl	8002150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e002      	b.n	80024bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3730      	adds	r7, #48	@ 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c8:	b0c0      	sub	sp, #256	@ 0x100
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e0:	68d9      	ldr	r1, [r3, #12]
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	ea40 0301 	orr.w	r3, r0, r1
 80024ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	431a      	orrs	r2, r3
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800251c:	f021 010c 	bic.w	r1, r1, #12
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800252a:	430b      	orrs	r3, r1
 800252c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800252e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800253a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253e:	6999      	ldr	r1, [r3, #24]
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	ea40 0301 	orr.w	r3, r0, r1
 800254a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b8f      	ldr	r3, [pc, #572]	@ (8002790 <UART_SetConfig+0x2cc>)
 8002554:	429a      	cmp	r2, r3
 8002556:	d005      	beq.n	8002564 <UART_SetConfig+0xa0>
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b8d      	ldr	r3, [pc, #564]	@ (8002794 <UART_SetConfig+0x2d0>)
 8002560:	429a      	cmp	r2, r3
 8002562:	d104      	bne.n	800256e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002564:	f7ff fadc 	bl	8001b20 <HAL_RCC_GetPCLK2Freq>
 8002568:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800256c:	e003      	b.n	8002576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800256e:	f7ff fac3 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8002572:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002580:	f040 810c 	bne.w	800279c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002588:	2200      	movs	r2, #0
 800258a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800258e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002596:	4622      	mov	r2, r4
 8002598:	462b      	mov	r3, r5
 800259a:	1891      	adds	r1, r2, r2
 800259c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800259e:	415b      	adcs	r3, r3
 80025a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025a6:	4621      	mov	r1, r4
 80025a8:	eb12 0801 	adds.w	r8, r2, r1
 80025ac:	4629      	mov	r1, r5
 80025ae:	eb43 0901 	adc.w	r9, r3, r1
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c6:	4690      	mov	r8, r2
 80025c8:	4699      	mov	r9, r3
 80025ca:	4623      	mov	r3, r4
 80025cc:	eb18 0303 	adds.w	r3, r8, r3
 80025d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025d4:	462b      	mov	r3, r5
 80025d6:	eb49 0303 	adc.w	r3, r9, r3
 80025da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025f2:	460b      	mov	r3, r1
 80025f4:	18db      	adds	r3, r3, r3
 80025f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80025f8:	4613      	mov	r3, r2
 80025fa:	eb42 0303 	adc.w	r3, r2, r3
 80025fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002608:	f7fd fdde 	bl	80001c8 <__aeabi_uldivmod>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4b61      	ldr	r3, [pc, #388]	@ (8002798 <UART_SetConfig+0x2d4>)
 8002612:	fba3 2302 	umull	r2, r3, r3, r2
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	011c      	lsls	r4, r3, #4
 800261a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800261e:	2200      	movs	r2, #0
 8002620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002624:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800262c:	4642      	mov	r2, r8
 800262e:	464b      	mov	r3, r9
 8002630:	1891      	adds	r1, r2, r2
 8002632:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002634:	415b      	adcs	r3, r3
 8002636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800263c:	4641      	mov	r1, r8
 800263e:	eb12 0a01 	adds.w	sl, r2, r1
 8002642:	4649      	mov	r1, r9
 8002644:	eb43 0b01 	adc.w	fp, r3, r1
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800265c:	4692      	mov	sl, r2
 800265e:	469b      	mov	fp, r3
 8002660:	4643      	mov	r3, r8
 8002662:	eb1a 0303 	adds.w	r3, sl, r3
 8002666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800266a:	464b      	mov	r3, r9
 800266c:	eb4b 0303 	adc.w	r3, fp, r3
 8002670:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002680:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002688:	460b      	mov	r3, r1
 800268a:	18db      	adds	r3, r3, r3
 800268c:	643b      	str	r3, [r7, #64]	@ 0x40
 800268e:	4613      	mov	r3, r2
 8002690:	eb42 0303 	adc.w	r3, r2, r3
 8002694:	647b      	str	r3, [r7, #68]	@ 0x44
 8002696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800269a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800269e:	f7fd fd93 	bl	80001c8 <__aeabi_uldivmod>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4611      	mov	r1, r2
 80026a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <UART_SetConfig+0x2d4>)
 80026aa:	fba3 2301 	umull	r2, r3, r3, r1
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2264      	movs	r2, #100	@ 0x64
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	1acb      	subs	r3, r1, r3
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026be:	4b36      	ldr	r3, [pc, #216]	@ (8002798 <UART_SetConfig+0x2d4>)
 80026c0:	fba3 2302 	umull	r2, r3, r3, r2
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026cc:	441c      	add	r4, r3
 80026ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026d2:	2200      	movs	r2, #0
 80026d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026e0:	4642      	mov	r2, r8
 80026e2:	464b      	mov	r3, r9
 80026e4:	1891      	adds	r1, r2, r2
 80026e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026e8:	415b      	adcs	r3, r3
 80026ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026f0:	4641      	mov	r1, r8
 80026f2:	1851      	adds	r1, r2, r1
 80026f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80026f6:	4649      	mov	r1, r9
 80026f8:	414b      	adcs	r3, r1
 80026fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002708:	4659      	mov	r1, fp
 800270a:	00cb      	lsls	r3, r1, #3
 800270c:	4651      	mov	r1, sl
 800270e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002712:	4651      	mov	r1, sl
 8002714:	00ca      	lsls	r2, r1, #3
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	4603      	mov	r3, r0
 800271c:	4642      	mov	r2, r8
 800271e:	189b      	adds	r3, r3, r2
 8002720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002724:	464b      	mov	r3, r9
 8002726:	460a      	mov	r2, r1
 8002728:	eb42 0303 	adc.w	r3, r2, r3
 800272c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800273c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002744:	460b      	mov	r3, r1
 8002746:	18db      	adds	r3, r3, r3
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800274a:	4613      	mov	r3, r2
 800274c:	eb42 0303 	adc.w	r3, r2, r3
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800275a:	f7fd fd35 	bl	80001c8 <__aeabi_uldivmod>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <UART_SetConfig+0x2d4>)
 8002764:	fba3 1302 	umull	r1, r3, r3, r2
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	2164      	movs	r1, #100	@ 0x64
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	3332      	adds	r3, #50	@ 0x32
 8002776:	4a08      	ldr	r2, [pc, #32]	@ (8002798 <UART_SetConfig+0x2d4>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	f003 0207 	and.w	r2, r3, #7
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4422      	add	r2, r4
 800278a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800278c:	e106      	b.n	800299c <UART_SetConfig+0x4d8>
 800278e:	bf00      	nop
 8002790:	40011000 	.word	0x40011000
 8002794:	40011400 	.word	0x40011400
 8002798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800279c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027ae:	4642      	mov	r2, r8
 80027b0:	464b      	mov	r3, r9
 80027b2:	1891      	adds	r1, r2, r2
 80027b4:	6239      	str	r1, [r7, #32]
 80027b6:	415b      	adcs	r3, r3
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027be:	4641      	mov	r1, r8
 80027c0:	1854      	adds	r4, r2, r1
 80027c2:	4649      	mov	r1, r9
 80027c4:	eb43 0501 	adc.w	r5, r3, r1
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	00eb      	lsls	r3, r5, #3
 80027d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d6:	00e2      	lsls	r2, r4, #3
 80027d8:	4614      	mov	r4, r2
 80027da:	461d      	mov	r5, r3
 80027dc:	4643      	mov	r3, r8
 80027de:	18e3      	adds	r3, r4, r3
 80027e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027e4:	464b      	mov	r3, r9
 80027e6:	eb45 0303 	adc.w	r3, r5, r3
 80027ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800280a:	4629      	mov	r1, r5
 800280c:	008b      	lsls	r3, r1, #2
 800280e:	4621      	mov	r1, r4
 8002810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002814:	4621      	mov	r1, r4
 8002816:	008a      	lsls	r2, r1, #2
 8002818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800281c:	f7fd fcd4 	bl	80001c8 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4b60      	ldr	r3, [pc, #384]	@ (80029a8 <UART_SetConfig+0x4e4>)
 8002826:	fba3 2302 	umull	r2, r3, r3, r2
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	011c      	lsls	r4, r3, #4
 800282e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002838:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800283c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002840:	4642      	mov	r2, r8
 8002842:	464b      	mov	r3, r9
 8002844:	1891      	adds	r1, r2, r2
 8002846:	61b9      	str	r1, [r7, #24]
 8002848:	415b      	adcs	r3, r3
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002850:	4641      	mov	r1, r8
 8002852:	1851      	adds	r1, r2, r1
 8002854:	6139      	str	r1, [r7, #16]
 8002856:	4649      	mov	r1, r9
 8002858:	414b      	adcs	r3, r1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002868:	4659      	mov	r1, fp
 800286a:	00cb      	lsls	r3, r1, #3
 800286c:	4651      	mov	r1, sl
 800286e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002872:	4651      	mov	r1, sl
 8002874:	00ca      	lsls	r2, r1, #3
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	4603      	mov	r3, r0
 800287c:	4642      	mov	r2, r8
 800287e:	189b      	adds	r3, r3, r2
 8002880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002884:	464b      	mov	r3, r9
 8002886:	460a      	mov	r2, r1
 8002888:	eb42 0303 	adc.w	r3, r2, r3
 800288c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800289a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028a8:	4649      	mov	r1, r9
 80028aa:	008b      	lsls	r3, r1, #2
 80028ac:	4641      	mov	r1, r8
 80028ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028b2:	4641      	mov	r1, r8
 80028b4:	008a      	lsls	r2, r1, #2
 80028b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80028ba:	f7fd fc85 	bl	80001c8 <__aeabi_uldivmod>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	4b38      	ldr	r3, [pc, #224]	@ (80029a8 <UART_SetConfig+0x4e4>)
 80028c6:	fba3 2301 	umull	r2, r3, r3, r1
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2264      	movs	r2, #100	@ 0x64
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	1acb      	subs	r3, r1, r3
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	3332      	adds	r3, #50	@ 0x32
 80028d8:	4a33      	ldr	r2, [pc, #204]	@ (80029a8 <UART_SetConfig+0x4e4>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028e4:	441c      	add	r4, r3
 80028e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ea:	2200      	movs	r2, #0
 80028ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80028ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80028f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028f4:	4642      	mov	r2, r8
 80028f6:	464b      	mov	r3, r9
 80028f8:	1891      	adds	r1, r2, r2
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	415b      	adcs	r3, r3
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002904:	4641      	mov	r1, r8
 8002906:	1851      	adds	r1, r2, r1
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	4649      	mov	r1, r9
 800290c:	414b      	adcs	r3, r1
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800291c:	4659      	mov	r1, fp
 800291e:	00cb      	lsls	r3, r1, #3
 8002920:	4651      	mov	r1, sl
 8002922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002926:	4651      	mov	r1, sl
 8002928:	00ca      	lsls	r2, r1, #3
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	4603      	mov	r3, r0
 8002930:	4642      	mov	r2, r8
 8002932:	189b      	adds	r3, r3, r2
 8002934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002936:	464b      	mov	r3, r9
 8002938:	460a      	mov	r2, r1
 800293a:	eb42 0303 	adc.w	r3, r2, r3
 800293e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	663b      	str	r3, [r7, #96]	@ 0x60
 800294a:	667a      	str	r2, [r7, #100]	@ 0x64
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002958:	4649      	mov	r1, r9
 800295a:	008b      	lsls	r3, r1, #2
 800295c:	4641      	mov	r1, r8
 800295e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002962:	4641      	mov	r1, r8
 8002964:	008a      	lsls	r2, r1, #2
 8002966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800296a:	f7fd fc2d 	bl	80001c8 <__aeabi_uldivmod>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <UART_SetConfig+0x4e4>)
 8002974:	fba3 1302 	umull	r1, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	2164      	movs	r1, #100	@ 0x64
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	3332      	adds	r3, #50	@ 0x32
 8002986:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <UART_SetConfig+0x4e4>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4422      	add	r2, r4
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029a2:	46bd      	mov	sp, r7
 80029a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a8:	51eb851f 	.word	0x51eb851f

080029ac <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80029b2:	4b26      	ldr	r3, [pc, #152]	@ (8002a4c <_DoInit+0xa0>)
 80029b4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80029b6:	22a8      	movs	r2, #168	@ 0xa8
 80029b8:	2100      	movs	r1, #0
 80029ba:	6838      	ldr	r0, [r7, #0]
 80029bc:	f000 fbb4 	bl	8003128 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2203      	movs	r2, #3
 80029c4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2203      	movs	r2, #3
 80029ca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4a20      	ldr	r2, [pc, #128]	@ (8002a50 <_DoInit+0xa4>)
 80029d0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a54 <_DoInit+0xa8>)
 80029d6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029de:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2200      	movs	r2, #0
 80029f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	4a16      	ldr	r2, [pc, #88]	@ (8002a50 <_DoInit+0xa4>)
 80029f6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4a17      	ldr	r2, [pc, #92]	@ (8002a58 <_DoInit+0xac>)
 80029fc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2210      	movs	r2, #16
 8002a02:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002a16:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	e00c      	b.n	8002a3a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f1c3 030f 	rsb	r3, r3, #15
 8002a26:	4a0d      	ldr	r2, [pc, #52]	@ (8002a5c <_DoInit+0xb0>)
 8002a28:	5cd1      	ldrb	r1, [r2, r3]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	460a      	mov	r2, r1
 8002a32:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3301      	adds	r3, #1
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d9ef      	bls.n	8002a20 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002a40:	f3bf 8f5f 	dmb	sy
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	2000011c 	.word	0x2000011c
 8002a50:	080036e8 	.word	0x080036e8
 8002a54:	200001c4 	.word	0x200001c4
 8002a58:	200005c4 	.word	0x200005c4
 8002a5c:	0800370c 	.word	0x0800370c

08002a60 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d905      	bls.n	8002a90 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a8e:	e007      	b.n	8002aa0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69b9      	ldr	r1, [r7, #24]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	1acb      	subs	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	bf28      	it	cs
 8002aae:	4613      	movcs	r3, r2
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	bf28      	it	cs
 8002aba:	4613      	movcs	r3, r2
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	6978      	ldr	r0, [r7, #20]
 8002ace:	f000 fba6 	bl	800321e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002ad2:	6a3a      	ldr	r2, [r7, #32]
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	4413      	add	r3, r2
 8002ad8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	4413      	add	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	4413      	add	r3, r2
 8002af0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d101      	bne.n	8002b00 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002b00:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1b2      	bne.n	8002a76 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002b10:	6a3b      	ldr	r3, [r7, #32]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3728      	adds	r7, #40	@ 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b088      	sub	sp, #32
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d911      	bls.n	8002b62 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	6938      	ldr	r0, [r7, #16]
 8002b4e:	f000 fb66 	bl	800321e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002b52:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002b60:	e01f      	b.n	8002ba2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	6938      	ldr	r0, [r7, #16]
 8002b76:	f000 fb52 	bl	800321e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4619      	mov	r1, r3
 8002b92:	6938      	ldr	r0, [r7, #16]
 8002b94:	f000 fb43 	bl	800321e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002b98:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	60da      	str	r2, [r3, #12]
}
 8002ba2:	bf00      	nop
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002baa:	b480      	push	{r7}
 8002bac:	b087      	sub	sp, #28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d808      	bhi.n	8002bd8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad2      	subs	r2, r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e004      	b.n	8002be2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002be2:	697b      	ldr	r3, [r7, #20]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	371c      	adds	r7, #28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <SEGGER_RTT_WriteNoLock+0x9c>)
 8002c0e:	4413      	add	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d029      	beq.n	8002c6e <SEGGER_RTT_WriteNoLock+0x7e>
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d82e      	bhi.n	8002c7c <SEGGER_RTT_WriteNoLock+0x8c>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <SEGGER_RTT_WriteNoLock+0x38>
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d013      	beq.n	8002c4e <SEGGER_RTT_WriteNoLock+0x5e>
 8002c26:	e029      	b.n	8002c7c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002c28:	6978      	ldr	r0, [r7, #20]
 8002c2a:	f7ff ffbe 	bl	8002baa <_GetAvailWriteSpace>
 8002c2e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d202      	bcs.n	8002c3e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002c3c:	e021      	b.n	8002c82 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	69b9      	ldr	r1, [r7, #24]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff67 	bl	8002b1a <_WriteNoCheck>
    break;
 8002c4c:	e019      	b.n	8002c82 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ffab 	bl	8002baa <_GetAvailWriteSpace>
 8002c54:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	bf28      	it	cs
 8002c5e:	4613      	movcs	r3, r2
 8002c60:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	69b9      	ldr	r1, [r7, #24]
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff ff57 	bl	8002b1a <_WriteNoCheck>
    break;
 8002c6c:	e009      	b.n	8002c82 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	69b9      	ldr	r1, [r7, #24]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff fef4 	bl	8002a60 <_WriteBlocking>
 8002c78:	61f8      	str	r0, [r7, #28]
    break;
 8002c7a:	e002      	b.n	8002c82 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
    break;
 8002c80:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002c82:	69fb      	ldr	r3, [r7, #28]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000011c 	.word	0x2000011c

08002c90 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <SEGGER_RTT_Write+0x48>)
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b53      	cmp	r3, #83	@ 0x53
 8002ca8:	d001      	beq.n	8002cae <SEGGER_RTT_Write+0x1e>
 8002caa:	f7ff fe7f 	bl	80029ac <_DoInit>
  SEGGER_RTT_LOCK();
 8002cae:	f3ef 8311 	mrs	r3, BASEPRI
 8002cb2:	f04f 0120 	mov.w	r1, #32
 8002cb6:	f381 8811 	msr	BASEPRI, r1
 8002cba:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff ff95 	bl	8002bf0 <SEGGER_RTT_WriteNoLock>
 8002cc6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8002cce:	697b      	ldr	r3, [r7, #20]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2000011c 	.word	0x2000011c

08002cdc <ha_hal_hardware_delay>:
#include "ha_hal_delay.h"

void ha_hal_hardware_delay(uint8_t _ms)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(_ms);
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd ff57 	bl	8000b9c <HAL_Delay>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <ha_hal_gpio_set_level>:
#include "ha_hal_gpio.h"

uint8_t ha_hal_gpio_set_level(GPIO_TypeDef *_gpio_type, uint16_t _gpio_number, GPIO_PinState _gpio_level)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]
 8002d02:	4613      	mov	r3, r2
 8002d04:	707b      	strb	r3, [r7, #1]
    if (_gpio_type == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <ha_hal_gpio_set_level+0x1a>
    {
        return 0; // Error: GPIO type is NULL
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e00e      	b.n	8002d2e <ha_hal_gpio_set_level+0x38>
    }
    if (_gpio_level != GPIO_PIN_SET && _gpio_level != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d004      	beq.n	8002d20 <ha_hal_gpio_set_level+0x2a>
 8002d16:	787b      	ldrb	r3, [r7, #1]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <ha_hal_gpio_set_level+0x2a>
    {
        return 0; // Error: Invalid GPIO level
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e006      	b.n	8002d2e <ha_hal_gpio_set_level+0x38>
    }
    HAL_GPIO_WritePin(_gpio_type, _gpio_number, _gpio_level);
 8002d20:	787a      	ldrb	r2, [r7, #1]
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fa9c 	bl	8001264 <HAL_GPIO_WritePin>
    return 1; // Success
 8002d2c:	2301      	movs	r3, #1
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <std>:
 8002d38:	2300      	movs	r3, #0
 8002d3a:	b510      	push	{r4, lr}
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8002d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d46:	6083      	str	r3, [r0, #8]
 8002d48:	8181      	strh	r1, [r0, #12]
 8002d4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d4c:	81c2      	strh	r2, [r0, #14]
 8002d4e:	6183      	str	r3, [r0, #24]
 8002d50:	4619      	mov	r1, r3
 8002d52:	2208      	movs	r2, #8
 8002d54:	305c      	adds	r0, #92	@ 0x5c
 8002d56:	f000 f9e7 	bl	8003128 <memset>
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <std+0x58>)
 8002d5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <std+0x5c>)
 8002d60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <std+0x60>)
 8002d64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <std+0x64>)
 8002d68:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <std+0x68>)
 8002d6c:	6224      	str	r4, [r4, #32]
 8002d6e:	429c      	cmp	r4, r3
 8002d70:	d006      	beq.n	8002d80 <std+0x48>
 8002d72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d76:	4294      	cmp	r4, r2
 8002d78:	d002      	beq.n	8002d80 <std+0x48>
 8002d7a:	33d0      	adds	r3, #208	@ 0xd0
 8002d7c:	429c      	cmp	r4, r3
 8002d7e:	d105      	bne.n	8002d8c <std+0x54>
 8002d80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d88:	f000 ba46 	b.w	8003218 <__retarget_lock_init_recursive>
 8002d8c:	bd10      	pop	{r4, pc}
 8002d8e:	bf00      	nop
 8002d90:	08002f79 	.word	0x08002f79
 8002d94:	08002f9b 	.word	0x08002f9b
 8002d98:	08002fd3 	.word	0x08002fd3
 8002d9c:	08002ff7 	.word	0x08002ff7
 8002da0:	200005d4 	.word	0x200005d4

08002da4 <stdio_exit_handler>:
 8002da4:	4a02      	ldr	r2, [pc, #8]	@ (8002db0 <stdio_exit_handler+0xc>)
 8002da6:	4903      	ldr	r1, [pc, #12]	@ (8002db4 <stdio_exit_handler+0x10>)
 8002da8:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <stdio_exit_handler+0x14>)
 8002daa:	f000 b869 	b.w	8002e80 <_fwalk_sglue>
 8002dae:	bf00      	nop
 8002db0:	2000000c 	.word	0x2000000c
 8002db4:	08003535 	.word	0x08003535
 8002db8:	2000001c 	.word	0x2000001c

08002dbc <cleanup_stdio>:
 8002dbc:	6841      	ldr	r1, [r0, #4]
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <cleanup_stdio+0x34>)
 8002dc0:	4299      	cmp	r1, r3
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	d001      	beq.n	8002dcc <cleanup_stdio+0x10>
 8002dc8:	f000 fbb4 	bl	8003534 <_fflush_r>
 8002dcc:	68a1      	ldr	r1, [r4, #8]
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <cleanup_stdio+0x38>)
 8002dd0:	4299      	cmp	r1, r3
 8002dd2:	d002      	beq.n	8002dda <cleanup_stdio+0x1e>
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f000 fbad 	bl	8003534 <_fflush_r>
 8002dda:	68e1      	ldr	r1, [r4, #12]
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <cleanup_stdio+0x3c>)
 8002dde:	4299      	cmp	r1, r3
 8002de0:	d004      	beq.n	8002dec <cleanup_stdio+0x30>
 8002de2:	4620      	mov	r0, r4
 8002de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de8:	f000 bba4 	b.w	8003534 <_fflush_r>
 8002dec:	bd10      	pop	{r4, pc}
 8002dee:	bf00      	nop
 8002df0:	200005d4 	.word	0x200005d4
 8002df4:	2000063c 	.word	0x2000063c
 8002df8:	200006a4 	.word	0x200006a4

08002dfc <global_stdio_init.part.0>:
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <global_stdio_init.part.0+0x30>)
 8002e00:	4c0b      	ldr	r4, [pc, #44]	@ (8002e30 <global_stdio_init.part.0+0x34>)
 8002e02:	4a0c      	ldr	r2, [pc, #48]	@ (8002e34 <global_stdio_init.part.0+0x38>)
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	4620      	mov	r0, r4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	f7ff ff94 	bl	8002d38 <std>
 8002e10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e14:	2201      	movs	r2, #1
 8002e16:	2109      	movs	r1, #9
 8002e18:	f7ff ff8e 	bl	8002d38 <std>
 8002e1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e20:	2202      	movs	r2, #2
 8002e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e26:	2112      	movs	r1, #18
 8002e28:	f7ff bf86 	b.w	8002d38 <std>
 8002e2c:	2000070c 	.word	0x2000070c
 8002e30:	200005d4 	.word	0x200005d4
 8002e34:	08002da5 	.word	0x08002da5

08002e38 <__sfp_lock_acquire>:
 8002e38:	4801      	ldr	r0, [pc, #4]	@ (8002e40 <__sfp_lock_acquire+0x8>)
 8002e3a:	f000 b9ee 	b.w	800321a <__retarget_lock_acquire_recursive>
 8002e3e:	bf00      	nop
 8002e40:	20000715 	.word	0x20000715

08002e44 <__sfp_lock_release>:
 8002e44:	4801      	ldr	r0, [pc, #4]	@ (8002e4c <__sfp_lock_release+0x8>)
 8002e46:	f000 b9e9 	b.w	800321c <__retarget_lock_release_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	20000715 	.word	0x20000715

08002e50 <__sinit>:
 8002e50:	b510      	push	{r4, lr}
 8002e52:	4604      	mov	r4, r0
 8002e54:	f7ff fff0 	bl	8002e38 <__sfp_lock_acquire>
 8002e58:	6a23      	ldr	r3, [r4, #32]
 8002e5a:	b11b      	cbz	r3, 8002e64 <__sinit+0x14>
 8002e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e60:	f7ff bff0 	b.w	8002e44 <__sfp_lock_release>
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <__sinit+0x28>)
 8002e66:	6223      	str	r3, [r4, #32]
 8002e68:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <__sinit+0x2c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f5      	bne.n	8002e5c <__sinit+0xc>
 8002e70:	f7ff ffc4 	bl	8002dfc <global_stdio_init.part.0>
 8002e74:	e7f2      	b.n	8002e5c <__sinit+0xc>
 8002e76:	bf00      	nop
 8002e78:	08002dbd 	.word	0x08002dbd
 8002e7c:	2000070c 	.word	0x2000070c

08002e80 <_fwalk_sglue>:
 8002e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e84:	4607      	mov	r7, r0
 8002e86:	4688      	mov	r8, r1
 8002e88:	4614      	mov	r4, r2
 8002e8a:	2600      	movs	r6, #0
 8002e8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e90:	f1b9 0901 	subs.w	r9, r9, #1
 8002e94:	d505      	bpl.n	8002ea2 <_fwalk_sglue+0x22>
 8002e96:	6824      	ldr	r4, [r4, #0]
 8002e98:	2c00      	cmp	r4, #0
 8002e9a:	d1f7      	bne.n	8002e8c <_fwalk_sglue+0xc>
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ea2:	89ab      	ldrh	r3, [r5, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d907      	bls.n	8002eb8 <_fwalk_sglue+0x38>
 8002ea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eac:	3301      	adds	r3, #1
 8002eae:	d003      	beq.n	8002eb8 <_fwalk_sglue+0x38>
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	47c0      	blx	r8
 8002eb6:	4306      	orrs	r6, r0
 8002eb8:	3568      	adds	r5, #104	@ 0x68
 8002eba:	e7e9      	b.n	8002e90 <_fwalk_sglue+0x10>

08002ebc <_puts_r>:
 8002ebc:	6a03      	ldr	r3, [r0, #32]
 8002ebe:	b570      	push	{r4, r5, r6, lr}
 8002ec0:	6884      	ldr	r4, [r0, #8]
 8002ec2:	4605      	mov	r5, r0
 8002ec4:	460e      	mov	r6, r1
 8002ec6:	b90b      	cbnz	r3, 8002ecc <_puts_r+0x10>
 8002ec8:	f7ff ffc2 	bl	8002e50 <__sinit>
 8002ecc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ece:	07db      	lsls	r3, r3, #31
 8002ed0:	d405      	bmi.n	8002ede <_puts_r+0x22>
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	0598      	lsls	r0, r3, #22
 8002ed6:	d402      	bmi.n	8002ede <_puts_r+0x22>
 8002ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002eda:	f000 f99e 	bl	800321a <__retarget_lock_acquire_recursive>
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	0719      	lsls	r1, r3, #28
 8002ee2:	d502      	bpl.n	8002eea <_puts_r+0x2e>
 8002ee4:	6923      	ldr	r3, [r4, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d135      	bne.n	8002f56 <_puts_r+0x9a>
 8002eea:	4621      	mov	r1, r4
 8002eec:	4628      	mov	r0, r5
 8002eee:	f000 f8c5 	bl	800307c <__swsetup_r>
 8002ef2:	b380      	cbz	r0, 8002f56 <_puts_r+0x9a>
 8002ef4:	f04f 35ff 	mov.w	r5, #4294967295
 8002ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002efa:	07da      	lsls	r2, r3, #31
 8002efc:	d405      	bmi.n	8002f0a <_puts_r+0x4e>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	059b      	lsls	r3, r3, #22
 8002f02:	d402      	bmi.n	8002f0a <_puts_r+0x4e>
 8002f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f06:	f000 f989 	bl	800321c <__retarget_lock_release_recursive>
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da04      	bge.n	8002f1c <_puts_r+0x60>
 8002f12:	69a2      	ldr	r2, [r4, #24]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dc17      	bgt.n	8002f48 <_puts_r+0x8c>
 8002f18:	290a      	cmp	r1, #10
 8002f1a:	d015      	beq.n	8002f48 <_puts_r+0x8c>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	6022      	str	r2, [r4, #0]
 8002f22:	7019      	strb	r1, [r3, #0]
 8002f24:	68a3      	ldr	r3, [r4, #8]
 8002f26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60a3      	str	r3, [r4, #8]
 8002f2e:	2900      	cmp	r1, #0
 8002f30:	d1ed      	bne.n	8002f0e <_puts_r+0x52>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da11      	bge.n	8002f5a <_puts_r+0x9e>
 8002f36:	4622      	mov	r2, r4
 8002f38:	210a      	movs	r1, #10
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f000 f85f 	bl	8002ffe <__swbuf_r>
 8002f40:	3001      	adds	r0, #1
 8002f42:	d0d7      	beq.n	8002ef4 <_puts_r+0x38>
 8002f44:	250a      	movs	r5, #10
 8002f46:	e7d7      	b.n	8002ef8 <_puts_r+0x3c>
 8002f48:	4622      	mov	r2, r4
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f000 f857 	bl	8002ffe <__swbuf_r>
 8002f50:	3001      	adds	r0, #1
 8002f52:	d1e7      	bne.n	8002f24 <_puts_r+0x68>
 8002f54:	e7ce      	b.n	8002ef4 <_puts_r+0x38>
 8002f56:	3e01      	subs	r6, #1
 8002f58:	e7e4      	b.n	8002f24 <_puts_r+0x68>
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	6022      	str	r2, [r4, #0]
 8002f60:	220a      	movs	r2, #10
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e7ee      	b.n	8002f44 <_puts_r+0x88>
	...

08002f68 <puts>:
 8002f68:	4b02      	ldr	r3, [pc, #8]	@ (8002f74 <puts+0xc>)
 8002f6a:	4601      	mov	r1, r0
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	f7ff bfa5 	b.w	8002ebc <_puts_r>
 8002f72:	bf00      	nop
 8002f74:	20000018 	.word	0x20000018

08002f78 <__sread>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f80:	f000 f8fc 	bl	800317c <_read_r>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	bfab      	itete	ge
 8002f88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8002f8c:	181b      	addge	r3, r3, r0
 8002f8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f92:	bfac      	ite	ge
 8002f94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f96:	81a3      	strhlt	r3, [r4, #12]
 8002f98:	bd10      	pop	{r4, pc}

08002f9a <__swrite>:
 8002f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9e:	461f      	mov	r7, r3
 8002fa0:	898b      	ldrh	r3, [r1, #12]
 8002fa2:	05db      	lsls	r3, r3, #23
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	4616      	mov	r6, r2
 8002faa:	d505      	bpl.n	8002fb8 <__swrite+0x1e>
 8002fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f000 f8d0 	bl	8003158 <_lseek_r>
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	4632      	mov	r2, r6
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	4628      	mov	r0, r5
 8002fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fce:	f000 b8e7 	b.w	80031a0 <_write_r>

08002fd2 <__sseek>:
 8002fd2:	b510      	push	{r4, lr}
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fda:	f000 f8bd 	bl	8003158 <_lseek_r>
 8002fde:	1c43      	adds	r3, r0, #1
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	bf15      	itete	ne
 8002fe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fee:	81a3      	strheq	r3, [r4, #12]
 8002ff0:	bf18      	it	ne
 8002ff2:	81a3      	strhne	r3, [r4, #12]
 8002ff4:	bd10      	pop	{r4, pc}

08002ff6 <__sclose>:
 8002ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffa:	f000 b89d 	b.w	8003138 <_close_r>

08002ffe <__swbuf_r>:
 8002ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003000:	460e      	mov	r6, r1
 8003002:	4614      	mov	r4, r2
 8003004:	4605      	mov	r5, r0
 8003006:	b118      	cbz	r0, 8003010 <__swbuf_r+0x12>
 8003008:	6a03      	ldr	r3, [r0, #32]
 800300a:	b90b      	cbnz	r3, 8003010 <__swbuf_r+0x12>
 800300c:	f7ff ff20 	bl	8002e50 <__sinit>
 8003010:	69a3      	ldr	r3, [r4, #24]
 8003012:	60a3      	str	r3, [r4, #8]
 8003014:	89a3      	ldrh	r3, [r4, #12]
 8003016:	071a      	lsls	r2, r3, #28
 8003018:	d501      	bpl.n	800301e <__swbuf_r+0x20>
 800301a:	6923      	ldr	r3, [r4, #16]
 800301c:	b943      	cbnz	r3, 8003030 <__swbuf_r+0x32>
 800301e:	4621      	mov	r1, r4
 8003020:	4628      	mov	r0, r5
 8003022:	f000 f82b 	bl	800307c <__swsetup_r>
 8003026:	b118      	cbz	r0, 8003030 <__swbuf_r+0x32>
 8003028:	f04f 37ff 	mov.w	r7, #4294967295
 800302c:	4638      	mov	r0, r7
 800302e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	6922      	ldr	r2, [r4, #16]
 8003034:	1a98      	subs	r0, r3, r2
 8003036:	6963      	ldr	r3, [r4, #20]
 8003038:	b2f6      	uxtb	r6, r6
 800303a:	4283      	cmp	r3, r0
 800303c:	4637      	mov	r7, r6
 800303e:	dc05      	bgt.n	800304c <__swbuf_r+0x4e>
 8003040:	4621      	mov	r1, r4
 8003042:	4628      	mov	r0, r5
 8003044:	f000 fa76 	bl	8003534 <_fflush_r>
 8003048:	2800      	cmp	r0, #0
 800304a:	d1ed      	bne.n	8003028 <__swbuf_r+0x2a>
 800304c:	68a3      	ldr	r3, [r4, #8]
 800304e:	3b01      	subs	r3, #1
 8003050:	60a3      	str	r3, [r4, #8]
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	6022      	str	r2, [r4, #0]
 8003058:	701e      	strb	r6, [r3, #0]
 800305a:	6962      	ldr	r2, [r4, #20]
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	429a      	cmp	r2, r3
 8003060:	d004      	beq.n	800306c <__swbuf_r+0x6e>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	07db      	lsls	r3, r3, #31
 8003066:	d5e1      	bpl.n	800302c <__swbuf_r+0x2e>
 8003068:	2e0a      	cmp	r6, #10
 800306a:	d1df      	bne.n	800302c <__swbuf_r+0x2e>
 800306c:	4621      	mov	r1, r4
 800306e:	4628      	mov	r0, r5
 8003070:	f000 fa60 	bl	8003534 <_fflush_r>
 8003074:	2800      	cmp	r0, #0
 8003076:	d0d9      	beq.n	800302c <__swbuf_r+0x2e>
 8003078:	e7d6      	b.n	8003028 <__swbuf_r+0x2a>
	...

0800307c <__swsetup_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4b29      	ldr	r3, [pc, #164]	@ (8003124 <__swsetup_r+0xa8>)
 8003080:	4605      	mov	r5, r0
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	460c      	mov	r4, r1
 8003086:	b118      	cbz	r0, 8003090 <__swsetup_r+0x14>
 8003088:	6a03      	ldr	r3, [r0, #32]
 800308a:	b90b      	cbnz	r3, 8003090 <__swsetup_r+0x14>
 800308c:	f7ff fee0 	bl	8002e50 <__sinit>
 8003090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003094:	0719      	lsls	r1, r3, #28
 8003096:	d422      	bmi.n	80030de <__swsetup_r+0x62>
 8003098:	06da      	lsls	r2, r3, #27
 800309a:	d407      	bmi.n	80030ac <__swsetup_r+0x30>
 800309c:	2209      	movs	r2, #9
 800309e:	602a      	str	r2, [r5, #0]
 80030a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030a4:	81a3      	strh	r3, [r4, #12]
 80030a6:	f04f 30ff 	mov.w	r0, #4294967295
 80030aa:	e033      	b.n	8003114 <__swsetup_r+0x98>
 80030ac:	0758      	lsls	r0, r3, #29
 80030ae:	d512      	bpl.n	80030d6 <__swsetup_r+0x5a>
 80030b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030b2:	b141      	cbz	r1, 80030c6 <__swsetup_r+0x4a>
 80030b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030b8:	4299      	cmp	r1, r3
 80030ba:	d002      	beq.n	80030c2 <__swsetup_r+0x46>
 80030bc:	4628      	mov	r0, r5
 80030be:	f000 f8bd 	bl	800323c <_free_r>
 80030c2:	2300      	movs	r3, #0
 80030c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80030cc:	81a3      	strh	r3, [r4, #12]
 80030ce:	2300      	movs	r3, #0
 80030d0:	6063      	str	r3, [r4, #4]
 80030d2:	6923      	ldr	r3, [r4, #16]
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	89a3      	ldrh	r3, [r4, #12]
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	81a3      	strh	r3, [r4, #12]
 80030de:	6923      	ldr	r3, [r4, #16]
 80030e0:	b94b      	cbnz	r3, 80030f6 <__swsetup_r+0x7a>
 80030e2:	89a3      	ldrh	r3, [r4, #12]
 80030e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ec:	d003      	beq.n	80030f6 <__swsetup_r+0x7a>
 80030ee:	4621      	mov	r1, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	f000 fa6d 	bl	80035d0 <__smakebuf_r>
 80030f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030fa:	f013 0201 	ands.w	r2, r3, #1
 80030fe:	d00a      	beq.n	8003116 <__swsetup_r+0x9a>
 8003100:	2200      	movs	r2, #0
 8003102:	60a2      	str	r2, [r4, #8]
 8003104:	6962      	ldr	r2, [r4, #20]
 8003106:	4252      	negs	r2, r2
 8003108:	61a2      	str	r2, [r4, #24]
 800310a:	6922      	ldr	r2, [r4, #16]
 800310c:	b942      	cbnz	r2, 8003120 <__swsetup_r+0xa4>
 800310e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003112:	d1c5      	bne.n	80030a0 <__swsetup_r+0x24>
 8003114:	bd38      	pop	{r3, r4, r5, pc}
 8003116:	0799      	lsls	r1, r3, #30
 8003118:	bf58      	it	pl
 800311a:	6962      	ldrpl	r2, [r4, #20]
 800311c:	60a2      	str	r2, [r4, #8]
 800311e:	e7f4      	b.n	800310a <__swsetup_r+0x8e>
 8003120:	2000      	movs	r0, #0
 8003122:	e7f7      	b.n	8003114 <__swsetup_r+0x98>
 8003124:	20000018 	.word	0x20000018

08003128 <memset>:
 8003128:	4402      	add	r2, r0
 800312a:	4603      	mov	r3, r0
 800312c:	4293      	cmp	r3, r2
 800312e:	d100      	bne.n	8003132 <memset+0xa>
 8003130:	4770      	bx	lr
 8003132:	f803 1b01 	strb.w	r1, [r3], #1
 8003136:	e7f9      	b.n	800312c <memset+0x4>

08003138 <_close_r>:
 8003138:	b538      	push	{r3, r4, r5, lr}
 800313a:	4d06      	ldr	r5, [pc, #24]	@ (8003154 <_close_r+0x1c>)
 800313c:	2300      	movs	r3, #0
 800313e:	4604      	mov	r4, r0
 8003140:	4608      	mov	r0, r1
 8003142:	602b      	str	r3, [r5, #0]
 8003144:	f7fd fc11 	bl	800096a <_close>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d102      	bne.n	8003152 <_close_r+0x1a>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	b103      	cbz	r3, 8003152 <_close_r+0x1a>
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	bd38      	pop	{r3, r4, r5, pc}
 8003154:	20000710 	.word	0x20000710

08003158 <_lseek_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	4d07      	ldr	r5, [pc, #28]	@ (8003178 <_lseek_r+0x20>)
 800315c:	4604      	mov	r4, r0
 800315e:	4608      	mov	r0, r1
 8003160:	4611      	mov	r1, r2
 8003162:	2200      	movs	r2, #0
 8003164:	602a      	str	r2, [r5, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	f7fd fc26 	bl	80009b8 <_lseek>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_lseek_r+0x1e>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	b103      	cbz	r3, 8003176 <_lseek_r+0x1e>
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	20000710 	.word	0x20000710

0800317c <_read_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4d07      	ldr	r5, [pc, #28]	@ (800319c <_read_r+0x20>)
 8003180:	4604      	mov	r4, r0
 8003182:	4608      	mov	r0, r1
 8003184:	4611      	mov	r1, r2
 8003186:	2200      	movs	r2, #0
 8003188:	602a      	str	r2, [r5, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f7fd fbd0 	bl	8000930 <_read>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_read_r+0x1e>
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	b103      	cbz	r3, 800319a <_read_r+0x1e>
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000710 	.word	0x20000710

080031a0 <_write_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4d07      	ldr	r5, [pc, #28]	@ (80031c0 <_write_r+0x20>)
 80031a4:	4604      	mov	r4, r0
 80031a6:	4608      	mov	r0, r1
 80031a8:	4611      	mov	r1, r2
 80031aa:	2200      	movs	r2, #0
 80031ac:	602a      	str	r2, [r5, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7fd f9a0 	bl	80004f4 <_write>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d102      	bne.n	80031be <_write_r+0x1e>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	b103      	cbz	r3, 80031be <_write_r+0x1e>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd38      	pop	{r3, r4, r5, pc}
 80031c0:	20000710 	.word	0x20000710

080031c4 <__errno>:
 80031c4:	4b01      	ldr	r3, [pc, #4]	@ (80031cc <__errno+0x8>)
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000018 	.word	0x20000018

080031d0 <__libc_init_array>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003208 <__libc_init_array+0x38>)
 80031d4:	4c0d      	ldr	r4, [pc, #52]	@ (800320c <__libc_init_array+0x3c>)
 80031d6:	1b64      	subs	r4, r4, r5
 80031d8:	10a4      	asrs	r4, r4, #2
 80031da:	2600      	movs	r6, #0
 80031dc:	42a6      	cmp	r6, r4
 80031de:	d109      	bne.n	80031f4 <__libc_init_array+0x24>
 80031e0:	4d0b      	ldr	r5, [pc, #44]	@ (8003210 <__libc_init_array+0x40>)
 80031e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003214 <__libc_init_array+0x44>)
 80031e4:	f000 fa62 	bl	80036ac <_init>
 80031e8:	1b64      	subs	r4, r4, r5
 80031ea:	10a4      	asrs	r4, r4, #2
 80031ec:	2600      	movs	r6, #0
 80031ee:	42a6      	cmp	r6, r4
 80031f0:	d105      	bne.n	80031fe <__libc_init_array+0x2e>
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f8:	4798      	blx	r3
 80031fa:	3601      	adds	r6, #1
 80031fc:	e7ee      	b.n	80031dc <__libc_init_array+0xc>
 80031fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003202:	4798      	blx	r3
 8003204:	3601      	adds	r6, #1
 8003206:	e7f2      	b.n	80031ee <__libc_init_array+0x1e>
 8003208:	08003728 	.word	0x08003728
 800320c:	08003728 	.word	0x08003728
 8003210:	08003728 	.word	0x08003728
 8003214:	0800372c 	.word	0x0800372c

08003218 <__retarget_lock_init_recursive>:
 8003218:	4770      	bx	lr

0800321a <__retarget_lock_acquire_recursive>:
 800321a:	4770      	bx	lr

0800321c <__retarget_lock_release_recursive>:
 800321c:	4770      	bx	lr

0800321e <memcpy>:
 800321e:	440a      	add	r2, r1
 8003220:	4291      	cmp	r1, r2
 8003222:	f100 33ff 	add.w	r3, r0, #4294967295
 8003226:	d100      	bne.n	800322a <memcpy+0xc>
 8003228:	4770      	bx	lr
 800322a:	b510      	push	{r4, lr}
 800322c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003234:	4291      	cmp	r1, r2
 8003236:	d1f9      	bne.n	800322c <memcpy+0xe>
 8003238:	bd10      	pop	{r4, pc}
	...

0800323c <_free_r>:
 800323c:	b538      	push	{r3, r4, r5, lr}
 800323e:	4605      	mov	r5, r0
 8003240:	2900      	cmp	r1, #0
 8003242:	d041      	beq.n	80032c8 <_free_r+0x8c>
 8003244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003248:	1f0c      	subs	r4, r1, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	bfb8      	it	lt
 800324e:	18e4      	addlt	r4, r4, r3
 8003250:	f000 f8e0 	bl	8003414 <__malloc_lock>
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <_free_r+0x90>)
 8003256:	6813      	ldr	r3, [r2, #0]
 8003258:	b933      	cbnz	r3, 8003268 <_free_r+0x2c>
 800325a:	6063      	str	r3, [r4, #4]
 800325c:	6014      	str	r4, [r2, #0]
 800325e:	4628      	mov	r0, r5
 8003260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003264:	f000 b8dc 	b.w	8003420 <__malloc_unlock>
 8003268:	42a3      	cmp	r3, r4
 800326a:	d908      	bls.n	800327e <_free_r+0x42>
 800326c:	6820      	ldr	r0, [r4, #0]
 800326e:	1821      	adds	r1, r4, r0
 8003270:	428b      	cmp	r3, r1
 8003272:	bf01      	itttt	eq
 8003274:	6819      	ldreq	r1, [r3, #0]
 8003276:	685b      	ldreq	r3, [r3, #4]
 8003278:	1809      	addeq	r1, r1, r0
 800327a:	6021      	streq	r1, [r4, #0]
 800327c:	e7ed      	b.n	800325a <_free_r+0x1e>
 800327e:	461a      	mov	r2, r3
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	b10b      	cbz	r3, 8003288 <_free_r+0x4c>
 8003284:	42a3      	cmp	r3, r4
 8003286:	d9fa      	bls.n	800327e <_free_r+0x42>
 8003288:	6811      	ldr	r1, [r2, #0]
 800328a:	1850      	adds	r0, r2, r1
 800328c:	42a0      	cmp	r0, r4
 800328e:	d10b      	bne.n	80032a8 <_free_r+0x6c>
 8003290:	6820      	ldr	r0, [r4, #0]
 8003292:	4401      	add	r1, r0
 8003294:	1850      	adds	r0, r2, r1
 8003296:	4283      	cmp	r3, r0
 8003298:	6011      	str	r1, [r2, #0]
 800329a:	d1e0      	bne.n	800325e <_free_r+0x22>
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	6053      	str	r3, [r2, #4]
 80032a2:	4408      	add	r0, r1
 80032a4:	6010      	str	r0, [r2, #0]
 80032a6:	e7da      	b.n	800325e <_free_r+0x22>
 80032a8:	d902      	bls.n	80032b0 <_free_r+0x74>
 80032aa:	230c      	movs	r3, #12
 80032ac:	602b      	str	r3, [r5, #0]
 80032ae:	e7d6      	b.n	800325e <_free_r+0x22>
 80032b0:	6820      	ldr	r0, [r4, #0]
 80032b2:	1821      	adds	r1, r4, r0
 80032b4:	428b      	cmp	r3, r1
 80032b6:	bf04      	itt	eq
 80032b8:	6819      	ldreq	r1, [r3, #0]
 80032ba:	685b      	ldreq	r3, [r3, #4]
 80032bc:	6063      	str	r3, [r4, #4]
 80032be:	bf04      	itt	eq
 80032c0:	1809      	addeq	r1, r1, r0
 80032c2:	6021      	streq	r1, [r4, #0]
 80032c4:	6054      	str	r4, [r2, #4]
 80032c6:	e7ca      	b.n	800325e <_free_r+0x22>
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
 80032ca:	bf00      	nop
 80032cc:	2000071c 	.word	0x2000071c

080032d0 <sbrk_aligned>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003310 <sbrk_aligned+0x40>)
 80032d4:	460c      	mov	r4, r1
 80032d6:	6831      	ldr	r1, [r6, #0]
 80032d8:	4605      	mov	r5, r0
 80032da:	b911      	cbnz	r1, 80032e2 <sbrk_aligned+0x12>
 80032dc:	f000 f9d6 	bl	800368c <_sbrk_r>
 80032e0:	6030      	str	r0, [r6, #0]
 80032e2:	4621      	mov	r1, r4
 80032e4:	4628      	mov	r0, r5
 80032e6:	f000 f9d1 	bl	800368c <_sbrk_r>
 80032ea:	1c43      	adds	r3, r0, #1
 80032ec:	d103      	bne.n	80032f6 <sbrk_aligned+0x26>
 80032ee:	f04f 34ff 	mov.w	r4, #4294967295
 80032f2:	4620      	mov	r0, r4
 80032f4:	bd70      	pop	{r4, r5, r6, pc}
 80032f6:	1cc4      	adds	r4, r0, #3
 80032f8:	f024 0403 	bic.w	r4, r4, #3
 80032fc:	42a0      	cmp	r0, r4
 80032fe:	d0f8      	beq.n	80032f2 <sbrk_aligned+0x22>
 8003300:	1a21      	subs	r1, r4, r0
 8003302:	4628      	mov	r0, r5
 8003304:	f000 f9c2 	bl	800368c <_sbrk_r>
 8003308:	3001      	adds	r0, #1
 800330a:	d1f2      	bne.n	80032f2 <sbrk_aligned+0x22>
 800330c:	e7ef      	b.n	80032ee <sbrk_aligned+0x1e>
 800330e:	bf00      	nop
 8003310:	20000718 	.word	0x20000718

08003314 <_malloc_r>:
 8003314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003318:	1ccd      	adds	r5, r1, #3
 800331a:	f025 0503 	bic.w	r5, r5, #3
 800331e:	3508      	adds	r5, #8
 8003320:	2d0c      	cmp	r5, #12
 8003322:	bf38      	it	cc
 8003324:	250c      	movcc	r5, #12
 8003326:	2d00      	cmp	r5, #0
 8003328:	4606      	mov	r6, r0
 800332a:	db01      	blt.n	8003330 <_malloc_r+0x1c>
 800332c:	42a9      	cmp	r1, r5
 800332e:	d904      	bls.n	800333a <_malloc_r+0x26>
 8003330:	230c      	movs	r3, #12
 8003332:	6033      	str	r3, [r6, #0]
 8003334:	2000      	movs	r0, #0
 8003336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800333a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003410 <_malloc_r+0xfc>
 800333e:	f000 f869 	bl	8003414 <__malloc_lock>
 8003342:	f8d8 3000 	ldr.w	r3, [r8]
 8003346:	461c      	mov	r4, r3
 8003348:	bb44      	cbnz	r4, 800339c <_malloc_r+0x88>
 800334a:	4629      	mov	r1, r5
 800334c:	4630      	mov	r0, r6
 800334e:	f7ff ffbf 	bl	80032d0 <sbrk_aligned>
 8003352:	1c43      	adds	r3, r0, #1
 8003354:	4604      	mov	r4, r0
 8003356:	d158      	bne.n	800340a <_malloc_r+0xf6>
 8003358:	f8d8 4000 	ldr.w	r4, [r8]
 800335c:	4627      	mov	r7, r4
 800335e:	2f00      	cmp	r7, #0
 8003360:	d143      	bne.n	80033ea <_malloc_r+0xd6>
 8003362:	2c00      	cmp	r4, #0
 8003364:	d04b      	beq.n	80033fe <_malloc_r+0xea>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	4639      	mov	r1, r7
 800336a:	4630      	mov	r0, r6
 800336c:	eb04 0903 	add.w	r9, r4, r3
 8003370:	f000 f98c 	bl	800368c <_sbrk_r>
 8003374:	4581      	cmp	r9, r0
 8003376:	d142      	bne.n	80033fe <_malloc_r+0xea>
 8003378:	6821      	ldr	r1, [r4, #0]
 800337a:	1a6d      	subs	r5, r5, r1
 800337c:	4629      	mov	r1, r5
 800337e:	4630      	mov	r0, r6
 8003380:	f7ff ffa6 	bl	80032d0 <sbrk_aligned>
 8003384:	3001      	adds	r0, #1
 8003386:	d03a      	beq.n	80033fe <_malloc_r+0xea>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	442b      	add	r3, r5
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	f8d8 3000 	ldr.w	r3, [r8]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	bb62      	cbnz	r2, 80033f0 <_malloc_r+0xdc>
 8003396:	f8c8 7000 	str.w	r7, [r8]
 800339a:	e00f      	b.n	80033bc <_malloc_r+0xa8>
 800339c:	6822      	ldr	r2, [r4, #0]
 800339e:	1b52      	subs	r2, r2, r5
 80033a0:	d420      	bmi.n	80033e4 <_malloc_r+0xd0>
 80033a2:	2a0b      	cmp	r2, #11
 80033a4:	d917      	bls.n	80033d6 <_malloc_r+0xc2>
 80033a6:	1961      	adds	r1, r4, r5
 80033a8:	42a3      	cmp	r3, r4
 80033aa:	6025      	str	r5, [r4, #0]
 80033ac:	bf18      	it	ne
 80033ae:	6059      	strne	r1, [r3, #4]
 80033b0:	6863      	ldr	r3, [r4, #4]
 80033b2:	bf08      	it	eq
 80033b4:	f8c8 1000 	streq.w	r1, [r8]
 80033b8:	5162      	str	r2, [r4, r5]
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	4630      	mov	r0, r6
 80033be:	f000 f82f 	bl	8003420 <__malloc_unlock>
 80033c2:	f104 000b 	add.w	r0, r4, #11
 80033c6:	1d23      	adds	r3, r4, #4
 80033c8:	f020 0007 	bic.w	r0, r0, #7
 80033cc:	1ac2      	subs	r2, r0, r3
 80033ce:	bf1c      	itt	ne
 80033d0:	1a1b      	subne	r3, r3, r0
 80033d2:	50a3      	strne	r3, [r4, r2]
 80033d4:	e7af      	b.n	8003336 <_malloc_r+0x22>
 80033d6:	6862      	ldr	r2, [r4, #4]
 80033d8:	42a3      	cmp	r3, r4
 80033da:	bf0c      	ite	eq
 80033dc:	f8c8 2000 	streq.w	r2, [r8]
 80033e0:	605a      	strne	r2, [r3, #4]
 80033e2:	e7eb      	b.n	80033bc <_malloc_r+0xa8>
 80033e4:	4623      	mov	r3, r4
 80033e6:	6864      	ldr	r4, [r4, #4]
 80033e8:	e7ae      	b.n	8003348 <_malloc_r+0x34>
 80033ea:	463c      	mov	r4, r7
 80033ec:	687f      	ldr	r7, [r7, #4]
 80033ee:	e7b6      	b.n	800335e <_malloc_r+0x4a>
 80033f0:	461a      	mov	r2, r3
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	42a3      	cmp	r3, r4
 80033f6:	d1fb      	bne.n	80033f0 <_malloc_r+0xdc>
 80033f8:	2300      	movs	r3, #0
 80033fa:	6053      	str	r3, [r2, #4]
 80033fc:	e7de      	b.n	80033bc <_malloc_r+0xa8>
 80033fe:	230c      	movs	r3, #12
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	4630      	mov	r0, r6
 8003404:	f000 f80c 	bl	8003420 <__malloc_unlock>
 8003408:	e794      	b.n	8003334 <_malloc_r+0x20>
 800340a:	6005      	str	r5, [r0, #0]
 800340c:	e7d6      	b.n	80033bc <_malloc_r+0xa8>
 800340e:	bf00      	nop
 8003410:	2000071c 	.word	0x2000071c

08003414 <__malloc_lock>:
 8003414:	4801      	ldr	r0, [pc, #4]	@ (800341c <__malloc_lock+0x8>)
 8003416:	f7ff bf00 	b.w	800321a <__retarget_lock_acquire_recursive>
 800341a:	bf00      	nop
 800341c:	20000714 	.word	0x20000714

08003420 <__malloc_unlock>:
 8003420:	4801      	ldr	r0, [pc, #4]	@ (8003428 <__malloc_unlock+0x8>)
 8003422:	f7ff befb 	b.w	800321c <__retarget_lock_release_recursive>
 8003426:	bf00      	nop
 8003428:	20000714 	.word	0x20000714

0800342c <__sflush_r>:
 800342c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003434:	0716      	lsls	r6, r2, #28
 8003436:	4605      	mov	r5, r0
 8003438:	460c      	mov	r4, r1
 800343a:	d454      	bmi.n	80034e6 <__sflush_r+0xba>
 800343c:	684b      	ldr	r3, [r1, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	dc02      	bgt.n	8003448 <__sflush_r+0x1c>
 8003442:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	dd48      	ble.n	80034da <__sflush_r+0xae>
 8003448:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800344a:	2e00      	cmp	r6, #0
 800344c:	d045      	beq.n	80034da <__sflush_r+0xae>
 800344e:	2300      	movs	r3, #0
 8003450:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003454:	682f      	ldr	r7, [r5, #0]
 8003456:	6a21      	ldr	r1, [r4, #32]
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	d030      	beq.n	80034be <__sflush_r+0x92>
 800345c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	0759      	lsls	r1, r3, #29
 8003462:	d505      	bpl.n	8003470 <__sflush_r+0x44>
 8003464:	6863      	ldr	r3, [r4, #4]
 8003466:	1ad2      	subs	r2, r2, r3
 8003468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800346a:	b10b      	cbz	r3, 8003470 <__sflush_r+0x44>
 800346c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800346e:	1ad2      	subs	r2, r2, r3
 8003470:	2300      	movs	r3, #0
 8003472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003474:	6a21      	ldr	r1, [r4, #32]
 8003476:	4628      	mov	r0, r5
 8003478:	47b0      	blx	r6
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	d106      	bne.n	800348e <__sflush_r+0x62>
 8003480:	6829      	ldr	r1, [r5, #0]
 8003482:	291d      	cmp	r1, #29
 8003484:	d82b      	bhi.n	80034de <__sflush_r+0xb2>
 8003486:	4a2a      	ldr	r2, [pc, #168]	@ (8003530 <__sflush_r+0x104>)
 8003488:	40ca      	lsrs	r2, r1
 800348a:	07d6      	lsls	r6, r2, #31
 800348c:	d527      	bpl.n	80034de <__sflush_r+0xb2>
 800348e:	2200      	movs	r2, #0
 8003490:	6062      	str	r2, [r4, #4]
 8003492:	04d9      	lsls	r1, r3, #19
 8003494:	6922      	ldr	r2, [r4, #16]
 8003496:	6022      	str	r2, [r4, #0]
 8003498:	d504      	bpl.n	80034a4 <__sflush_r+0x78>
 800349a:	1c42      	adds	r2, r0, #1
 800349c:	d101      	bne.n	80034a2 <__sflush_r+0x76>
 800349e:	682b      	ldr	r3, [r5, #0]
 80034a0:	b903      	cbnz	r3, 80034a4 <__sflush_r+0x78>
 80034a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80034a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034a6:	602f      	str	r7, [r5, #0]
 80034a8:	b1b9      	cbz	r1, 80034da <__sflush_r+0xae>
 80034aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034ae:	4299      	cmp	r1, r3
 80034b0:	d002      	beq.n	80034b8 <__sflush_r+0x8c>
 80034b2:	4628      	mov	r0, r5
 80034b4:	f7ff fec2 	bl	800323c <_free_r>
 80034b8:	2300      	movs	r3, #0
 80034ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80034bc:	e00d      	b.n	80034da <__sflush_r+0xae>
 80034be:	2301      	movs	r3, #1
 80034c0:	4628      	mov	r0, r5
 80034c2:	47b0      	blx	r6
 80034c4:	4602      	mov	r2, r0
 80034c6:	1c50      	adds	r0, r2, #1
 80034c8:	d1c9      	bne.n	800345e <__sflush_r+0x32>
 80034ca:	682b      	ldr	r3, [r5, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0c6      	beq.n	800345e <__sflush_r+0x32>
 80034d0:	2b1d      	cmp	r3, #29
 80034d2:	d001      	beq.n	80034d8 <__sflush_r+0xac>
 80034d4:	2b16      	cmp	r3, #22
 80034d6:	d11e      	bne.n	8003516 <__sflush_r+0xea>
 80034d8:	602f      	str	r7, [r5, #0]
 80034da:	2000      	movs	r0, #0
 80034dc:	e022      	b.n	8003524 <__sflush_r+0xf8>
 80034de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	e01b      	b.n	800351e <__sflush_r+0xf2>
 80034e6:	690f      	ldr	r7, [r1, #16]
 80034e8:	2f00      	cmp	r7, #0
 80034ea:	d0f6      	beq.n	80034da <__sflush_r+0xae>
 80034ec:	0793      	lsls	r3, r2, #30
 80034ee:	680e      	ldr	r6, [r1, #0]
 80034f0:	bf08      	it	eq
 80034f2:	694b      	ldreq	r3, [r1, #20]
 80034f4:	600f      	str	r7, [r1, #0]
 80034f6:	bf18      	it	ne
 80034f8:	2300      	movne	r3, #0
 80034fa:	eba6 0807 	sub.w	r8, r6, r7
 80034fe:	608b      	str	r3, [r1, #8]
 8003500:	f1b8 0f00 	cmp.w	r8, #0
 8003504:	dde9      	ble.n	80034da <__sflush_r+0xae>
 8003506:	6a21      	ldr	r1, [r4, #32]
 8003508:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800350a:	4643      	mov	r3, r8
 800350c:	463a      	mov	r2, r7
 800350e:	4628      	mov	r0, r5
 8003510:	47b0      	blx	r6
 8003512:	2800      	cmp	r0, #0
 8003514:	dc08      	bgt.n	8003528 <__sflush_r+0xfc>
 8003516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800351a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800351e:	81a3      	strh	r3, [r4, #12]
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003528:	4407      	add	r7, r0
 800352a:	eba8 0800 	sub.w	r8, r8, r0
 800352e:	e7e7      	b.n	8003500 <__sflush_r+0xd4>
 8003530:	20400001 	.word	0x20400001

08003534 <_fflush_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	690b      	ldr	r3, [r1, #16]
 8003538:	4605      	mov	r5, r0
 800353a:	460c      	mov	r4, r1
 800353c:	b913      	cbnz	r3, 8003544 <_fflush_r+0x10>
 800353e:	2500      	movs	r5, #0
 8003540:	4628      	mov	r0, r5
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	b118      	cbz	r0, 800354e <_fflush_r+0x1a>
 8003546:	6a03      	ldr	r3, [r0, #32]
 8003548:	b90b      	cbnz	r3, 800354e <_fflush_r+0x1a>
 800354a:	f7ff fc81 	bl	8002e50 <__sinit>
 800354e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f3      	beq.n	800353e <_fflush_r+0xa>
 8003556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003558:	07d0      	lsls	r0, r2, #31
 800355a:	d404      	bmi.n	8003566 <_fflush_r+0x32>
 800355c:	0599      	lsls	r1, r3, #22
 800355e:	d402      	bmi.n	8003566 <_fflush_r+0x32>
 8003560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003562:	f7ff fe5a 	bl	800321a <__retarget_lock_acquire_recursive>
 8003566:	4628      	mov	r0, r5
 8003568:	4621      	mov	r1, r4
 800356a:	f7ff ff5f 	bl	800342c <__sflush_r>
 800356e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003570:	07da      	lsls	r2, r3, #31
 8003572:	4605      	mov	r5, r0
 8003574:	d4e4      	bmi.n	8003540 <_fflush_r+0xc>
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	059b      	lsls	r3, r3, #22
 800357a:	d4e1      	bmi.n	8003540 <_fflush_r+0xc>
 800357c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800357e:	f7ff fe4d 	bl	800321c <__retarget_lock_release_recursive>
 8003582:	e7dd      	b.n	8003540 <_fflush_r+0xc>

08003584 <__swhatbuf_r>:
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	460c      	mov	r4, r1
 8003588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358c:	2900      	cmp	r1, #0
 800358e:	b096      	sub	sp, #88	@ 0x58
 8003590:	4615      	mov	r5, r2
 8003592:	461e      	mov	r6, r3
 8003594:	da0d      	bge.n	80035b2 <__swhatbuf_r+0x2e>
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2340      	movne	r3, #64	@ 0x40
 80035a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80035a8:	2000      	movs	r0, #0
 80035aa:	6031      	str	r1, [r6, #0]
 80035ac:	602b      	str	r3, [r5, #0]
 80035ae:	b016      	add	sp, #88	@ 0x58
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	466a      	mov	r2, sp
 80035b4:	f000 f848 	bl	8003648 <_fstat_r>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	dbec      	blt.n	8003596 <__swhatbuf_r+0x12>
 80035bc:	9901      	ldr	r1, [sp, #4]
 80035be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80035c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80035c6:	4259      	negs	r1, r3
 80035c8:	4159      	adcs	r1, r3
 80035ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035ce:	e7eb      	b.n	80035a8 <__swhatbuf_r+0x24>

080035d0 <__smakebuf_r>:
 80035d0:	898b      	ldrh	r3, [r1, #12]
 80035d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035d4:	079d      	lsls	r5, r3, #30
 80035d6:	4606      	mov	r6, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	d507      	bpl.n	80035ec <__smakebuf_r+0x1c>
 80035dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	6123      	str	r3, [r4, #16]
 80035e4:	2301      	movs	r3, #1
 80035e6:	6163      	str	r3, [r4, #20]
 80035e8:	b003      	add	sp, #12
 80035ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ec:	ab01      	add	r3, sp, #4
 80035ee:	466a      	mov	r2, sp
 80035f0:	f7ff ffc8 	bl	8003584 <__swhatbuf_r>
 80035f4:	9f00      	ldr	r7, [sp, #0]
 80035f6:	4605      	mov	r5, r0
 80035f8:	4639      	mov	r1, r7
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7ff fe8a 	bl	8003314 <_malloc_r>
 8003600:	b948      	cbnz	r0, 8003616 <__smakebuf_r+0x46>
 8003602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003606:	059a      	lsls	r2, r3, #22
 8003608:	d4ee      	bmi.n	80035e8 <__smakebuf_r+0x18>
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	f043 0302 	orr.w	r3, r3, #2
 8003612:	81a3      	strh	r3, [r4, #12]
 8003614:	e7e2      	b.n	80035dc <__smakebuf_r+0xc>
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	6020      	str	r0, [r4, #0]
 800361a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800361e:	81a3      	strh	r3, [r4, #12]
 8003620:	9b01      	ldr	r3, [sp, #4]
 8003622:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003626:	b15b      	cbz	r3, 8003640 <__smakebuf_r+0x70>
 8003628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800362c:	4630      	mov	r0, r6
 800362e:	f000 f81d 	bl	800366c <_isatty_r>
 8003632:	b128      	cbz	r0, 8003640 <__smakebuf_r+0x70>
 8003634:	89a3      	ldrh	r3, [r4, #12]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	81a3      	strh	r3, [r4, #12]
 8003640:	89a3      	ldrh	r3, [r4, #12]
 8003642:	431d      	orrs	r5, r3
 8003644:	81a5      	strh	r5, [r4, #12]
 8003646:	e7cf      	b.n	80035e8 <__smakebuf_r+0x18>

08003648 <_fstat_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4d07      	ldr	r5, [pc, #28]	@ (8003668 <_fstat_r+0x20>)
 800364c:	2300      	movs	r3, #0
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	602b      	str	r3, [r5, #0]
 8003656:	f7fd f994 	bl	8000982 <_fstat>
 800365a:	1c43      	adds	r3, r0, #1
 800365c:	d102      	bne.n	8003664 <_fstat_r+0x1c>
 800365e:	682b      	ldr	r3, [r5, #0]
 8003660:	b103      	cbz	r3, 8003664 <_fstat_r+0x1c>
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	bf00      	nop
 8003668:	20000710 	.word	0x20000710

0800366c <_isatty_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	4d06      	ldr	r5, [pc, #24]	@ (8003688 <_isatty_r+0x1c>)
 8003670:	2300      	movs	r3, #0
 8003672:	4604      	mov	r4, r0
 8003674:	4608      	mov	r0, r1
 8003676:	602b      	str	r3, [r5, #0]
 8003678:	f7fd f993 	bl	80009a2 <_isatty>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_isatty_r+0x1a>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	b103      	cbz	r3, 8003686 <_isatty_r+0x1a>
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	20000710 	.word	0x20000710

0800368c <_sbrk_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4d06      	ldr	r5, [pc, #24]	@ (80036a8 <_sbrk_r+0x1c>)
 8003690:	2300      	movs	r3, #0
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	f7fd f99c 	bl	80009d4 <_sbrk>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_sbrk_r+0x1a>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_sbrk_r+0x1a>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	20000710 	.word	0x20000710

080036ac <_init>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr

080036b8 <_fini>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr
