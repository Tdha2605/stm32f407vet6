
f407vet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800e148  0800e148  0000f148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eee4  0800eee4  000101d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eee4  0800eee4  0000fee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eeec  0800eeec  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eeec  0800eeec  0000feec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eef0  0800eef0  0000fef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800eef4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101d4  2**0
                  CONTENTS
 10 .bss          00000978  200001d4  200001d4  000101d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b4c  20000b4c  000101d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012451  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e9c  00000000  00000000  00022655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  000254f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c50  00000000  00000000  00026528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024409  00000000  00000000  00027178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016018  00000000  00000000  0004b581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd2b2  00000000  00000000  00061599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e84b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000572c  00000000  00000000  0012e890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00133fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e12c 	.word	0x0800e12c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800e12c 	.word	0x0800e12c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN _write */
  for (int i = 0; i < len; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e00a      	b.n	8001048 <_write+0x28>
  {
    SEGGER_RTT_Write(0, &ptr[i], 1);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	2000      	movs	r0, #0
 800103e:	f008 fc1d 	bl	800987c <SEGGER_RTT_Write>
  for (int i = 0; i < len; i++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf0      	blt.n	8001032 <_write+0x12>
  }
  return len;
 8001050:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END _write */
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  printf("===== STM32F407 GPS Tracker =====\n");
 8001062:	481e      	ldr	r0, [pc, #120]	@ (80010dc <main+0x80>)
 8001064:	f009 fc18 	bl	800a898 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f000 fe12 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f83c 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 f918 	bl	80012a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001074:	f000 f8c2 	bl	80011fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001078:	f000 f8ea 	bl	8001250 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800107c:	f000 f89c 	bl	80011b8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001080:	f004 fce6 	bl	8005a50 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  uint8_t g_sys_count = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	71fb      	strb	r3, [r7, #7]
  ha_hal_hardware_delay(5000);
 8001088:	2088      	movs	r0, #136	@ 0x88
 800108a:	f008 fc1d 	bl	80098c8 <ha_hal_hardware_delay>
  SDIO_SDCard_Test();
 800108e:	f000 f959 	bl	8001344 <SDIO_SDCard_Test>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2140      	movs	r1, #64	@ 0x40
 8001096:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <main+0x84>)
 8001098:	f008 fc50 	bl	800993c <ha_hal_gpio_set_level>
    ha_hal_hardware_delay(1000);
 800109c:	20e8      	movs	r0, #232	@ 0xe8
 800109e:	f008 fc13 	bl	80098c8 <ha_hal_hardware_delay>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <main+0x84>)
 80010a8:	f008 fc48 	bl	800993c <ha_hal_gpio_set_level>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_2_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2180      	movs	r1, #128	@ 0x80
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <main+0x84>)
 80010b2:	f008 fc43 	bl	800993c <ha_hal_gpio_set_level>
    ha_hal_hardware_delay(1000);
 80010b6:	20e8      	movs	r0, #232	@ 0xe8
 80010b8:	f008 fc06 	bl	80098c8 <ha_hal_hardware_delay>
    ha_hal_gpio_set_level(GPIOA, LED_PIN_2_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2180      	movs	r1, #128	@ 0x80
 80010c0:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <main+0x84>)
 80010c2:	f008 fc3b 	bl	800993c <ha_hal_gpio_set_level>

    printf("Systick Value: %lu\n", g_sys_count);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <main+0x88>)
 80010cc:	f009 fb7c 	bl	800a7c8 <iprintf>
    g_sys_count++;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	3301      	adds	r3, #1
 80010d4:	71fb      	strb	r3, [r7, #7]
    ha_hal_gpio_set_level(GPIOA, LED_PIN_1_Pin, GPIO_PIN_SET);
 80010d6:	bf00      	nop
 80010d8:	e7db      	b.n	8001092 <main+0x36>
 80010da:	bf00      	nop
 80010dc:	0800e148 	.word	0x0800e148
 80010e0:	40020000 	.word	0x40020000
 80010e4:	0800e16c 	.word	0x0800e16c

080010e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	@ 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f009 fcd0 	bl	800aa9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <SystemClock_Config+0xc8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	4a26      	ldr	r2, [pc, #152]	@ (80011b0 <SystemClock_Config+0xc8>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	@ 0x40
 800111c:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <SystemClock_Config+0xc8>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <SystemClock_Config+0xcc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a20      	ldr	r2, [pc, #128]	@ (80011b4 <SystemClock_Config+0xcc>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <SystemClock_Config+0xcc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2310      	movs	r3, #16
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001158:	2310      	movs	r3, #16
 800115a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800115c:	23c0      	movs	r3, #192	@ 0xc0
 800115e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f001 f97f 	bl	8002470 <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001178:	f000 fb2c 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800117c:	230f      	movs	r3, #15
 800117e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fbe2 	bl	8002960 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011a2:	f000 fb17 	bl	80017d4 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	@ 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <MX_SDIO_SD_Init+0x3c>)
 80011be:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <MX_SDIO_SD_Init+0x40>)
 80011c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_SDIO_SD_Init+0x3c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_SDIO_SD_Init+0x3c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_SDIO_SD_Init+0x3c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_SDIO_SD_Init+0x3c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_SDIO_SD_Init+0x3c>)
 80011dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011e0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <MX_SDIO_SD_Init+0x3c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	40012c00 	.word	0x40012c00

080011fc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <MX_USART1_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_USART1_UART_Init+0x4c>)
 8001234:	f002 ffa8 	bl	8004188 <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f000 fac9 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000274 	.word	0x20000274
 800124c:	40011000 	.word	0x40011000

08001250 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <MX_USART2_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001288:	f002 ff7e 	bl	8004188 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001292:	f000 fa9f 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002bc 	.word	0x200002bc
 80012a0:	40004400 	.word	0x40004400

080012a4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_GPIO_Init+0x98>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <MX_GPIO_Init+0x98>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_GPIO_Init+0x98>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_GPIO_Init+0x98>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <MX_GPIO_Init+0x98>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <MX_GPIO_Init+0x98>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_GPIO_Init+0x98>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	@ (800133c <MX_GPIO_Init+0x98>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_GPIO_Init+0x98>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PIN_1_Pin | LED_PIN_2_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	21c0      	movs	r1, #192	@ 0xc0
 8001312:	480b      	ldr	r0, [pc, #44]	@ (8001340 <MX_GPIO_Init+0x9c>)
 8001314:	f001 f892 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_PIN_1_Pin LED_PIN_2_Pin */
  GPIO_InitStruct.Pin = LED_PIN_1_Pin | LED_PIN_2_Pin;
 8001318:	23c0      	movs	r3, #192	@ 0xc0
 800131a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_GPIO_Init+0x9c>)
 8001330:	f000 fee8 	bl	8002104 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <SDIO_SDCard_Test>:

/* USER CODE BEGIN 4 */
static void SDIO_SDCard_Test(void)
{
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
  // The entire test is wrapped in a do-while(0) loop to allow for easy breaking on error.
  do
  {
    //------------------[ 1. Mount The SD Card ]--------------------
    // FIX 1: Use the correct mount option '1' for immediate mounting.
    FR_Status = f_mount(&FatFs, SDPath, 1);
 800134e:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8001352:	f103 0310 	add.w	r3, r3, #16
 8001356:	3b04      	subs	r3, #4
 8001358:	2201      	movs	r2, #1
 800135a:	49b1      	ldr	r1, [pc, #708]	@ (8001620 <SDIO_SDCard_Test+0x2dc>)
 800135c:	4618      	mov	r0, r3
 800135e:	f007 f855 	bl	800840c <f_mount>
 8001362:	4603      	mov	r3, r0
 8001364:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001368:	f102 020f 	add.w	r2, r2, #15
 800136c:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 800136e:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001372:	f103 030f 	add.w	r3, r3, #15
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d009      	beq.n	8001390 <SDIO_SDCard_Test+0x4c>
    {
      // FIX 2: Use printf directly for efficiency.
      printf("Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 800137c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001380:	f103 030f 	add.w	r3, r3, #15
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	48a6      	ldr	r0, [pc, #664]	@ (8001624 <SDIO_SDCard_Test+0x2e0>)
 800138a:	f009 fa1d 	bl	800a7c8 <iprintf>
      break;
 800138e:	e1e2      	b.n	8001756 <SDIO_SDCard_Test+0x412>
    }
    printf("SD Card Mounted Successfully!\r\n\n");
 8001390:	48a5      	ldr	r0, [pc, #660]	@ (8001628 <SDIO_SDCard_Test+0x2e4>)
 8001392:	f009 fa81 	bl	800a898 <puts>

    //------------------[ 2. Get & Print The SD Card Size & Free Space ]--------------------
    // FIX 3: Add error checking for f_getfree.
    FR_Status = f_getfree("", &FreeClusters, &FS_Ptr);
 8001396:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800139a:	3a38      	subs	r2, #56	@ 0x38
 800139c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80013a0:	3b04      	subs	r3, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	48a1      	ldr	r0, [pc, #644]	@ (800162c <SDIO_SDCard_Test+0x2e8>)
 80013a6:	f007 fdda 	bl	8008f5e <f_getfree>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80013b0:	f102 020f 	add.w	r2, r2, #15
 80013b4:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 80013b6:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 80013ba:	f103 030f 	add.w	r3, r3, #15
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d009      	beq.n	80013d8 <SDIO_SDCard_Test+0x94>
    {
      printf("Error! While getting free space, Error Code: (%i)\r\n", FR_Status);
 80013c4:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 80013c8:	f103 030f 	add.w	r3, r3, #15
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4897      	ldr	r0, [pc, #604]	@ (8001630 <SDIO_SDCard_Test+0x2ec>)
 80013d2:	f009 f9f9 	bl	800a7c8 <iprintf>
      break;
 80013d6:	e1be      	b.n	8001756 <SDIO_SDCard_Test+0x412>
    }

    // FIX 4: Correct size calculation for Bytes. Assumes sector size is 512 bytes (FF_MAX_SS).
    TotalSize = (FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 512;
 80013d8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80013dc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	3b02      	subs	r3, #2
 80013e4:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80013e8:	f852 2c78 	ldr.w	r2, [r2, #-120]
 80013ec:	8952      	ldrh	r2, [r2, #10]
 80013ee:	fb02 f303 	mul.w	r3, r2, r3
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80013f8:	f102 0208 	add.w	r2, r2, #8
 80013fc:	6013      	str	r3, [r2, #0]
    FreeSpace = FreeClusters * FS_Ptr->csize * 512;
 80013fe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001402:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001406:	895b      	ldrh	r3, [r3, #10]
 8001408:	461a      	mov	r2, r3
 800140a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800140e:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800141c:	f102 0204 	add.w	r2, r2, #4
 8001420:	6013      	str	r3, [r2, #0]

    printf("Total SD Card Size: %lu Bytes (%.2f MB)\r\n", TotalSize, TotalSize / (1024.0 * 1024.0));
 8001422:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001426:	f103 0308 	add.w	r3, r3, #8
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	f7ff f86a 	bl	8000504 <__aeabi_ui2d>
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b7f      	ldr	r3, [pc, #508]	@ (8001634 <SDIO_SDCard_Test+0x2f0>)
 8001436:	f7ff fa09 	bl	800084c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	f507 5105 	add.w	r1, r7, #8512	@ 0x2140
 8001442:	f101 0108 	add.w	r1, r1, #8
 8001446:	6809      	ldr	r1, [r1, #0]
 8001448:	487b      	ldr	r0, [pc, #492]	@ (8001638 <SDIO_SDCard_Test+0x2f4>)
 800144a:	f009 f9bd 	bl	800a7c8 <iprintf>
    printf("Free SD Card Space: %lu Bytes (%.2f MB)\r\n\n", FreeSpace, FreeSpace / (1024.0 * 1024.0));
 800144e:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001452:	f103 0304 	add.w	r3, r3, #4
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	f7ff f854 	bl	8000504 <__aeabi_ui2d>
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b74      	ldr	r3, [pc, #464]	@ (8001634 <SDIO_SDCard_Test+0x2f0>)
 8001462:	f7ff f9f3 	bl	800084c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	f507 5105 	add.w	r1, r7, #8512	@ 0x2140
 800146e:	f101 0104 	add.w	r1, r1, #4
 8001472:	6809      	ldr	r1, [r1, #0]
 8001474:	4871      	ldr	r0, [pc, #452]	@ (800163c <SDIO_SDCard_Test+0x2f8>)
 8001476:	f009 f9a7 	bl	800a7c8 <iprintf>

    //------------------[ 3. Open A Text File For Write & Write Data ]--------------------
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 800147a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800147e:	3b34      	subs	r3, #52	@ 0x34
 8001480:	220b      	movs	r2, #11
 8001482:	496f      	ldr	r1, [pc, #444]	@ (8001640 <SDIO_SDCard_Test+0x2fc>)
 8001484:	4618      	mov	r0, r3
 8001486:	f007 f807 	bl	8008498 <f_open>
 800148a:	4603      	mov	r3, r0
 800148c:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001490:	f102 020f 	add.w	r2, r2, #15
 8001494:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8001496:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 800149a:	f103 030f 	add.w	r3, r3, #15
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d009      	beq.n	80014b8 <SDIO_SDCard_Test+0x174>
    {
      printf("Error! While Creating/Opening a new file, Error Code: (%i)\r\n", FR_Status);
 80014a4:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 80014a8:	f103 030f 	add.w	r3, r3, #15
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4864      	ldr	r0, [pc, #400]	@ (8001644 <SDIO_SDCard_Test+0x300>)
 80014b2:	f009 f989 	bl	800a7c8 <iprintf>
      break;
 80014b6:	e14e      	b.n	8001756 <SDIO_SDCard_Test+0x412>
    }
    printf("File 'MyTextFile.txt' created & opened. Writing data...\r\n");
 80014b8:	4863      	ldr	r0, [pc, #396]	@ (8001648 <SDIO_SDCard_Test+0x304>)
 80014ba:	f009 f9ed 	bl	800a898 <puts>

    // Write data using f_puts() and f_write()
    f_puts("Hello from STM32 using f_puts()!\n", &Fil);
 80014be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014c2:	3b34      	subs	r3, #52	@ 0x34
 80014c4:	4619      	mov	r1, r3
 80014c6:	4861      	ldr	r0, [pc, #388]	@ (800164c <SDIO_SDCard_Test+0x308>)
 80014c8:	f007 ff20 	bl	800930c <f_puts>
    strcpy(RW_Buffer, "Hello from STM32 using f_write()!\r\n");
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	3b0c      	subs	r3, #12
 80014d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001650 <SDIO_SDCard_Test+0x30c>)
 80014d4:	461c      	mov	r4, r3
 80014d6:	4615      	mov	r5, r2
 80014d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	6023      	str	r3, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	3b0c      	subs	r3, #12
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe fec0 	bl	8000270 <strlen>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80014f6:	f107 0110 	add.w	r1, r7, #16
 80014fa:	390c      	subs	r1, #12
 80014fc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001500:	3834      	subs	r0, #52	@ 0x34
 8001502:	f007 faf0 	bl	8008ae6 <f_write>
    printf("Data written successfully.\r\n\n");
 8001506:	4853      	ldr	r0, [pc, #332]	@ (8001654 <SDIO_SDCard_Test+0x310>)
 8001508:	f009 f9c6 	bl	800a898 <puts>

    // Close the file to save changes
    f_close(&Fil);
 800150c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001510:	3b34      	subs	r3, #52	@ 0x34
 8001512:	4618      	mov	r0, r3
 8001514:	f007 fcf9 	bl	8008f0a <f_close>

    //------------------[ 4. Open The File For Read & Read Its Data ]--------------------
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_READ);
 8001518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800151c:	3b34      	subs	r3, #52	@ 0x34
 800151e:	2201      	movs	r2, #1
 8001520:	4947      	ldr	r1, [pc, #284]	@ (8001640 <SDIO_SDCard_Test+0x2fc>)
 8001522:	4618      	mov	r0, r3
 8001524:	f006 ffb8 	bl	8008498 <f_open>
 8001528:	4603      	mov	r3, r0
 800152a:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800152e:	f102 020f 	add.w	r2, r2, #15
 8001532:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8001534:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001538:	f103 030f 	add.w	r3, r3, #15
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <SDIO_SDCard_Test+0x212>
    {
      printf("Error! While opening 'MyTextFile.txt' for reading, Error Code: (%i)\r\n", FR_Status);
 8001542:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001546:	f103 030f 	add.w	r3, r3, #15
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	4842      	ldr	r0, [pc, #264]	@ (8001658 <SDIO_SDCard_Test+0x314>)
 8001550:	f009 f93a 	bl	800a7c8 <iprintf>
      break;
 8001554:	e0ff      	b.n	8001756 <SDIO_SDCard_Test+0x412>
    }
    printf("Reading data from 'MyTextFile.txt':\r\n");
 8001556:	4841      	ldr	r0, [pc, #260]	@ (800165c <SDIO_SDCard_Test+0x318>)
 8001558:	f009 f99e 	bl	800a898 <puts>

    // Read the entire file's data into the buffer
    // Clear buffer before reading
    memset(RW_Buffer, 0, sizeof(RW_Buffer));
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	3b0c      	subs	r3, #12
 8001562:	22c8      	movs	r2, #200	@ 0xc8
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f009 fa98 	bl	800aa9c <memset>
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 800156c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001570:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8001574:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001578:	3b3c      	subs	r3, #60	@ 0x3c
 800157a:	f107 0110 	add.w	r1, r7, #16
 800157e:	390c      	subs	r1, #12
 8001580:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001584:	3834      	subs	r0, #52	@ 0x34
 8001586:	f007 f94f 	bl	8008828 <f_read>

    // Ensure the buffer is null-terminated before printing, even if f_read fills it
    if (RWC > 0 && RWC < sizeof(RW_Buffer))
 800158a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800158e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00f      	beq.n	80015b6 <SDIO_SDCard_Test+0x272>
 8001596:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800159a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800159e:	2bc7      	cmp	r3, #199	@ 0xc7
 80015a0:	d809      	bhi.n	80015b6 <SDIO_SDCard_Test+0x272>
    {
      RW_Buffer[RWC] = '\0';
 80015a2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80015a6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80015aa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80015ae:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 80015b2:	2100      	movs	r1, #0
 80015b4:	54d1      	strb	r1, [r2, r3]
    }

    printf("-------------------- FILE START --------------------\r\n");
 80015b6:	482a      	ldr	r0, [pc, #168]	@ (8001660 <SDIO_SDCard_Test+0x31c>)
 80015b8:	f009 f96e 	bl	800a898 <puts>
    printf("%s", RW_Buffer);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	3b0c      	subs	r3, #12
 80015c2:	4619      	mov	r1, r3
 80015c4:	4827      	ldr	r0, [pc, #156]	@ (8001664 <SDIO_SDCard_Test+0x320>)
 80015c6:	f009 f8ff 	bl	800a7c8 <iprintf>
    printf("--------------------- FILE END ---------------------\r\n\n");
 80015ca:	4827      	ldr	r0, [pc, #156]	@ (8001668 <SDIO_SDCard_Test+0x324>)
 80015cc:	f009 f964 	bl	800a898 <puts>

    f_close(&Fil);
 80015d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015d4:	3b34      	subs	r3, #52	@ 0x34
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 fc97 	bl	8008f0a <f_close>

    //------------------[ 5. Update The Existing File ]--------------------
    printf("Updating 'MyTextFile.txt'...\r\n");
 80015dc:	4823      	ldr	r0, [pc, #140]	@ (800166c <SDIO_SDCard_Test+0x328>)
 80015de:	f009 f95b 	bl	800a898 <puts>

    // FIX 5: Check f_open result before proceeding.
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_OPEN_APPEND | FA_WRITE);
 80015e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e6:	3b34      	subs	r3, #52	@ 0x34
 80015e8:	2232      	movs	r2, #50	@ 0x32
 80015ea:	4915      	ldr	r1, [pc, #84]	@ (8001640 <SDIO_SDCard_Test+0x2fc>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f006 ff53 	bl	8008498 <f_open>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80015f8:	f102 020f 	add.w	r2, r2, #15
 80015fc:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 80015fe:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001602:	f103 030f 	add.w	r3, r3, #15
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d033      	beq.n	8001674 <SDIO_SDCard_Test+0x330>
    {
      printf("Error! While opening file for update, Error Code: (%i)\r\n", FR_Status);
 800160c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001610:	f103 030f 	add.w	r3, r3, #15
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	4815      	ldr	r0, [pc, #84]	@ (8001670 <SDIO_SDCard_Test+0x32c>)
 800161a:	f009 f8d5 	bl	800a7c8 <iprintf>
      break;
 800161e:	e09a      	b.n	8001756 <SDIO_SDCard_Test+0x412>
 8001620:	0800e180 	.word	0x0800e180
 8001624:	0800e188 	.word	0x0800e188
 8001628:	0800e1bc 	.word	0x0800e1bc
 800162c:	0800e1dc 	.word	0x0800e1dc
 8001630:	0800e1e0 	.word	0x0800e1e0
 8001634:	41300000 	.word	0x41300000
 8001638:	0800e214 	.word	0x0800e214
 800163c:	0800e240 	.word	0x0800e240
 8001640:	0800e26c 	.word	0x0800e26c
 8001644:	0800e27c 	.word	0x0800e27c
 8001648:	0800e2bc 	.word	0x0800e2bc
 800164c:	0800e2f8 	.word	0x0800e2f8
 8001650:	0800e31c 	.word	0x0800e31c
 8001654:	0800e340 	.word	0x0800e340
 8001658:	0800e360 	.word	0x0800e360
 800165c:	0800e3a8 	.word	0x0800e3a8
 8001660:	0800e3d0 	.word	0x0800e3d0
 8001664:	0800e408 	.word	0x0800e408
 8001668:	0800e40c 	.word	0x0800e40c
 800166c:	0800e444 	.word	0x0800e444
 8001670:	0800e464 	.word	0x0800e464
    }

    // Write a new line of text to the end of the file
    FR_Status = f_puts("This new line was appended to the file.\r\n", &Fil);
 8001674:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001678:	3b34      	subs	r3, #52	@ 0x34
 800167a:	4619      	mov	r1, r3
 800167c:	4848      	ldr	r0, [pc, #288]	@ (80017a0 <SDIO_SDCard_Test+0x45c>)
 800167e:	f007 fe45 	bl	800930c <f_puts>
 8001682:	4603      	mov	r3, r0
 8001684:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001688:	f102 020f 	add.w	r2, r2, #15
 800168c:	7013      	strb	r3, [r2, #0]
    if (FR_Status < 0) // f_puts returns a negative number on error
    {
      printf("Error! While writing appended data.\r\n");
    }

    f_close(&Fil);
 800168e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001692:	3b34      	subs	r3, #52	@ 0x34
 8001694:	4618      	mov	r0, r3
 8001696:	f007 fc38 	bl	8008f0a <f_close>
    printf("File updated.\r\n\n");
 800169a:	4842      	ldr	r0, [pc, #264]	@ (80017a4 <SDIO_SDCard_Test+0x460>)
 800169c:	f009 f8fc 	bl	800a898 <puts>

    // (Read back the updated file)
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_READ);
 80016a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016a4:	3b34      	subs	r3, #52	@ 0x34
 80016a6:	2201      	movs	r2, #1
 80016a8:	493f      	ldr	r1, [pc, #252]	@ (80017a8 <SDIO_SDCard_Test+0x464>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f006 fef4 	bl	8008498 <f_open>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80016b6:	f102 020f 	add.w	r2, r2, #15
 80016ba:	7013      	strb	r3, [r2, #0]
    memset(RW_Buffer, 0, sizeof(RW_Buffer));
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	3b0c      	subs	r3, #12
 80016c2:	22c8      	movs	r2, #200	@ 0xc8
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f009 f9e8 	bl	800aa9c <memset>
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 80016cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80016d0:	f853 2c68 	ldr.w	r2, [r3, #-104]
 80016d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d8:	3b3c      	subs	r3, #60	@ 0x3c
 80016da:	f107 0110 	add.w	r1, r7, #16
 80016de:	390c      	subs	r1, #12
 80016e0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80016e4:	3834      	subs	r0, #52	@ 0x34
 80016e6:	f007 f89f 	bl	8008828 <f_read>

    printf("Data read from 'MyTextFile.txt' after update:\r\n");
 80016ea:	4830      	ldr	r0, [pc, #192]	@ (80017ac <SDIO_SDCard_Test+0x468>)
 80016ec:	f009 f8d4 	bl	800a898 <puts>
    printf("-------------------- FILE START --------------------\r\n");
 80016f0:	482f      	ldr	r0, [pc, #188]	@ (80017b0 <SDIO_SDCard_Test+0x46c>)
 80016f2:	f009 f8d1 	bl	800a898 <puts>
    printf("%s", RW_Buffer);
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	3b0c      	subs	r3, #12
 80016fc:	4619      	mov	r1, r3
 80016fe:	482d      	ldr	r0, [pc, #180]	@ (80017b4 <SDIO_SDCard_Test+0x470>)
 8001700:	f009 f862 	bl	800a7c8 <iprintf>
    printf("--------------------- FILE END ---------------------\r\n\n");
 8001704:	482c      	ldr	r0, [pc, #176]	@ (80017b8 <SDIO_SDCard_Test+0x474>)
 8001706:	f009 f8c7 	bl	800a898 <puts>

    f_close(&Fil);
 800170a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800170e:	3b34      	subs	r3, #52	@ 0x34
 8001710:	4618      	mov	r0, r3
 8001712:	f007 fbfa 	bl	8008f0a <f_close>

    //------------------[ 6. Delete The Text File ]--------------------
    // FIX 6: Uncomment and fix the unlink section.
    printf("Deleting 'MyTextFile.txt'...\r\n");
 8001716:	4829      	ldr	r0, [pc, #164]	@ (80017bc <SDIO_SDCard_Test+0x478>)
 8001718:	f009 f8be 	bl	800a898 <puts>
    FR_Status = f_unlink("MyTextFile.txt");
 800171c:	4822      	ldr	r0, [pc, #136]	@ (80017a8 <SDIO_SDCard_Test+0x464>)
 800171e:	f007 fcd3 	bl	80090c8 <f_unlink>
 8001722:	4603      	mov	r3, r0
 8001724:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001728:	f102 020f 	add.w	r2, r2, #15
 800172c:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 800172e:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001732:	f103 030f 	add.w	r3, r3, #15
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d009      	beq.n	8001750 <SDIO_SDCard_Test+0x40c>
    {
      printf("Error! While deleting the file, Error Code: (%i)\r\n", FR_Status);
 800173c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001740:	f103 030f 	add.w	r3, r3, #15
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	481d      	ldr	r0, [pc, #116]	@ (80017c0 <SDIO_SDCard_Test+0x47c>)
 800174a:	f009 f83d 	bl	800a7c8 <iprintf>
 800174e:	e002      	b.n	8001756 <SDIO_SDCard_Test+0x412>
    }
    else
    {
      printf("File deleted successfully.\r\n");
 8001750:	481c      	ldr	r0, [pc, #112]	@ (80017c4 <SDIO_SDCard_Test+0x480>)
 8001752:	f009 f8a1 	bl	800a898 <puts>
    }

  } while (0);

  //------------------[ 7. Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, SDPath, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	491b      	ldr	r1, [pc, #108]	@ (80017c8 <SDIO_SDCard_Test+0x484>)
 800175a:	2000      	movs	r0, #0
 800175c:	f006 fe56 	bl	800840c <f_mount>
 8001760:	4603      	mov	r3, r0
 8001762:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001766:	f102 020f 	add.w	r2, r2, #15
 800176a:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 800176c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001770:	f103 030f 	add.w	r3, r3, #15
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <SDIO_SDCard_Test+0x44a>
  {
    printf("\r\nError! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 800177a:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 800177e:	f103 030f 	add.w	r3, r3, #15
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	4811      	ldr	r0, [pc, #68]	@ (80017cc <SDIO_SDCard_Test+0x488>)
 8001788:	f009 f81e 	bl	800a7c8 <iprintf>
  }
  else
  {
    printf("\r\nTest complete. SD Card Un-mounted Successfully!\r\n");
  }
}
 800178c:	e002      	b.n	8001794 <SDIO_SDCard_Test+0x450>
    printf("\r\nTest complete. SD Card Un-mounted Successfully!\r\n");
 800178e:	4810      	ldr	r0, [pc, #64]	@ (80017d0 <SDIO_SDCard_Test+0x48c>)
 8001790:	f009 f882 	bl	800a898 <puts>
}
 8001794:	bf00      	nop
 8001796:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bdb0      	pop	{r4, r5, r7, pc}
 80017a0:	0800e4a0 	.word	0x0800e4a0
 80017a4:	0800e4cc 	.word	0x0800e4cc
 80017a8:	0800e26c 	.word	0x0800e26c
 80017ac:	0800e4dc 	.word	0x0800e4dc
 80017b0:	0800e3d0 	.word	0x0800e3d0
 80017b4:	0800e408 	.word	0x0800e408
 80017b8:	0800e40c 	.word	0x0800e40c
 80017bc:	0800e50c 	.word	0x0800e50c
 80017c0:	0800e52c 	.word	0x0800e52c
 80017c4:	0800e560 	.word	0x0800e560
 80017c8:	0800e180 	.word	0x0800e180
 80017cc:	0800e57c 	.word	0x0800e57c
 80017d0:	0800e5b4 	.word	0x0800e5b4

080017d4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <Error_Handler+0x8>

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a0f      	ldr	r2, [pc, #60]	@ (800182c <HAL_MspInit+0x4c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	@ (800182c <HAL_MspInit+0x4c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	@ 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a35      	ldr	r2, [pc, #212]	@ (8001924 <HAL_SD_MspInit+0xf4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d163      	bne.n	800191a <HAL_SD_MspInit+0xea>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	4a33      	ldr	r2, [pc, #204]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 800185c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001860:	6453      	str	r3, [r2, #68]	@ 0x44
 8001862:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a2c      	ldr	r2, [pc, #176]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b26      	ldr	r3, [pc, #152]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a25      	ldr	r2, [pc, #148]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <HAL_SD_MspInit+0xf8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018b8:	230c      	movs	r3, #12
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	481a      	ldr	r0, [pc, #104]	@ (800192c <HAL_SD_MspInit+0xfc>)
 80018c4:	f000 fc1e 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018da:	230c      	movs	r3, #12
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4811      	ldr	r0, [pc, #68]	@ (800192c <HAL_SD_MspInit+0xfc>)
 80018e6:	f000 fc0d 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018ea:	2304      	movs	r3, #4
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018fa:	230c      	movs	r3, #12
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	480a      	ldr	r0, [pc, #40]	@ (8001930 <HAL_SD_MspInit+0x100>)
 8001906:	f000 fbfd 	bl	8002104 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2031      	movs	r0, #49	@ 0x31
 8001910:	f000 fb2f 	bl	8001f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001914:	2031      	movs	r0, #49	@ 0x31
 8001916:	f000 fb48 	bl	8001faa <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40023800 	.word	0x40023800
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00

08001934 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	@ 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a36      	ldr	r2, [pc, #216]	@ (8001a2c <HAL_UART_MspInit+0xf8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d12d      	bne.n	80019b2 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a34      	ldr	r2, [pc, #208]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800198e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019a0:	2307      	movs	r3, #7
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4822      	ldr	r0, [pc, #136]	@ (8001a34 <HAL_UART_MspInit+0x100>)
 80019ac:	f000 fbaa 	bl	8002104 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b0:	e038      	b.n	8001a24 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a20      	ldr	r2, [pc, #128]	@ (8001a38 <HAL_UART_MspInit+0x104>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d133      	bne.n	8001a24 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 80019c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80019cc:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	4a13      	ldr	r2, [pc, #76]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_UART_MspInit+0xfc>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019f4:	230c      	movs	r3, #12
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a04:	2307      	movs	r3, #7
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <HAL_UART_MspInit+0x100>)
 8001a10:	f000 fb78 	bl	8002104 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2026      	movs	r0, #38	@ 0x26
 8001a1a:	f000 faaa 	bl	8001f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a1e:	2026      	movs	r0, #38	@ 0x26
 8001a20:	f000 fac3 	bl	8001faa <HAL_NVIC_EnableIRQ>
}
 8001a24:	bf00      	nop
 8001a26:	3730      	adds	r7, #48	@ 0x30
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40004400 	.word	0x40004400

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <NMI_Handler+0x4>

08001a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <MemManage_Handler+0x4>

08001a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a92:	f000 f94f 	bl	8001d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <USART2_IRQHandler+0x10>)
 8001aa2:	f002 fbc1 	bl	8004228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200002bc 	.word	0x200002bc

08001ab0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <SDIO_IRQHandler+0x10>)
 8001ab6:	f001 fd4f 	bl	8003558 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200001f0 	.word	0x200001f0

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	f009 f82f 	bl	800ab40 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b06:	bf00      	nop
 8001b08:	e7fd      	b.n	8001b06 <_exit+0x12>

08001b0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e00a      	b.n	8001b32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1c:	f3af 8000 	nop.w
 8001b20:	4601      	mov	r1, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	60ba      	str	r2, [r7, #8]
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbf0      	blt.n	8001b1c <_read+0x12>
  }

  return len;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_isatty>:

int _isatty(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f008 ffb0 	bl	800ab40 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20020000 	.word	0x20020000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	20000304 	.word	0x20000304
 8001c14:	20000b50 	.word	0x20000b50

08001c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c40:	f7ff ffea 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	@ (8001c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f008 ff6f 	bl	800ab4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6e:	f7ff f9f5 	bl	800105c <main>
  bx  lr    
 8001c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c80:	0800eef4 	.word	0x0800eef4
  ldr r2, =_sbss
 8001c84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c88:	20000b4c 	.word	0x20000b4c

08001c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <HAL_Init+0x40>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_Init+0x40>)
 8001ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <HAL_Init+0x40>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 f94f 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f000 f808 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc4:	f7ff fd8c 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_InitTick+0x54>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_InitTick+0x58>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f967 	bl	8001fc6 <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00e      	b.n	8001d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d80a      	bhi.n	8001d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f000 f92f 	bl	8001f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d14:	4a06      	ldr	r2, [pc, #24]	@ (8001d30 <HAL_InitTick+0x5c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_IncTick+0x20>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_IncTick+0x24>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <HAL_IncTick+0x24>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000308 	.word	0x20000308

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <HAL_GetTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000308 	.word	0x20000308

08001d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff ffee 	bl	8001d5c <HAL_GetTick>
 8001d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d005      	beq.n	8001d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_Delay+0x44>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9a:	bf00      	nop
 8001d9c:	f7ff ffde 	bl	8001d5c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d8f7      	bhi.n	8001d9c <HAL_Delay+0x28>
  {
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000008 	.word	0x20000008

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4907      	ldr	r1, [pc, #28]	@ (8001e58 <__NVIC_EnableIRQ+0x38>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	@ (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	@ 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f28:	d301      	bcc.n	8001f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00f      	b.n	8001f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <SysTick_Config+0x40>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f36:	210f      	movs	r1, #15
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f7ff ff8e 	bl	8001e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <SysTick_Config+0x40>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <SysTick_Config+0x40>)
 8001f48:	2207      	movs	r2, #7
 8001f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff29 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f84:	f7ff ff3e 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7ff ff8e 	bl	8001eb0 <NVIC_EncodePriority>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff5d 	bl	8001e5c <__NVIC_SetPriority>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff31 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ffa2 	bl	8001f18 <SysTick_Config>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff feb6 	bl	8001d5c <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d008      	beq.n	8002010 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2280      	movs	r2, #128	@ 0x80
 8002002:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e052      	b.n	80020b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0216 	bic.w	r2, r2, #22
 800201e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800202e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <HAL_DMA_Abort+0x62>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0208 	bic.w	r2, r2, #8
 800204e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002060:	e013      	b.n	800208a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002062:	f7ff fe7b 	bl	8001d5c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b05      	cmp	r3, #5
 800206e:	d90c      	bls.n	800208a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e015      	b.n	80020b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e4      	bne.n	8002062 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209c:	223f      	movs	r2, #63	@ 0x3f
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d004      	beq.n	80020dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e00c      	b.n	80020f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2205      	movs	r2, #5
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e16b      	b.n	80023f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002120:	2201      	movs	r2, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	f040 815a 	bne.w	80023f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d005      	beq.n	8002156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002152:	2b02      	cmp	r3, #2
 8002154:	d130      	bne.n	80021b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 0201 	and.w	r2, r3, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d017      	beq.n	80021f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d123      	bne.n	8002248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	08da      	lsrs	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3208      	adds	r2, #8
 8002208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	69b9      	ldr	r1, [r7, #24]
 8002244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0203 	and.w	r2, r3, #3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80b4 	beq.w	80023f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b60      	ldr	r3, [pc, #384]	@ (8002410 <HAL_GPIO_Init+0x30c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	4a5f      	ldr	r2, [pc, #380]	@ (8002410 <HAL_GPIO_Init+0x30c>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002298:	6453      	str	r3, [r2, #68]	@ 0x44
 800229a:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_GPIO_Init+0x30c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002414 <HAL_GPIO_Init+0x310>)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a52      	ldr	r2, [pc, #328]	@ (8002418 <HAL_GPIO_Init+0x314>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d02b      	beq.n	800232a <HAL_GPIO_Init+0x226>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a51      	ldr	r2, [pc, #324]	@ (800241c <HAL_GPIO_Init+0x318>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d025      	beq.n	8002326 <HAL_GPIO_Init+0x222>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a50      	ldr	r2, [pc, #320]	@ (8002420 <HAL_GPIO_Init+0x31c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01f      	beq.n	8002322 <HAL_GPIO_Init+0x21e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002424 <HAL_GPIO_Init+0x320>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d019      	beq.n	800231e <HAL_GPIO_Init+0x21a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002428 <HAL_GPIO_Init+0x324>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_GPIO_Init+0x216>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4d      	ldr	r2, [pc, #308]	@ (800242c <HAL_GPIO_Init+0x328>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00d      	beq.n	8002316 <HAL_GPIO_Init+0x212>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002430 <HAL_GPIO_Init+0x32c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0x20e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4b      	ldr	r2, [pc, #300]	@ (8002434 <HAL_GPIO_Init+0x330>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d101      	bne.n	800230e <HAL_GPIO_Init+0x20a>
 800230a:	2307      	movs	r3, #7
 800230c:	e00e      	b.n	800232c <HAL_GPIO_Init+0x228>
 800230e:	2308      	movs	r3, #8
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x228>
 8002312:	2306      	movs	r3, #6
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x228>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x228>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x228>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x228>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x228>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x228>
 800232a:	2300      	movs	r3, #0
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800233c:	4935      	ldr	r1, [pc, #212]	@ (8002414 <HAL_GPIO_Init+0x310>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234a:	4b3b      	ldr	r3, [pc, #236]	@ (8002438 <HAL_GPIO_Init+0x334>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236e:	4a32      	ldr	r2, [pc, #200]	@ (8002438 <HAL_GPIO_Init+0x334>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002374:	4b30      	ldr	r3, [pc, #192]	@ (8002438 <HAL_GPIO_Init+0x334>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002398:	4a27      	ldr	r2, [pc, #156]	@ (8002438 <HAL_GPIO_Init+0x334>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800239e:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <HAL_GPIO_Init+0x334>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002438 <HAL_GPIO_Init+0x334>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_GPIO_Init+0x334>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ec:	4a12      	ldr	r2, [pc, #72]	@ (8002438 <HAL_GPIO_Init+0x334>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	f67f ae90 	bls.w	8002120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3724      	adds	r7, #36	@ 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40013800 	.word	0x40013800
 8002418:	40020000 	.word	0x40020000
 800241c:	40020400 	.word	0x40020400
 8002420:	40020800 	.word	0x40020800
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40021000 	.word	0x40021000
 800242c:	40021400 	.word	0x40021400
 8002430:	40021800 	.word	0x40021800
 8002434:	40021c00 	.word	0x40021c00
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e267      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d075      	beq.n	800257a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800248e:	4b88      	ldr	r3, [pc, #544]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d00c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b85      	ldr	r3, [pc, #532]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d112      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4b82      	ldr	r3, [pc, #520]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024b2:	d10b      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	4b7e      	ldr	r3, [pc, #504]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05b      	beq.n	8002578 <HAL_RCC_OscConfig+0x108>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d157      	bne.n	8002578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e242      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d4:	d106      	bne.n	80024e4 <HAL_RCC_OscConfig+0x74>
 80024d6:	4b76      	ldr	r3, [pc, #472]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a75      	ldr	r2, [pc, #468]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b70      	ldr	r3, [pc, #448]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6f      	ldr	r2, [pc, #444]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b6d      	ldr	r3, [pc, #436]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6c      	ldr	r2, [pc, #432]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 8002508:	4b69      	ldr	r3, [pc, #420]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a68      	ldr	r2, [pc, #416]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b66      	ldr	r3, [pc, #408]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a65      	ldr	r2, [pc, #404]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800251e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff fc18 	bl	8001d5c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff fc14 	bl	8001d5c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	@ 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e207      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b5b      	ldr	r3, [pc, #364]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xc0>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fc04 	bl	8001d5c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff fc00 	bl	8001d5c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1f3      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b51      	ldr	r3, [pc, #324]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0xe8>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002586:	4b4a      	ldr	r3, [pc, #296]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b44      	ldr	r3, [pc, #272]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1c7      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b3b      	ldr	r3, [pc, #236]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4937      	ldr	r1, [pc, #220]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	e03a      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e0:	4b34      	ldr	r3, [pc, #208]	@ (80026b4 <HAL_RCC_OscConfig+0x244>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7ff fbb9 	bl	8001d5c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7ff fbb5 	bl	8001d5c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1a8      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4925      	ldr	r1, [pc, #148]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b24      	ldr	r3, [pc, #144]	@ (80026b4 <HAL_RCC_OscConfig+0x244>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7ff fb98 	bl	8001d5c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002630:	f7ff fb94 	bl	8001d5c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e187      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d036      	beq.n	80026c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_RCC_OscConfig+0x248>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7ff fb78 	bl	8001d5c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7ff fb74 	bl	8001d5c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e167      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x200>
 800268e:	e01b      	b.n	80026c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_RCC_OscConfig+0x248>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff fb61 	bl	8001d5c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	e00e      	b.n	80026bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff fb5d 	bl	8001d5c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d907      	bls.n	80026bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e150      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
 80026b0:	40023800 	.word	0x40023800
 80026b4:	42470000 	.word	0x42470000
 80026b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b88      	ldr	r3, [pc, #544]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ea      	bne.n	800269e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8097 	beq.w	8002804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b81      	ldr	r3, [pc, #516]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b7d      	ldr	r3, [pc, #500]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a7c      	ldr	r2, [pc, #496]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b7a      	ldr	r3, [pc, #488]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b77      	ldr	r3, [pc, #476]	@ (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b74      	ldr	r3, [pc, #464]	@ (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a73      	ldr	r2, [pc, #460]	@ (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7ff fb1d 	bl	8001d5c <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7ff fb19 	bl	8001d5c <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e10c      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b6a      	ldr	r3, [pc, #424]	@ (80028e4 <HAL_RCC_OscConfig+0x474>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x2ea>
 800274c:	4b64      	ldr	r3, [pc, #400]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4a63      	ldr	r2, [pc, #396]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	@ 0x70
 8002758:	e01c      	b.n	8002794 <HAL_RCC_OscConfig+0x324>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x30c>
 8002762:	4b5f      	ldr	r3, [pc, #380]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	4a5e      	ldr	r2, [pc, #376]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	@ 0x70
 800276e:	4b5c      	ldr	r3, [pc, #368]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	4a5b      	ldr	r2, [pc, #364]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6713      	str	r3, [r2, #112]	@ 0x70
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x324>
 800277c:	4b58      	ldr	r3, [pc, #352]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a57      	ldr	r2, [pc, #348]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
 8002788:	4b55      	ldr	r3, [pc, #340]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	4a54      	ldr	r2, [pc, #336]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7ff fade 	bl	8001d5c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7ff fada 	bl	8001d5c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0cb      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	4b49      	ldr	r3, [pc, #292]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ee      	beq.n	80027a4 <HAL_RCC_OscConfig+0x334>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7ff fac8 	bl	8001d5c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7ff fac4 	bl	8001d5c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0b5      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e6:	4b3e      	ldr	r3, [pc, #248]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ee      	bne.n	80027d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b39      	ldr	r3, [pc, #228]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	4a38      	ldr	r2, [pc, #224]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002802:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a1 	beq.w	8002950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280e:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	d05c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d141      	bne.n	80028a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b31      	ldr	r3, [pc, #196]	@ (80028e8 <HAL_RCC_OscConfig+0x478>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fa98 	bl	8001d5c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7ff fa94 	bl	8001d5c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e087      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	3b01      	subs	r3, #1
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	491b      	ldr	r1, [pc, #108]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <HAL_RCC_OscConfig+0x478>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff fa6d 	bl	8001d5c <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7ff fa69 	bl	8001d5c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e05c      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x416>
 80028a4:	e054      	b.n	8002950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <HAL_RCC_OscConfig+0x478>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7ff fa56 	bl	8001d5c <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7ff fa52 	bl	8001d5c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e045      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x444>
 80028d2:	e03d      	b.n	8002950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e038      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <HAL_RCC_OscConfig+0x4ec>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d028      	beq.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d121      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d11a      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	3b01      	subs	r3, #1
 8002936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0cc      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b68      	ldr	r3, [pc, #416]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d90c      	bls.n	800299c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b65      	ldr	r3, [pc, #404]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b63      	ldr	r3, [pc, #396]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b8      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b4:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a58      	ldr	r2, [pc, #352]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029cc:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a52      	ldr	r2, [pc, #328]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b50      	ldr	r3, [pc, #320]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	494d      	ldr	r1, [pc, #308]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d044      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d119      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e067      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4934      	ldr	r1, [pc, #208]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a50:	f7ff f984 	bl	8001d5c <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7ff f980 	bl	8001d5c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e04f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b25      	ldr	r3, [pc, #148]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d20c      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b20      	ldr	r3, [pc, #128]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e032      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4916      	ldr	r1, [pc, #88]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490e      	ldr	r1, [pc, #56]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae6:	f000 f821 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	490a      	ldr	r1, [pc, #40]	@ (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	4a09      	ldr	r2, [pc, #36]	@ (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f8e4 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	0800e63c 	.word	0x0800e63c
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000004 	.word	0x20000004

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b090      	sub	sp, #64	@ 0x40
 8002b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b44:	4b59      	ldr	r3, [pc, #356]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d00d      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x40>
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	f200 80a1 	bhi.w	8002c98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b5e:	e09b      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b53      	ldr	r3, [pc, #332]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b64:	e09b      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b66:	4b53      	ldr	r3, [pc, #332]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b6a:	e098      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b76:	4b4d      	ldr	r3, [pc, #308]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d028      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b82:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	2200      	movs	r2, #0
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b94:	2100      	movs	r1, #0
 8002b96:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b98:	fb03 f201 	mul.w	r2, r3, r1
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a43      	ldr	r2, [pc, #268]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8002baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bac:	460a      	mov	r2, r1
 8002bae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb2:	4413      	add	r3, r2
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	2200      	movs	r2, #0
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bc6:	f7fe f85f 	bl	8000c88 <__aeabi_uldivmod>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4613      	mov	r3, r2
 8002bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bd2:	e053      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd4:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	2200      	movs	r2, #0
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	617a      	str	r2, [r7, #20]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002be6:	f04f 0b00 	mov.w	fp, #0
 8002bea:	4652      	mov	r2, sl
 8002bec:	465b      	mov	r3, fp
 8002bee:	f04f 0000 	mov.w	r0, #0
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	0159      	lsls	r1, r3, #5
 8002bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfc:	0150      	lsls	r0, r2, #5
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	ebb2 080a 	subs.w	r8, r2, sl
 8002c06:	eb63 090b 	sbc.w	r9, r3, fp
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c22:	eb63 0509 	sbc.w	r5, r3, r9
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	00eb      	lsls	r3, r5, #3
 8002c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c34:	00e2      	lsls	r2, r4, #3
 8002c36:	4614      	mov	r4, r2
 8002c38:	461d      	mov	r5, r3
 8002c3a:	eb14 030a 	adds.w	r3, r4, sl
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	eb45 030b 	adc.w	r3, r5, fp
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c52:	4629      	mov	r1, r5
 8002c54:	028b      	lsls	r3, r1, #10
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	028a      	lsls	r2, r1, #10
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c66:	2200      	movs	r2, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c70:	f7fe f80a 	bl	8000c88 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3740      	adds	r7, #64	@ 0x40
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	017d7840 	.word	0x017d7840

08002cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000000 	.word	0x20000000

08002cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd4:	f7ff fff0 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0a9b      	lsrs	r3, r3, #10
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	@ (8002cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	0800e64c 	.word	0x0800e64c

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cfc:	f7ff ffdc 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0b5b      	lsrs	r3, r3, #13
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4903      	ldr	r1, [pc, #12]	@ (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	0800e64c 	.word	0x0800e64c

08002d20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e022      	b.n	8002d78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fe fd73 	bl	8001830 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f814 	bl	8002d80 <HAL_SD_InitCard>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00a      	b.n	8002d78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	b08e      	sub	sp, #56	@ 0x38
 8002d84:	af04      	add	r7, sp, #16
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002d9c:	2376      	movs	r3, #118	@ 0x76
 8002d9e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681d      	ldr	r5, [r3, #0]
 8002da4:	466c      	mov	r4, sp
 8002da6:	f107 0318 	add.w	r3, r7, #24
 8002daa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db8:	4628      	mov	r0, r5
 8002dba:	f002 f917 	bl	8004fec <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002e68 <HAL_SD_InitCard+0xe8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 f958 	bl	800507e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002dce:	4b26      	ldr	r3, [pc, #152]	@ (8002e68 <HAL_SD_InitCard+0xe8>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f7fe ffcd 	bl	8001d74 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f001 f878 	bl	8003ed0 <SD_PowerON>
 8002de0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e02e      	b.n	8002e5e <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 ff97 	bl	8003d34 <SD_InitCard>
 8002e06:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e01b      	b.n	8002e5e <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 f9b7 	bl	80051a2 <SDMMC_CmdBlockLength>
 8002e34:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00f      	beq.n	8002e5c <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <HAL_SD_InitCard+0xec>)
 8002e42:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3728      	adds	r7, #40	@ 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	422580a0 	.word	0x422580a0
 8002e6c:	004005ff 	.word	0x004005ff

08002e70 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b092      	sub	sp, #72	@ 0x48
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e7e:	f7fe ff6d 	bl	8001d5c <HAL_GetTick>
 8002e82:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1c5      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	f040 81b8 	bne.w	8003220 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002eb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	441a      	add	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d907      	bls.n	8002ed4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e1ac      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d002      	beq.n	8002ef2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eee:	025b      	lsls	r3, r3, #9
 8002ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	025b      	lsls	r3, r3, #9
 8002efc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002efe:	2390      	movs	r3, #144	@ 0x90
 8002f00:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f02:	2302      	movs	r3, #2
 8002f04:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f107 0214 	add.w	r2, r7, #20
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 f916 	bl	800514a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d90a      	bls.n	8002f3a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2202      	movs	r2, #2
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f30:	4618      	mov	r0, r3
 8002f32:	f002 f97a 	bl	800522a <SDMMC_CmdReadMultiBlock>
 8002f36:	6478      	str	r0, [r7, #68]	@ 0x44
 8002f38:	e009      	b.n	8002f4e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 f94d 	bl	80051e6 <SDMMC_CmdReadSingleBlock>
 8002f4c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d012      	beq.n	8002f7a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a7e      	ldr	r2, [pc, #504]	@ (8003154 <HAL_SD_ReadBlocks+0x2e4>)
 8002f5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f62:	431a      	orrs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e159      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f7e:	e061      	b.n	8003044 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d03c      	beq.n	8003008 <HAL_SD_ReadBlocks+0x198>
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d039      	beq.n	8003008 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f98:	e033      	b.n	8003002 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 f84f 	bl	8005042 <SDIO_ReadFIFO>
 8002fa4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fdc:	3301      	adds	r3, #1
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe8:	0e1b      	lsrs	r3, r3, #24
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ffe:	3301      	adds	r3, #1
 8003000:	643b      	str	r3, [r7, #64]	@ 0x40
 8003002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003004:	2b07      	cmp	r3, #7
 8003006:	d9c8      	bls.n	8002f9a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003008:	f7fe fea8 	bl	8001d5c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003014:	429a      	cmp	r2, r3
 8003016:	d902      	bls.n	800301e <HAL_SD_ReadBlocks+0x1ae>
 8003018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800301a:	2b00      	cmp	r3, #0
 800301c:	d112      	bne.n	8003044 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a4c      	ldr	r2, [pc, #304]	@ (8003154 <HAL_SD_ReadBlocks+0x2e4>)
 8003024:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0f4      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800304a:	f240 332a 	movw	r3, #810	@ 0x32a
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d095      	beq.n	8002f80 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d022      	beq.n	80030a8 <HAL_SD_ReadBlocks+0x238>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d91f      	bls.n	80030a8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	2b03      	cmp	r3, #3
 800306e:	d01b      	beq.n	80030a8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f002 f93f 	bl	80052f8 <SDMMC_CmdStopTransfer>
 800307a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800307c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800307e:	2b00      	cmp	r3, #0
 8003080:	d012      	beq.n	80030a8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a33      	ldr	r2, [pc, #204]	@ (8003154 <HAL_SD_ReadBlocks+0x2e4>)
 8003088:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800308e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0c2      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_SD_ReadBlocks+0x254>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a22      	ldr	r2, [pc, #136]	@ (8003154 <HAL_SD_ReadBlocks+0x2e4>)
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	f043 0208 	orr.w	r2, r3, #8
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0a1      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d012      	beq.n	800311e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a15      	ldr	r2, [pc, #84]	@ (8003154 <HAL_SD_ReadBlocks+0x2e4>)
 80030fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	f043 0202 	orr.w	r2, r3, #2
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e087      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d064      	beq.n	80031f6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a08      	ldr	r2, [pc, #32]	@ (8003154 <HAL_SD_ReadBlocks+0x2e4>)
 8003132:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06d      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
 8003152:	bf00      	nop
 8003154:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f001 ff70 	bl	8005042 <SDIO_ReadFIFO>
 8003162:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003166:	b2da      	uxtb	r2, r3
 8003168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800316c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316e:	3301      	adds	r3, #1
 8003170:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003174:	3b01      	subs	r3, #1
 8003176:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	b2da      	uxtb	r2, r3
 800317e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003180:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003184:	3301      	adds	r3, #1
 8003186:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318a:	3b01      	subs	r3, #1
 800318c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800318e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	b2da      	uxtb	r2, r3
 8003194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003196:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319a:	3301      	adds	r3, #1
 800319c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800319e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a0:	3b01      	subs	r3, #1
 80031a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80031a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a6:	0e1b      	lsrs	r3, r3, #24
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b0:	3301      	adds	r3, #1
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b6:	3b01      	subs	r3, #1
 80031b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031ba:	f7fe fdcf 	bl	8001d5c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d902      	bls.n	80031d0 <HAL_SD_ReadBlocks+0x360>
 80031ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d112      	bne.n	80031f6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_SD_ReadBlocks+0x3c8>)
 80031d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e01b      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_SD_ReadBlocks+0x39a>
 8003204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1a6      	bne.n	8003158 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003212:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e006      	b.n	800322e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3748      	adds	r7, #72	@ 0x48
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	004005ff 	.word	0x004005ff

0800323c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b092      	sub	sp, #72	@ 0x48
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800324a:	f7fe fd87 	bl	8001d5c <HAL_GetTick>
 800324e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d107      	bne.n	800326e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e16d      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	f040 8160 	bne.w	800353c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	441a      	add	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	429a      	cmp	r2, r3
 800328e:	d907      	bls.n	80032a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e154      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d002      	beq.n	80032be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80032b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ba:	025b      	lsls	r3, r3, #9
 80032bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	025b      	lsls	r3, r3, #9
 80032c8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032ca:	2390      	movs	r3, #144	@ 0x90
 80032cc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f107 0218 	add.w	r2, r7, #24
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 ff30 	bl	800514a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d90a      	bls.n	8003306 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 ffd8 	bl	80052b2 <SDMMC_CmdWriteMultiBlock>
 8003302:	6478      	str	r0, [r7, #68]	@ 0x44
 8003304:	e009      	b.n	800331a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2210      	movs	r2, #16
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003312:	4618      	mov	r0, r3
 8003314:	f001 ffab 	bl	800526e <SDMMC_CmdWriteSingleBlock>
 8003318:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800331a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a8b      	ldr	r2, [pc, #556]	@ (8003554 <HAL_SD_WriteBlocks+0x318>)
 8003326:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800332c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800332e:	431a      	orrs	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e101      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800334a:	e065      	b.n	8003418 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d040      	beq.n	80033dc <HAL_SD_WriteBlocks+0x1a0>
 800335a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d03d      	beq.n	80033dc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003360:	2300      	movs	r3, #0
 8003362:	643b      	str	r3, [r7, #64]	@ 0x40
 8003364:	e037      	b.n	80033d6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	3301      	adds	r3, #1
 8003370:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003374:	3b01      	subs	r3, #1
 8003376:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	021a      	lsls	r2, r3, #8
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003386:	3301      	adds	r3, #1
 8003388:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800338a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338c:	3b01      	subs	r3, #1
 800338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	041a      	lsls	r2, r3, #16
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800339c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339e:	3301      	adds	r3, #1
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a4:	3b01      	subs	r3, #1
 80033a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80033a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	061a      	lsls	r2, r3, #24
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b6:	3301      	adds	r3, #1
 80033b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033bc:	3b01      	subs	r3, #1
 80033be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f107 0214 	add.w	r2, r7, #20
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fe46 	bl	800505c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80033d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d2:	3301      	adds	r3, #1
 80033d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80033d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d8:	2b07      	cmp	r3, #7
 80033da:	d9c4      	bls.n	8003366 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80033dc:	f7fe fcbe 	bl	8001d5c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d902      	bls.n	80033f2 <HAL_SD_WriteBlocks+0x1b6>
 80033ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d112      	bne.n	8003418 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a57      	ldr	r2, [pc, #348]	@ (8003554 <HAL_SD_WriteBlocks+0x318>)
 80033f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e098      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800341e:	f240 331a 	movw	r3, #794	@ 0x31a
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d091      	beq.n	800334c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d022      	beq.n	800347c <HAL_SD_WriteBlocks+0x240>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d91f      	bls.n	800347c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	2b03      	cmp	r3, #3
 8003442:	d01b      	beq.n	800347c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f001 ff55 	bl	80052f8 <SDMMC_CmdStopTransfer>
 800344e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003452:	2b00      	cmp	r3, #0
 8003454:	d012      	beq.n	800347c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a3e      	ldr	r2, [pc, #248]	@ (8003554 <HAL_SD_WriteBlocks+0x318>)
 800345c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e066      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_SD_WriteBlocks+0x25c>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003494:	2b00      	cmp	r3, #0
 8003496:	d012      	beq.n	80034be <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2d      	ldr	r2, [pc, #180]	@ (8003554 <HAL_SD_WriteBlocks+0x318>)
 800349e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	f043 0208 	orr.w	r2, r3, #8
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e045      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a20      	ldr	r2, [pc, #128]	@ (8003554 <HAL_SD_WriteBlocks+0x318>)
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d8:	f043 0202 	orr.w	r2, r3, #2
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e02b      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <HAL_SD_WriteBlocks+0x318>)
 8003506:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	f043 0210 	orr.w	r2, r3, #16
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e011      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800352e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e006      	b.n	800354a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3748      	adds	r7, #72	@ 0x48
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	004005ff 	.word	0x004005ff

08003558 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_SD_IRQHandler+0x2e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fd5c 	bl	800403c <SD_Read_IT>
 8003584:	e165      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 808f 	beq.w	80036b4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800359e:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80035ae:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80035b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d039      	beq.n	8003642 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_SD_IRQHandler+0x8a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d011      	beq.n	8003606 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 fe86 	bl	80052f8 <SDMMC_CmdStopTransfer>
 80035ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f92f 	bl	8003864 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800360e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_SD_IRQHandler+0xda>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f002 faac 	bl	8005b90 <HAL_SD_RxCpltCallback>
 8003638:	e10b      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f002 fa9e 	bl	8005b7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003640:	e107      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8102 	beq.w	8003852 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fe4b 	bl	80052f8 <SDMMC_CmdStopTransfer>
 8003662:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f8f4 	bl	8003864 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 80e5 	bne.w	8003852 <HAL_SD_IRQHandler+0x2fa>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 80df 	bne.w	8003852 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0208 	bic.w	r2, r2, #8
 80036a2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f002 fa65 	bl	8005b7c <HAL_SD_TxCpltCallback>
}
 80036b2:	e0ce      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_SD_IRQHandler+0x17c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fd06 	bl	80040de <SD_Write_IT>
 80036d2:	e0be      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036da:	f240 233a 	movw	r3, #570	@ 0x23a
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b6 	beq.w	8003852 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	f043 0202 	orr.w	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	f043 0208 	orr.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003746:	f043 0210 	orr.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003760:	f043 0208 	orr.w	r2, r3, #8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003780:	f023 0302 	bic.w	r3, r3, #2
 8003784:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fdb4 	bl	80052f8 <SDMMC_CmdStopTransfer>
 8003790:	4602      	mov	r2, r0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f855 	bl	8003864 <HAL_SD_ErrorCallback>
}
 80037ba:	e04a      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d045      	beq.n	8003852 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <HAL_SD_IRQHandler+0x282>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d011      	beq.n	80037fe <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	4a1f      	ldr	r2, [pc, #124]	@ (800385c <HAL_SD_IRQHandler+0x304>)
 80037e0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fc69 	bl	80020be <HAL_DMA_Abort_IT>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02f      	beq.n	8003852 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fa2e 	bl	8003c58 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037fc:	e029      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d104      	bne.n	8003812 <HAL_SD_IRQHandler+0x2ba>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <HAL_SD_IRQHandler+0x308>)
 8003818:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fc4d 	bl	80020be <HAL_DMA_Abort_IT>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fa49 	bl	8003cc6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003834:	e00d      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f002 f98c 	bl	8005b68 <HAL_SD_AbortCallback>
}
 8003850:	e7ff      	b.n	8003852 <HAL_SD_IRQHandler+0x2fa>
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	08003c59 	.word	0x08003c59
 8003860:	08003cc7 	.word	0x08003cc7

08003864 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003886:	0f9b      	lsrs	r3, r3, #30
 8003888:	b2da      	uxtb	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	b2da      	uxtb	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a4:	0e1b      	lsrs	r3, r3, #24
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d8:	0d1b      	lsrs	r3, r3, #20
 80038da:	b29a      	uxth	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f6:	0bdb      	lsrs	r3, r3, #15
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003908:	0b9b      	lsrs	r3, r3, #14
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	b2da      	uxtb	r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800391a:	0b5b      	lsrs	r3, r3, #13
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800392c:	0b1b      	lsrs	r3, r3, #12
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	b2da      	uxtb	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2200      	movs	r2, #0
 800393e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003944:	2b00      	cmp	r3, #0
 8003946:	d163      	bne.n	8003a10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800394c:	009a      	lsls	r2, r3, #2
 800394e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003952:	4013      	ands	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003958:	0f92      	lsrs	r2, r2, #30
 800395a:	431a      	orrs	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003964:	0edb      	lsrs	r3, r3, #27
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	b2da      	uxtb	r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003976:	0e1b      	lsrs	r3, r3, #24
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	b2da      	uxtb	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003988:	0d5b      	lsrs	r3, r3, #21
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	b2da      	uxtb	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ac:	0bdb      	lsrs	r3, r3, #15
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	7e1b      	ldrb	r3, [r3, #24]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	3302      	adds	r3, #2
 80039d0:	2201      	movs	r2, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80039da:	fb03 f202 	mul.w	r2, r3, r2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	7a1b      	ldrb	r3, [r3, #8]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	2201      	movs	r2, #1
 80039ee:	409a      	lsls	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80039fc:	0a52      	lsrs	r2, r2, #9
 80039fe:	fb03 f202 	mul.w	r2, r3, r2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a0e:	e031      	b.n	8003a74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d11d      	bne.n	8003a54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	3301      	adds	r3, #1
 8003a34:	029a      	lsls	r2, r3, #10
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a52:	e00f      	b.n	8003a74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a58      	ldr	r2, [pc, #352]	@ (8003bbc <HAL_SD_GetCardCSD+0x344>)
 8003a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e09d      	b.n	8003bb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a78:	0b9b      	lsrs	r3, r3, #14
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8a:	09db      	lsrs	r3, r3, #7
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aac:	0fdb      	lsrs	r3, r3, #31
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab8:	0f5b      	lsrs	r3, r3, #29
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	0e9b      	lsrs	r3, r3, #26
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003adc:	0d9b      	lsrs	r3, r3, #22
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aee:	0d5b      	lsrs	r3, r3, #21
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	0bdb      	lsrs	r3, r3, #15
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	0b9b      	lsrs	r3, r3, #14
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	0b5b      	lsrs	r3, r3, #13
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	0b1b      	lsrs	r3, r3, #12
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	0a9b      	lsrs	r3, r3, #10
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	004005ff 	.word	0x004005ff

08003bc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003c24:	f107 030c 	add.w	r3, r7, #12
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9de 	bl	8003fec <SD_SendStatus>
 8003c30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	0a5b      	lsrs	r3, r3, #9
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003c4e:	693b      	ldr	r3, [r7, #16]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c64:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003c6e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff ffd1 	bl	8003c18 <HAL_SD_GetCardState>
 8003c76:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d002      	beq.n	8003c92 <SD_DMATxAbort+0x3a>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d10a      	bne.n	8003ca8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 fb2e 	bl	80052f8 <SDMMC_CmdStopTransfer>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f001 ff59 	bl	8005b68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003cb6:	e002      	b.n	8003cbe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fdd3 	bl	8003864 <HAL_SD_ErrorCallback>
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003cdc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7ff ff9a 	bl	8003c18 <HAL_SD_GetCardState>
 8003ce4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d002      	beq.n	8003d00 <SD_DMARxAbort+0x3a>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d10a      	bne.n	8003d16 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 faf7 	bl	80052f8 <SDMMC_CmdStopTransfer>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f001 ff22 	bl	8005b68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003d24:	e002      	b.n	8003d2c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff fd9c 	bl	8003864 <HAL_SD_ErrorCallback>
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d34:	b5b0      	push	{r4, r5, r7, lr}
 8003d36:	b094      	sub	sp, #80	@ 0x50
 8003d38:	af04      	add	r7, sp, #16
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f9a8 	bl	800509a <SDIO_GetPowerState>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d54:	e0b8      	b.n	8003ec8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d02f      	beq.n	8003dbe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 fb8f 	bl	8005486 <SDMMC_CmdSendCID>
 8003d68:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <SD_InitCard+0x40>
    {
      return errorstate;
 8003d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d72:	e0a9      	b.n	8003ec8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f9d2 	bl	8005124 <SDIO_GetResponse>
 8003d80:	4602      	mov	r2, r0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f9c9 	bl	8005124 <SDIO_GetResponse>
 8003d92:	4602      	mov	r2, r0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f9c0 	bl	8005124 <SDIO_GetResponse>
 8003da4:	4602      	mov	r2, r0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	210c      	movs	r1, #12
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 f9b7 	bl	8005124 <SDIO_GetResponse>
 8003db6:	4602      	mov	r2, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d00d      	beq.n	8003de2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f107 020e 	add.w	r2, r7, #14
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fb95 	bl	8005500 <SDMMC_CmdSetRelAdd>
 8003dd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <SD_InitCard+0xae>
    {
      return errorstate;
 8003dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de0:	e072      	b.n	8003ec8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d036      	beq.n	8003e58 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003dea:	89fb      	ldrh	r3, [r7, #14]
 8003dec:	461a      	mov	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f001 fb5f 	bl	80054c2 <SDMMC_CmdSendCSD>
 8003e04:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0e:	e05b      	b.n	8003ec8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 f984 	bl	8005124 <SDIO_GetResponse>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2104      	movs	r1, #4
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 f97b 	bl	8005124 <SDIO_GetResponse>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2108      	movs	r1, #8
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f972 	bl	8005124 <SDIO_GetResponse>
 8003e40:	4602      	mov	r2, r0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	210c      	movs	r1, #12
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 f969 	bl	8005124 <SDIO_GetResponse>
 8003e52:	4602      	mov	r2, r0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f960 	bl	8005124 <SDIO_GetResponse>
 8003e64:	4603      	mov	r3, r0
 8003e66:	0d1a      	lsrs	r2, r3, #20
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fd00 	bl	8003878 <HAL_SD_GetCardCSD>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003e82:	e021      	b.n	8003ec8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6819      	ldr	r1, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	2200      	movs	r2, #0
 8003e90:	461c      	mov	r4, r3
 8003e92:	4615      	mov	r5, r2
 8003e94:	4622      	mov	r2, r4
 8003e96:	462b      	mov	r3, r5
 8003e98:	4608      	mov	r0, r1
 8003e9a:	f001 fa4f 	bl	800533c <SDMMC_CmdSelDesel>
 8003e9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <SD_InitCard+0x176>
  {
    return errorstate;
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea8:	e00e      	b.n	8003ec8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	466c      	mov	r4, sp
 8003eb2:	f103 0210 	add.w	r2, r3, #16
 8003eb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003eb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f001 f893 	bl	8004fec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3740      	adds	r7, #64	@ 0x40
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bdb0      	pop	{r4, r5, r7, pc}

08003ed0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 fa4a 	bl	8005382 <SDMMC_CmdGoIdleState>
 8003eee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <SD_PowerON+0x2a>
  {
    return errorstate;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	e072      	b.n	8003fe0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fa5d 	bl	80053be <SDMMC_CmdOperCond>
 8003f04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fa33 	bl	8005382 <SDMMC_CmdGoIdleState>
 8003f1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	e05b      	b.n	8003fe0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d137      	bne.n	8003fa6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fa5d 	bl	80053fc <SDMMC_CmdAppCommand>
 8003f42:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d02d      	beq.n	8003fa6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003f4e:	e047      	b.n	8003fe0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 fa50 	bl	80053fc <SDMMC_CmdAppCommand>
 8003f5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <SD_PowerON+0x98>
    {
      return errorstate;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	e03b      	b.n	8003fe0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	491e      	ldr	r1, [pc, #120]	@ (8003fe8 <SD_PowerON+0x118>)
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 fa66 	bl	8005440 <SDMMC_CmdAppOperCommand>
 8003f74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003f80:	e02e      	b.n	8003fe0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 f8cb 	bl	8005124 <SDIO_GetResponse>
 8003f8e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	0fdb      	lsrs	r3, r3, #31
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <SD_PowerON+0xcc>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <SD_PowerON+0xce>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]

    count++;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d802      	bhi.n	8003fb6 <SD_PowerON+0xe6>
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0cc      	beq.n	8003f50 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d902      	bls.n	8003fc6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003fc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fc4:	e00c      	b.n	8003fe0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fd6:	e002      	b.n	8003fde <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	c1100000 	.word	0xc1100000

08003fec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ffc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004000:	e018      	b.n	8004034 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f001 fa97 	bl	8005542 <SDMMC_CmdSendStatus>
 8004014:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <SD_SendStatus+0x34>
  {
    return errorstate;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	e009      	b.n	8004034 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f001 f87c 	bl	8005124 <SDIO_GetResponse>
 800402c:	4602      	mov	r2, r0
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d03f      	beq.n	80040d6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e033      	b.n	80040c4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 ffee 	bl	8005042 <SDIO_ReadFIFO>
 8004066:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3b01      	subs	r3, #1
 800407a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	3b01      	subs	r3, #1
 8004090:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	0e1b      	lsrs	r3, r3, #24
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3301      	adds	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3301      	adds	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b07      	cmp	r3, #7
 80040c8:	d9c8      	bls.n	800405c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d043      	beq.n	8004180 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e037      	b.n	800416e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3301      	adds	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3b01      	subs	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	021a      	lsls	r2, r3, #8
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4313      	orrs	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3b01      	subs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	041a      	lsls	r2, r3, #16
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4313      	orrs	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3301      	adds	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3b01      	subs	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	061a      	lsls	r2, r3, #24
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4313      	orrs	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3b01      	subs	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f107 0208 	add.w	r2, r7, #8
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f000 ff7a 	bl	800505c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3301      	adds	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b07      	cmp	r3, #7
 8004172:	d9c4      	bls.n	80040fe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e042      	b.n	8004220 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd fbc0 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2224      	movs	r2, #36	@ 0x24
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fc99 	bl	8004b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b0ba      	sub	sp, #232	@ 0xe8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_UART_IRQHandler+0x66>
 800427a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fb7e 	bl	8004988 <UART_Receive_IT>
      return;
 800428c:	e273      	b.n	8004776 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800428e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80de 	beq.w	8004454 <HAL_UART_IRQHandler+0x22c>
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80d1 	beq.w	8004454 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_UART_IRQHandler+0xae>
 80042be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	f043 0201 	orr.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_UART_IRQHandler+0xd2>
 80042e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	f043 0202 	orr.w	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_UART_IRQHandler+0xf6>
 8004306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f043 0204 	orr.w	r2, r3, #4
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d011      	beq.n	800434e <HAL_UART_IRQHandler+0x126>
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d105      	bne.n	8004342 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	f043 0208 	orr.w	r2, r3, #8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 820a 	beq.w	800476c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_UART_IRQHandler+0x14e>
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fb09 	bl	8004988 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b40      	cmp	r3, #64	@ 0x40
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <HAL_UART_IRQHandler+0x17a>
 800439a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04f      	beq.n	8004442 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa14 	bl	80047d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d141      	bne.n	800443a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3314      	adds	r3, #20
 80043bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3314      	adds	r3, #20
 80043de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1d9      	bne.n	80043b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d013      	beq.n	8004432 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	4a8a      	ldr	r2, [pc, #552]	@ (8004638 <HAL_UART_IRQHandler+0x410>)
 8004410:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd fe51 	bl	80020be <HAL_DMA_Abort_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800442c:	4610      	mov	r0, r2
 800442e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	e00e      	b.n	8004450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9b6 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e00a      	b.n	8004450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9b2 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e006      	b.n	8004450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9ae 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800444e:	e18d      	b.n	800476c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	bf00      	nop
    return;
 8004452:	e18b      	b.n	800476c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	2b01      	cmp	r3, #1
 800445a:	f040 8167 	bne.w	800472c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8160 	beq.w	800472c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800446c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8159 	beq.w	800472c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449a:	2b40      	cmp	r3, #64	@ 0x40
 800449c:	f040 80ce 	bne.w	800463c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a9 	beq.w	8004608 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044be:	429a      	cmp	r2, r3
 80044c0:	f080 80a2 	bcs.w	8004608 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d6:	f000 8088 	beq.w	80045ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004506:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800450a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800451e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1d9      	bne.n	80044da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800454a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800454e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800455c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e1      	bne.n	8004526 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800458c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e3      	bne.n	8004562 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ba:	f023 0310 	bic.w	r3, r3, #16
 80045be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e3      	bne.n	80045a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd fcfa 	bl	8001fde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8d9 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004606:	e0b3      	b.n	8004770 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800460c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004610:	429a      	cmp	r2, r3
 8004612:	f040 80ad 	bne.w	8004770 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004620:	f040 80a6 	bne.w	8004770 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f8c1 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
      return;
 8004636:	e09b      	b.n	8004770 <HAL_UART_IRQHandler+0x548>
 8004638:	08004897 	.word	0x08004897
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004644:	b29b      	uxth	r3, r3
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 808e 	beq.w	8004774 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8089 	beq.w	8004774 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004678:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004686:	647a      	str	r2, [r7, #68]	@ 0x44
 8004688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800468c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e3      	bne.n	8004662 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	623b      	str	r3, [r7, #32]
   return(result);
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046be:	633a      	str	r2, [r7, #48]	@ 0x30
 80046c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e3      	bne.n	800469a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0310 	bic.w	r3, r3, #16
 80046f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004704:	61fa      	str	r2, [r7, #28]
 8004706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	69b9      	ldr	r1, [r7, #24]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	617b      	str	r3, [r7, #20]
   return(result);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e3      	bne.n	80046e0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800471e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f847 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800472a:	e023      	b.n	8004774 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <HAL_UART_IRQHandler+0x524>
 8004738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8b7 	bl	80048b8 <UART_Transmit_IT>
    return;
 800474a:	e014      	b.n	8004776 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00e      	beq.n	8004776 <HAL_UART_IRQHandler+0x54e>
 8004758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f8f7 	bl	8004958 <UART_EndTransmit_IT>
    return;
 800476a:	e004      	b.n	8004776 <HAL_UART_IRQHandler+0x54e>
    return;
 800476c:	bf00      	nop
 800476e:	e002      	b.n	8004776 <HAL_UART_IRQHandler+0x54e>
      return;
 8004770:	bf00      	nop
 8004772:	e000      	b.n	8004776 <HAL_UART_IRQHandler+0x54e>
      return;
 8004774:	bf00      	nop
  }
}
 8004776:	37e8      	adds	r7, #232	@ 0xe8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b095      	sub	sp, #84	@ 0x54
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80047fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3314      	adds	r3, #20
 8004812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	61fb      	str	r3, [r7, #28]
   return(result);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3314      	adds	r3, #20
 800482a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800482c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	2b01      	cmp	r3, #1
 8004846:	d119      	bne.n	800487c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	60bb      	str	r3, [r7, #8]
   return(result);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f023 0310 	bic.w	r3, r3, #16
 800485e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004868:	61ba      	str	r2, [r7, #24]
 800486a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6979      	ldr	r1, [r7, #20]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	613b      	str	r3, [r7, #16]
   return(result);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800488a:	bf00      	nop
 800488c:	3754      	adds	r7, #84	@ 0x54
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff ff7a 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b21      	cmp	r3, #33	@ 0x21
 80048ca:	d13e      	bne.n	800494a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d4:	d114      	bne.n	8004900 <UART_Transmit_IT+0x48>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d110      	bne.n	8004900 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	1c9a      	adds	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]
 80048fe:	e008      	b.n	8004912 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	1c59      	adds	r1, r3, #1
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6211      	str	r1, [r2, #32]
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29b      	uxth	r3, r3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4619      	mov	r1, r3
 8004920:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004934:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004944:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e000      	b.n	800494c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
  }
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800496e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff feff 	bl	800477c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	@ 0x30
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b22      	cmp	r3, #34	@ 0x22
 80049a2:	f040 80aa 	bne.w	8004afa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ae:	d115      	bne.n	80049dc <UART_Receive_IT+0x54>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d111      	bne.n	80049dc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80049da:	e024      	b.n	8004a26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ea:	d007      	beq.n	80049fc <UART_Receive_IT+0x74>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <UART_Receive_IT+0x82>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d106      	bne.n	8004a0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	e008      	b.n	8004a1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4619      	mov	r1, r3
 8004a34:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d15d      	bne.n	8004af6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0220 	bic.w	r2, r2, #32
 8004a48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0201 	bic.w	r2, r2, #1
 8004a68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d135      	bne.n	8004aec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	613b      	str	r3, [r7, #16]
   return(result);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f023 0310 	bic.w	r3, r3, #16
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa6:	623a      	str	r2, [r7, #32]
 8004aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	69f9      	ldr	r1, [r7, #28]
 8004aac:	6a3a      	ldr	r2, [r7, #32]
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e5      	bne.n	8004a86 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d10a      	bne.n	8004ade <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fe67 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
 8004aea:	e002      	b.n	8004af2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff fe4f 	bl	8004790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e002      	b.n	8004afc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3730      	adds	r7, #48	@ 0x30
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b08:	b0c0      	sub	sp, #256	@ 0x100
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	68d9      	ldr	r1, [r3, #12]
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	ea40 0301 	orr.w	r3, r0, r1
 8004b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b5c:	f021 010c 	bic.w	r1, r1, #12
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7e:	6999      	ldr	r1, [r3, #24]
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	ea40 0301 	orr.w	r3, r0, r1
 8004b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b8f      	ldr	r3, [pc, #572]	@ (8004dd0 <UART_SetConfig+0x2cc>)
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d005      	beq.n	8004ba4 <UART_SetConfig+0xa0>
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8004dd4 <UART_SetConfig+0x2d0>)
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d104      	bne.n	8004bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ba4:	f7fe f8a8 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8004ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bac:	e003      	b.n	8004bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bae:	f7fe f88f 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8004bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bc0:	f040 810c 	bne.w	8004ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	1891      	adds	r1, r2, r2
 8004bdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bde:	415b      	adcs	r3, r3
 8004be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004be6:	4621      	mov	r1, r4
 8004be8:	eb12 0801 	adds.w	r8, r2, r1
 8004bec:	4629      	mov	r1, r5
 8004bee:	eb43 0901 	adc.w	r9, r3, r1
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c06:	4690      	mov	r8, r2
 8004c08:	4699      	mov	r9, r3
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	eb18 0303 	adds.w	r3, r8, r3
 8004c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c14:	462b      	mov	r3, r5
 8004c16:	eb49 0303 	adc.w	r3, r9, r3
 8004c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c32:	460b      	mov	r3, r1
 8004c34:	18db      	adds	r3, r3, r3
 8004c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c38:	4613      	mov	r3, r2
 8004c3a:	eb42 0303 	adc.w	r3, r2, r3
 8004c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c48:	f7fc f81e 	bl	8000c88 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4b61      	ldr	r3, [pc, #388]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004c52:	fba3 2302 	umull	r2, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	011c      	lsls	r4, r3, #4
 8004c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	1891      	adds	r1, r2, r2
 8004c72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c74:	415b      	adcs	r3, r3
 8004c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c82:	4649      	mov	r1, r9
 8004c84:	eb43 0b01 	adc.w	fp, r3, r1
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c9c:	4692      	mov	sl, r2
 8004c9e:	469b      	mov	fp, r3
 8004ca0:	4643      	mov	r3, r8
 8004ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004caa:	464b      	mov	r3, r9
 8004cac:	eb4b 0303 	adc.w	r3, fp, r3
 8004cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	18db      	adds	r3, r3, r3
 8004ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cce:	4613      	mov	r3, r2
 8004cd0:	eb42 0303 	adc.w	r3, r2, r3
 8004cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cde:	f7fb ffd3 	bl	8000c88 <__aeabi_uldivmod>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004cea:	fba3 2301 	umull	r2, r3, r3, r1
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2264      	movs	r2, #100	@ 0x64
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	1acb      	subs	r3, r1, r3
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cfe:	4b36      	ldr	r3, [pc, #216]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004d00:	fba3 2302 	umull	r2, r3, r3, r2
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d0c:	441c      	add	r4, r3
 8004d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	1891      	adds	r1, r2, r2
 8004d26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d28:	415b      	adcs	r3, r3
 8004d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d30:	4641      	mov	r1, r8
 8004d32:	1851      	adds	r1, r2, r1
 8004d34:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d36:	4649      	mov	r1, r9
 8004d38:	414b      	adcs	r3, r1
 8004d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d48:	4659      	mov	r1, fp
 8004d4a:	00cb      	lsls	r3, r1, #3
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d52:	4651      	mov	r1, sl
 8004d54:	00ca      	lsls	r2, r1, #3
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d64:	464b      	mov	r3, r9
 8004d66:	460a      	mov	r2, r1
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d84:	460b      	mov	r3, r1
 8004d86:	18db      	adds	r3, r3, r3
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	eb42 0303 	adc.w	r3, r2, r3
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d9a:	f7fb ff75 	bl	8000c88 <__aeabi_uldivmod>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004da4:	fba3 1302 	umull	r1, r3, r3, r2
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	2164      	movs	r1, #100	@ 0x64
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	3332      	adds	r3, #50	@ 0x32
 8004db6:	4a08      	ldr	r2, [pc, #32]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	f003 0207 	and.w	r2, r3, #7
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4422      	add	r2, r4
 8004dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dcc:	e106      	b.n	8004fdc <UART_SetConfig+0x4d8>
 8004dce:	bf00      	nop
 8004dd0:	40011000 	.word	0x40011000
 8004dd4:	40011400 	.word	0x40011400
 8004dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004de6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dee:	4642      	mov	r2, r8
 8004df0:	464b      	mov	r3, r9
 8004df2:	1891      	adds	r1, r2, r2
 8004df4:	6239      	str	r1, [r7, #32]
 8004df6:	415b      	adcs	r3, r3
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dfe:	4641      	mov	r1, r8
 8004e00:	1854      	adds	r4, r2, r1
 8004e02:	4649      	mov	r1, r9
 8004e04:	eb43 0501 	adc.w	r5, r3, r1
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	00eb      	lsls	r3, r5, #3
 8004e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e16:	00e2      	lsls	r2, r4, #3
 8004e18:	4614      	mov	r4, r2
 8004e1a:	461d      	mov	r5, r3
 8004e1c:	4643      	mov	r3, r8
 8004e1e:	18e3      	adds	r3, r4, r3
 8004e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e24:	464b      	mov	r3, r9
 8004e26:	eb45 0303 	adc.w	r3, r5, r3
 8004e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	008b      	lsls	r3, r1, #2
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e54:	4621      	mov	r1, r4
 8004e56:	008a      	lsls	r2, r1, #2
 8004e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e5c:	f7fb ff14 	bl	8000c88 <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4b60      	ldr	r3, [pc, #384]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004e66:	fba3 2302 	umull	r2, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	011c      	lsls	r4, r3, #4
 8004e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	1891      	adds	r1, r2, r2
 8004e86:	61b9      	str	r1, [r7, #24]
 8004e88:	415b      	adcs	r3, r3
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e90:	4641      	mov	r1, r8
 8004e92:	1851      	adds	r1, r2, r1
 8004e94:	6139      	str	r1, [r7, #16]
 8004e96:	4649      	mov	r1, r9
 8004e98:	414b      	adcs	r3, r1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	00cb      	lsls	r3, r1, #3
 8004eac:	4651      	mov	r1, sl
 8004eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eb2:	4651      	mov	r1, sl
 8004eb4:	00ca      	lsls	r2, r1, #3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	eb42 0303 	adc.w	r3, r2, r3
 8004ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ee8:	4649      	mov	r1, r9
 8004eea:	008b      	lsls	r3, r1, #2
 8004eec:	4641      	mov	r1, r8
 8004eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	008a      	lsls	r2, r1, #2
 8004ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004efa:	f7fb fec5 	bl	8000c88 <__aeabi_uldivmod>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	4b38      	ldr	r3, [pc, #224]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004f06:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2264      	movs	r2, #100	@ 0x64
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	1acb      	subs	r3, r1, r3
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	3332      	adds	r3, #50	@ 0x32
 8004f18:	4a33      	ldr	r2, [pc, #204]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f24:	441c      	add	r4, r3
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f34:	4642      	mov	r2, r8
 8004f36:	464b      	mov	r3, r9
 8004f38:	1891      	adds	r1, r2, r2
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	415b      	adcs	r3, r3
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f44:	4641      	mov	r1, r8
 8004f46:	1851      	adds	r1, r2, r1
 8004f48:	6039      	str	r1, [r7, #0]
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	414b      	adcs	r3, r1
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f5c:	4659      	mov	r1, fp
 8004f5e:	00cb      	lsls	r3, r1, #3
 8004f60:	4651      	mov	r1, sl
 8004f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f66:	4651      	mov	r1, sl
 8004f68:	00ca      	lsls	r2, r1, #3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4642      	mov	r2, r8
 8004f72:	189b      	adds	r3, r3, r2
 8004f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f76:	464b      	mov	r3, r9
 8004f78:	460a      	mov	r2, r1
 8004f7a:	eb42 0303 	adc.w	r3, r2, r3
 8004f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f98:	4649      	mov	r1, r9
 8004f9a:	008b      	lsls	r3, r1, #2
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	008a      	lsls	r2, r1, #2
 8004fa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004faa:	f7fb fe6d 	bl	8000c88 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	2164      	movs	r1, #100	@ 0x64
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	3332      	adds	r3, #50	@ 0x32
 8004fc6:	4a08      	ldr	r2, [pc, #32]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4422      	add	r2, r4
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe8:	51eb851f 	.word	0x51eb851f

08004fec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004fec:	b084      	sub	sp, #16
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	f107 001c 	add.w	r0, r7, #28
 8004ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005002:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005004:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005006:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800500a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800500c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800500e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005012:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005016:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005026:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	b004      	add	sp, #16
 8005040:	4770      	bx	lr

08005042 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2203      	movs	r2, #3
 800508a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0303 	and.w	r3, r3, #3
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050d4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80050da:	431a      	orrs	r2, r3
                       Command->CPSM);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80050e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80050f0:	f023 030f 	bic.w	r3, r3, #15
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	b2db      	uxtb	r3, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3314      	adds	r3, #20
 8005132:	461a      	mov	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4413      	add	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
}  
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005170:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005176:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800517c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0

}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b088      	sub	sp, #32
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80051b0:	2310      	movs	r3, #16
 80051b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051b4:	2340      	movs	r3, #64	@ 0x40
 80051b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051c2:	f107 0308 	add.w	r3, r7, #8
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff74 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	2110      	movs	r1, #16
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9d7 	bl	8005588 <SDMMC_GetCmdResp1>
 80051da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051dc:	69fb      	ldr	r3, [r7, #28]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b088      	sub	sp, #32
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80051f4:	2311      	movs	r3, #17
 80051f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051f8:	2340      	movs	r3, #64	@ 0x40
 80051fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005204:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005206:	f107 0308 	add.w	r3, r7, #8
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff ff52 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	2111      	movs	r1, #17
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f9b5 	bl	8005588 <SDMMC_GetCmdResp1>
 800521e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005220:	69fb      	ldr	r3, [r7, #28]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b088      	sub	sp, #32
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005238:	2312      	movs	r3, #18
 800523a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800523c:	2340      	movs	r3, #64	@ 0x40
 800523e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005248:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ff30 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525a:	2112      	movs	r1, #18
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f993 	bl	8005588 <SDMMC_GetCmdResp1>
 8005262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005264:	69fb      	ldr	r3, [r7, #28]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800527c:	2318      	movs	r3, #24
 800527e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005280:	2340      	movs	r3, #64	@ 0x40
 8005282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800528c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ff0e 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800529a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529e:	2118      	movs	r1, #24
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f971 	bl	8005588 <SDMMC_GetCmdResp1>
 80052a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052a8:	69fb      	ldr	r3, [r7, #28]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b088      	sub	sp, #32
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80052c0:	2319      	movs	r3, #25
 80052c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052c4:	2340      	movs	r3, #64	@ 0x40
 80052c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052d2:	f107 0308 	add.w	r3, r7, #8
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff feec 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80052de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e2:	2119      	movs	r1, #25
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f94f 	bl	8005588 <SDMMC_GetCmdResp1>
 80052ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ec:	69fb      	ldr	r3, [r7, #28]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005304:	230c      	movs	r3, #12
 8005306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005308:	2340      	movs	r3, #64	@ 0x40
 800530a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005314:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff feca 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005322:	4a05      	ldr	r2, [pc, #20]	@ (8005338 <SDMMC_CmdStopTransfer+0x40>)
 8005324:	210c      	movs	r1, #12
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f92e 	bl	8005588 <SDMMC_GetCmdResp1>
 800532c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800532e:	69fb      	ldr	r3, [r7, #28]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	05f5e100 	.word	0x05f5e100

0800533c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08a      	sub	sp, #40	@ 0x28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800534c:	2307      	movs	r3, #7
 800534e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005350:	2340      	movs	r3, #64	@ 0x40
 8005352:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800535c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800535e:	f107 0310 	add.w	r3, r7, #16
 8005362:	4619      	mov	r1, r3
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff fea6 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	2107      	movs	r1, #7
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f909 	bl	8005588 <SDMMC_GetCmdResp1>
 8005376:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800537a:	4618      	mov	r0, r3
 800537c:	3728      	adds	r7, #40	@ 0x28
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b088      	sub	sp, #32
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800539a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800539e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053a0:	f107 0308 	add.w	r3, r7, #8
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fe85 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fb23 	bl	80059f8 <SDMMC_GetCmdError>
 80053b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053b4:	69fb      	ldr	r3, [r7, #28]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b088      	sub	sp, #32
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80053c6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80053ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80053cc:	2308      	movs	r3, #8
 80053ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053d0:	2340      	movs	r3, #64	@ 0x40
 80053d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fe66 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fab6 	bl	800595c <SDMMC_GetCmdResp7>
 80053f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053f2:	69fb      	ldr	r3, [r7, #28]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800540a:	2337      	movs	r3, #55	@ 0x37
 800540c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800540e:	2340      	movs	r3, #64	@ 0x40
 8005410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800541a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800541c:	f107 0308 	add.w	r3, r7, #8
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fe47 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542c:	2137      	movs	r1, #55	@ 0x37
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f8aa 	bl	8005588 <SDMMC_GetCmdResp1>
 8005434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005436:	69fb      	ldr	r3, [r7, #28]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005450:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005456:	2329      	movs	r3, #41	@ 0x29
 8005458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800545a:	2340      	movs	r3, #64	@ 0x40
 800545c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005468:	f107 0308 	add.w	r3, r7, #8
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fe21 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f9bd 	bl	80057f4 <SDMMC_GetCmdResp3>
 800547a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800547c:	69fb      	ldr	r3, [r7, #28]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b088      	sub	sp, #32
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005492:	2302      	movs	r3, #2
 8005494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005496:	23c0      	movs	r3, #192	@ 0xc0
 8005498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800549e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a4:	f107 0308 	add.w	r3, r7, #8
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fe03 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f957 	bl	8005764 <SDMMC_GetCmdResp2>
 80054b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b8:	69fb      	ldr	r3, [r7, #28]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b088      	sub	sp, #32
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80054d0:	2309      	movs	r3, #9
 80054d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80054d4:	23c0      	movs	r3, #192	@ 0xc0
 80054d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e2:	f107 0308 	add.w	r3, r7, #8
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff fde4 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f938 	bl	8005764 <SDMMC_GetCmdResp2>
 80054f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f6:	69fb      	ldr	r3, [r7, #28]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800550e:	2303      	movs	r3, #3
 8005510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005512:	2340      	movs	r3, #64	@ 0x40
 8005514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800551a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800551e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005520:	f107 0308 	add.w	r3, r7, #8
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff fdc5 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	2103      	movs	r1, #3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f99d 	bl	8005870 <SDMMC_GetCmdResp6>
 8005536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005538:	69fb      	ldr	r3, [r7, #28]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b088      	sub	sp, #32
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005550:	230d      	movs	r3, #13
 8005552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005554:	2340      	movs	r3, #64	@ 0x40
 8005556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800555c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005560:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fda4 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800556e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005572:	210d      	movs	r1, #13
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f807 	bl	8005588 <SDMMC_GetCmdResp1>
 800557a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800557c:	69fb      	ldr	r3, [r7, #28]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	460b      	mov	r3, r1
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005596:	4b70      	ldr	r3, [pc, #448]	@ (8005758 <SDMMC_GetCmdResp1+0x1d0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a70      	ldr	r2, [pc, #448]	@ (800575c <SDMMC_GetCmdResp1+0x1d4>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	0a5a      	lsrs	r2, r3, #9
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	61fa      	str	r2, [r7, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80055b8:	e0c9      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0ef      	beq.n	80055aa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ea      	bne.n	80055aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2204      	movs	r2, #4
 80055e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055e6:	2304      	movs	r3, #4
 80055e8:	e0b1      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0a6      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	22c5      	movs	r2, #197	@ 0xc5
 8005604:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff fd7f 	bl	800510a <SDIO_GetCommandResponse>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	7afb      	ldrb	r3, [r7, #11]
 8005612:	4293      	cmp	r3, r2
 8005614:	d001      	beq.n	800561a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005616:	2301      	movs	r3, #1
 8005618:	e099      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800561a:	2100      	movs	r1, #0
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff fd81 	bl	8005124 <SDIO_GetResponse>
 8005622:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4b4e      	ldr	r3, [pc, #312]	@ (8005760 <SDMMC_GetCmdResp1+0x1d8>)
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
 8005630:	e08d      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	da02      	bge.n	800563e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005638:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800563c:	e087      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005648:	2340      	movs	r3, #64	@ 0x40
 800564a:	e080      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005656:	2380      	movs	r3, #128	@ 0x80
 8005658:	e079      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005668:	e071      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005678:	e069      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005688:	e061      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005694:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005698:	e059      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056a8:	e051      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056b8:	e049      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80056c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056c8:	e041      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80056d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056d8:	e039      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80056e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056e8:	e031      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80056f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80056f8:	e029      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005704:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005708:	e021      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005714:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005718:	e019      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005724:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005728:	e011      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005734:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005738:	e009      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005744:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005748:	e001      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800574a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000000 	.word	0x20000000
 800575c:	10624dd3 	.word	0x10624dd3
 8005760:	fdffe008 	.word	0xfdffe008

08005764 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800576c:	4b1f      	ldr	r3, [pc, #124]	@ (80057ec <SDMMC_GetCmdResp2+0x88>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1f      	ldr	r2, [pc, #124]	@ (80057f0 <SDMMC_GetCmdResp2+0x8c>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	0a5b      	lsrs	r3, r3, #9
 8005778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1e5a      	subs	r2, r3, #1
 8005786:	60fa      	str	r2, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800578c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005790:	e026      	b.n	80057e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ef      	beq.n	8005782 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ea      	bne.n	8005782 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2204      	movs	r2, #4
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057be:	2304      	movs	r3, #4
 80057c0:	e00e      	b.n	80057e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e003      	b.n	80057e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	22c5      	movs	r2, #197	@ 0xc5
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	20000000 	.word	0x20000000
 80057f0:	10624dd3 	.word	0x10624dd3

080057f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005868 <SDMMC_GetCmdResp3+0x74>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1a      	ldr	r2, [pc, #104]	@ (800586c <SDMMC_GetCmdResp3+0x78>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	0a5b      	lsrs	r3, r3, #9
 8005808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	60fa      	str	r2, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800581c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005820:	e01b      	b.n	800585a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005826:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ef      	beq.n	8005812 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ea      	bne.n	8005812 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2204      	movs	r2, #4
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800584e:	2304      	movs	r3, #4
 8005850:	e003      	b.n	800585a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	22c5      	movs	r2, #197	@ 0xc5
 8005856:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000000 	.word	0x20000000
 800586c:	10624dd3 	.word	0x10624dd3

08005870 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	460b      	mov	r3, r1
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800587e:	4b35      	ldr	r3, [pc, #212]	@ (8005954 <SDMMC_GetCmdResp6+0xe4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a35      	ldr	r2, [pc, #212]	@ (8005958 <SDMMC_GetCmdResp6+0xe8>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	0a5b      	lsrs	r3, r3, #9
 800588a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	61fa      	str	r2, [r7, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800589e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058a2:	e052      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ef      	beq.n	8005894 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1ea      	bne.n	8005894 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2204      	movs	r2, #4
 80058ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058d0:	2304      	movs	r3, #4
 80058d2:	e03a      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e02f      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff fc0d 	bl	800510a <SDIO_GetCommandResponse>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	7afb      	ldrb	r3, [r7, #11]
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d001      	beq.n	80058fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e025      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	22c5      	movs	r2, #197	@ 0xc5
 8005902:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005904:	2100      	movs	r1, #0
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7ff fc0c 	bl	8005124 <SDIO_GetResponse>
 800590c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	0c1b      	lsrs	r3, r3, #16
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005922:	2300      	movs	r3, #0
 8005924:	e011      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005934:	e009      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005944:	e001      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005946:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000000 	.word	0x20000000
 8005958:	10624dd3 	.word	0x10624dd3

0800595c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005964:	4b22      	ldr	r3, [pc, #136]	@ (80059f0 <SDMMC_GetCmdResp7+0x94>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a22      	ldr	r2, [pc, #136]	@ (80059f4 <SDMMC_GetCmdResp7+0x98>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	0a5b      	lsrs	r3, r3, #9
 8005970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005974:	fb02 f303 	mul.w	r3, r2, r3
 8005978:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1e5a      	subs	r2, r3, #1
 800597e:	60fa      	str	r2, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005984:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005988:	e02c      	b.n	80059e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ef      	beq.n	800597a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ea      	bne.n	800597a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059b6:	2304      	movs	r3, #4
 80059b8:	e014      	b.n	80059e4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e009      	b.n	80059e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2240      	movs	r2, #64	@ 0x40
 80059e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80059e2:	2300      	movs	r3, #0
  
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	20000000 	.word	0x20000000
 80059f4:	10624dd3 	.word	0x10624dd3

080059f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a00:	4b11      	ldr	r3, [pc, #68]	@ (8005a48 <SDMMC_GetCmdError+0x50>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a11      	ldr	r2, [pc, #68]	@ (8005a4c <SDMMC_GetCmdError+0x54>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	0a5b      	lsrs	r3, r3, #9
 8005a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1e5a      	subs	r2, r3, #1
 8005a1a:	60fa      	str	r2, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a24:	e009      	b.n	8005a3a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f1      	beq.n	8005a16 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	22c5      	movs	r2, #197	@ 0xc5
 8005a36:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000000 	.word	0x20000000
 8005a4c:	10624dd3 	.word	0x10624dd3

08005a50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005a54:	4904      	ldr	r1, [pc, #16]	@ (8005a68 <MX_FATFS_Init+0x18>)
 8005a56:	4805      	ldr	r0, [pc, #20]	@ (8005a6c <MX_FATFS_Init+0x1c>)
 8005a58:	f003 fcc8 	bl	80093ec <FATFS_LinkDriver>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4b03      	ldr	r3, [pc, #12]	@ (8005a70 <MX_FATFS_Init+0x20>)
 8005a62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000310 	.word	0x20000310
 8005a6c:	0800e654 	.word	0x0800e654
 8005a70:	2000030c 	.word	0x2000030c

08005a74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005a8e:	f000 f89e 	bl	8005bce <BSP_SD_IsDetected>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d001      	beq.n	8005a9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e005      	b.n	8005aa8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005a9c:	4804      	ldr	r0, [pc, #16]	@ (8005ab0 <BSP_SD_Init+0x2c>)
 8005a9e:	f7fd f93f 	bl	8002d20 <HAL_SD_Init>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	200001f0 	.word	0x200001f0

08005ab4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	4806      	ldr	r0, [pc, #24]	@ (8005aec <BSP_SD_ReadBlocks+0x38>)
 8005ad2:	f7fd f9cd 	bl	8002e70 <HAL_SD_ReadBlocks>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	200001f0 	.word	0x200001f0

08005af0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	4806      	ldr	r0, [pc, #24]	@ (8005b28 <BSP_SD_WriteBlocks+0x38>)
 8005b0e:	f7fd fb95 	bl	800323c <HAL_SD_WriteBlocks>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200001f0 	.word	0x200001f0

08005b2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005b30:	4805      	ldr	r0, [pc, #20]	@ (8005b48 <BSP_SD_GetCardState+0x1c>)
 8005b32:	f7fe f871 	bl	8003c18 <HAL_SD_GetCardState>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200001f0 	.word	0x200001f0

08005b4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4803      	ldr	r0, [pc, #12]	@ (8005b64 <BSP_SD_GetCardInfo+0x18>)
 8005b58:	f7fe f832 	bl	8003bc0 <HAL_SD_GetCardInfo>
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	200001f0 	.word	0x200001f0

08005b68 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005b70:	f000 f818 	bl	8005ba4 <BSP_SD_AbortCallback>
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005b84:	f000 f815 	bl	8005bb2 <BSP_SD_WriteCpltCallback>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005b98:	f000 f812 	bl	8005bc0 <BSP_SD_ReadCpltCallback>
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0

}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	af00      	add	r7, sp, #0

}
 8005bb6:	bf00      	nop
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0

}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	b2db      	uxtb	r3, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c20 <SD_CheckStatus+0x38>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005bf8:	f7ff ff98 	bl	8005b2c <BSP_SD_GetCardState>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005c02:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <SD_CheckStatus+0x38>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b04      	ldr	r3, [pc, #16]	@ (8005c20 <SD_CheckStatus+0x38>)
 8005c10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005c12:	4b03      	ldr	r3, [pc, #12]	@ (8005c20 <SD_CheckStatus+0x38>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	b2db      	uxtb	r3, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000009 	.word	0x20000009

08005c24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <SD_initialize+0x38>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005c34:	f7ff ff26 	bl	8005a84 <BSP_SD_Init>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ffd1 	bl	8005be8 <SD_CheckStatus>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b04      	ldr	r3, [pc, #16]	@ (8005c5c <SD_initialize+0x38>)
 8005c4c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005c4e:	4b03      	ldr	r3, [pc, #12]	@ (8005c5c <SD_initialize+0x38>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	b2db      	uxtb	r3, r3
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000009 	.word	0x20000009

08005c60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ffbb 	bl	8005be8 <SD_CheckStatus>
 8005c72:	4603      	mov	r3, r0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005c90:	f04f 33ff 	mov.w	r3, #4294967295
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	68b8      	ldr	r0, [r7, #8]
 8005c9a:	f7ff ff0b 	bl	8005ab4 <BSP_SD_ReadBlocks>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d107      	bne.n	8005cb4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005ca4:	bf00      	nop
 8005ca6:	f7ff ff41 	bl	8005b2c <BSP_SD_GetCardState>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1fa      	bne.n	8005ca6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b086      	sub	sp, #24
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4603      	mov	r3, r0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	68b8      	ldr	r0, [r7, #8]
 8005cdc:	f7ff ff08 	bl	8005af0 <BSP_SD_WriteBlocks>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005ce6:	bf00      	nop
 8005ce8:	f7ff ff20 	bl	8005b2c <BSP_SD_GetCardState>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1fa      	bne.n	8005ce8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08c      	sub	sp, #48	@ 0x30
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	603a      	str	r2, [r7, #0]
 8005d0a:	71fb      	strb	r3, [r7, #7]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d16:	4b25      	ldr	r3, [pc, #148]	@ (8005dac <SD_ioctl+0xac>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <SD_ioctl+0x28>
 8005d24:	2303      	movs	r3, #3
 8005d26:	e03c      	b.n	8005da2 <SD_ioctl+0xa2>

  switch (cmd)
 8005d28:	79bb      	ldrb	r3, [r7, #6]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d834      	bhi.n	8005d98 <SD_ioctl+0x98>
 8005d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d34 <SD_ioctl+0x34>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005d4d 	.word	0x08005d4d
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d7f 	.word	0x08005d7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d4a:	e028      	b.n	8005d9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d4c:	f107 030c 	add.w	r3, r7, #12
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fefb 	bl	8005b4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d62:	e01c      	b.n	8005d9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff feef 	bl	8005b4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d7c:	e00f      	b.n	8005d9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d7e:	f107 030c 	add.w	r3, r7, #12
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fee2 	bl	8005b4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	0a5a      	lsrs	r2, r3, #9
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d96:	e002      	b.n	8005d9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005d98:	2304      	movs	r3, #4
 8005d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3730      	adds	r7, #48	@ 0x30
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000009 	.word	0x20000009

08005db0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	4a08      	ldr	r2, [pc, #32]	@ (8005de0 <disk_status+0x30>)
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	79fa      	ldrb	r2, [r7, #7]
 8005dc8:	4905      	ldr	r1, [pc, #20]	@ (8005de0 <disk_status+0x30>)
 8005dca:	440a      	add	r2, r1
 8005dcc:	7a12      	ldrb	r2, [r2, #8]
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4798      	blx	r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	2000053c 	.word	0x2000053c

08005de4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	4a0e      	ldr	r2, [pc, #56]	@ (8005e30 <disk_initialize+0x4c>)
 8005df6:	5cd3      	ldrb	r3, [r2, r3]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d114      	bne.n	8005e26 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8005e30 <disk_initialize+0x4c>)
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	79fa      	ldrb	r2, [r7, #7]
 8005e0a:	4909      	ldr	r1, [pc, #36]	@ (8005e30 <disk_initialize+0x4c>)
 8005e0c:	440a      	add	r2, r1
 8005e0e:	7a12      	ldrb	r2, [r2, #8]
 8005e10:	4610      	mov	r0, r2
 8005e12:	4798      	blx	r3
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	4a03      	ldr	r2, [pc, #12]	@ (8005e30 <disk_initialize+0x4c>)
 8005e22:	2101      	movs	r1, #1
 8005e24:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	2000053c 	.word	0x2000053c

08005e34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	4a0a      	ldr	r2, [pc, #40]	@ (8005e70 <disk_read+0x3c>)
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	689c      	ldr	r4, [r3, #8]
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	4a07      	ldr	r2, [pc, #28]	@ (8005e70 <disk_read+0x3c>)
 8005e54:	4413      	add	r3, r2
 8005e56:	7a18      	ldrb	r0, [r3, #8]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	47a0      	blx	r4
 8005e60:	4603      	mov	r3, r0
 8005e62:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd90      	pop	{r4, r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000053c 	.word	0x2000053c

08005e74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb0 <disk_write+0x3c>)
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68dc      	ldr	r4, [r3, #12]
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	4a07      	ldr	r2, [pc, #28]	@ (8005eb0 <disk_write+0x3c>)
 8005e94:	4413      	add	r3, r2
 8005e96:	7a18      	ldrb	r0, [r3, #8]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	47a0      	blx	r4
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd90      	pop	{r4, r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	2000053c 	.word	0x2000053c

08005eb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	603a      	str	r2, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	4a09      	ldr	r2, [pc, #36]	@ (8005eec <disk_ioctl+0x38>)
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	79fa      	ldrb	r2, [r7, #7]
 8005ed2:	4906      	ldr	r1, [pc, #24]	@ (8005eec <disk_ioctl+0x38>)
 8005ed4:	440a      	add	r2, r1
 8005ed6:	7a10      	ldrb	r0, [r2, #8]
 8005ed8:	79b9      	ldrb	r1, [r7, #6]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	4798      	blx	r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	2000053c 	.word	0x2000053c

08005ef0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3301      	adds	r3, #1
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	b21a      	sxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f14:	89fb      	ldrh	r3, [r7, #14]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3303      	adds	r3, #3
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	3202      	adds	r2, #2
 8005f3a:	7812      	ldrb	r2, [r2, #0]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	3201      	adds	r2, #1
 8005f48:	7812      	ldrb	r2, [r2, #0]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	7812      	ldrb	r2, [r2, #0]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	887b      	ldrh	r3, [r7, #2]
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	887a      	ldrh	r2, [r7, #2]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	0a1b      	lsrs	r3, r3, #8
 8005fca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ff6:	b480      	push	{r7}
 8005ff8:	b087      	sub	sp, #28
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	1c53      	adds	r3, r2, #1
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	1c59      	adds	r1, r3, #1
 800601a:	6179      	str	r1, [r7, #20]
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3b01      	subs	r3, #1
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f1      	bne.n	8006010 <mem_cpy+0x1a>
	}
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	617a      	str	r2, [r7, #20]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3b01      	subs	r3, #1
 8006058:	607b      	str	r3, [r7, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f3      	bne.n	8006048 <mem_set+0x10>
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800606e:	b480      	push	{r7}
 8006070:	b089      	sub	sp, #36	@ 0x24
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	61fa      	str	r2, [r7, #28]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	4619      	mov	r1, r3
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	61ba      	str	r2, [r7, #24]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	1acb      	subs	r3, r1, r3
 800609a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3b01      	subs	r3, #1
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <mem_cmp+0x40>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0eb      	beq.n	8006086 <mem_cmp+0x18>

	return r;
 80060ae:	697b      	ldr	r3, [r7, #20]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3724      	adds	r7, #36	@ 0x24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80060c6:	e002      	b.n	80060ce <chk_chr+0x12>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3301      	adds	r3, #1
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <chk_chr+0x26>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	4293      	cmp	r3, r2
 80060e0:	d1f2      	bne.n	80060c8 <chk_chr+0xc>
	return *str;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	781b      	ldrb	r3, [r3, #0]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e029      	b.n	800615c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006108:	4a27      	ldr	r2, [pc, #156]	@ (80061a8 <chk_lock+0xb4>)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	4413      	add	r3, r2
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01d      	beq.n	8006152 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006116:	4a24      	ldr	r2, [pc, #144]	@ (80061a8 <chk_lock+0xb4>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	4413      	add	r3, r2
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d116      	bne.n	8006156 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006128:	4a1f      	ldr	r2, [pc, #124]	@ (80061a8 <chk_lock+0xb4>)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	4413      	add	r3, r2
 8006130:	3304      	adds	r3, #4
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006138:	429a      	cmp	r2, r3
 800613a:	d10c      	bne.n	8006156 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800613c:	4a1a      	ldr	r2, [pc, #104]	@ (80061a8 <chk_lock+0xb4>)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	4413      	add	r3, r2
 8006144:	3308      	adds	r3, #8
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800614c:	429a      	cmp	r2, r3
 800614e:	d102      	bne.n	8006156 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006150:	e007      	b.n	8006162 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d9d2      	bls.n	8006108 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d109      	bne.n	800617c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <chk_lock+0x80>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d101      	bne.n	8006178 <chk_lock+0x84>
 8006174:	2300      	movs	r3, #0
 8006176:	e010      	b.n	800619a <chk_lock+0xa6>
 8006178:	2312      	movs	r3, #18
 800617a:	e00e      	b.n	800619a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d108      	bne.n	8006194 <chk_lock+0xa0>
 8006182:	4a09      	ldr	r2, [pc, #36]	@ (80061a8 <chk_lock+0xb4>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	4413      	add	r3, r2
 800618a:	330c      	adds	r3, #12
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006192:	d101      	bne.n	8006198 <chk_lock+0xa4>
 8006194:	2310      	movs	r3, #16
 8006196:	e000      	b.n	800619a <chk_lock+0xa6>
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	2000031c 	.word	0x2000031c

080061ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	e002      	b.n	80061be <enq_lock+0x12>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3301      	adds	r3, #1
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d806      	bhi.n	80061d2 <enq_lock+0x26>
 80061c4:	4a09      	ldr	r2, [pc, #36]	@ (80061ec <enq_lock+0x40>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	4413      	add	r3, r2
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f2      	bne.n	80061b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	2000031c 	.word	0x2000031c

080061f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	e01f      	b.n	8006240 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006200:	4a41      	ldr	r2, [pc, #260]	@ (8006308 <inc_lock+0x118>)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	4413      	add	r3, r2
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d113      	bne.n	800623a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006212:	4a3d      	ldr	r2, [pc, #244]	@ (8006308 <inc_lock+0x118>)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	4413      	add	r3, r2
 800621a:	3304      	adds	r3, #4
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006222:	429a      	cmp	r2, r3
 8006224:	d109      	bne.n	800623a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006226:	4a38      	ldr	r2, [pc, #224]	@ (8006308 <inc_lock+0x118>)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	4413      	add	r3, r2
 800622e:	3308      	adds	r3, #8
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006236:	429a      	cmp	r2, r3
 8006238:	d006      	beq.n	8006248 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d9dc      	bls.n	8006200 <inc_lock+0x10>
 8006246:	e000      	b.n	800624a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006248:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d132      	bne.n	80062b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e002      	b.n	800625c <inc_lock+0x6c>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d806      	bhi.n	8006270 <inc_lock+0x80>
 8006262:	4a29      	ldr	r2, [pc, #164]	@ (8006308 <inc_lock+0x118>)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	4413      	add	r3, r2
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f2      	bne.n	8006256 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d101      	bne.n	800627a <inc_lock+0x8a>
 8006276:	2300      	movs	r3, #0
 8006278:	e040      	b.n	80062fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4922      	ldr	r1, [pc, #136]	@ (8006308 <inc_lock+0x118>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	440b      	add	r3, r1
 8006286:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	491e      	ldr	r1, [pc, #120]	@ (8006308 <inc_lock+0x118>)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	440b      	add	r3, r1
 8006294:	3304      	adds	r3, #4
 8006296:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	491a      	ldr	r1, [pc, #104]	@ (8006308 <inc_lock+0x118>)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	440b      	add	r3, r1
 80062a4:	3308      	adds	r3, #8
 80062a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80062a8:	4a17      	ldr	r2, [pc, #92]	@ (8006308 <inc_lock+0x118>)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	4413      	add	r3, r2
 80062b0:	330c      	adds	r3, #12
 80062b2:	2200      	movs	r2, #0
 80062b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <inc_lock+0xe0>
 80062bc:	4a12      	ldr	r2, [pc, #72]	@ (8006308 <inc_lock+0x118>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	4413      	add	r3, r2
 80062c4:	330c      	adds	r3, #12
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <inc_lock+0xe0>
 80062cc:	2300      	movs	r3, #0
 80062ce:	e015      	b.n	80062fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d108      	bne.n	80062e8 <inc_lock+0xf8>
 80062d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006308 <inc_lock+0x118>)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	4413      	add	r3, r2
 80062de:	330c      	adds	r3, #12
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	e001      	b.n	80062ec <inc_lock+0xfc>
 80062e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062ec:	4906      	ldr	r1, [pc, #24]	@ (8006308 <inc_lock+0x118>)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	440b      	add	r3, r1
 80062f4:	330c      	adds	r3, #12
 80062f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3301      	adds	r3, #1
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	2000031c 	.word	0x2000031c

0800630c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3b01      	subs	r3, #1
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d825      	bhi.n	800636c <dec_lock+0x60>
		n = Files[i].ctr;
 8006320:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <dec_lock+0x74>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	4413      	add	r3, r2
 8006328:	330c      	adds	r3, #12
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800632e:	89fb      	ldrh	r3, [r7, #14]
 8006330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006334:	d101      	bne.n	800633a <dec_lock+0x2e>
 8006336:	2300      	movs	r3, #0
 8006338:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800633a:	89fb      	ldrh	r3, [r7, #14]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <dec_lock+0x3a>
 8006340:	89fb      	ldrh	r3, [r7, #14]
 8006342:	3b01      	subs	r3, #1
 8006344:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006346:	4a0e      	ldr	r2, [pc, #56]	@ (8006380 <dec_lock+0x74>)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	4413      	add	r3, r2
 800634e:	330c      	adds	r3, #12
 8006350:	89fa      	ldrh	r2, [r7, #14]
 8006352:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006354:	89fb      	ldrh	r3, [r7, #14]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <dec_lock+0x5a>
 800635a:	4a09      	ldr	r2, [pc, #36]	@ (8006380 <dec_lock+0x74>)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	4413      	add	r3, r2
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	737b      	strb	r3, [r7, #13]
 800636a:	e001      	b.n	8006370 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800636c:	2302      	movs	r3, #2
 800636e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006370:	7b7b      	ldrb	r3, [r7, #13]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	2000031c 	.word	0x2000031c

08006384 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e010      	b.n	80063b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006392:	4a0d      	ldr	r2, [pc, #52]	@ (80063c8 <clear_lock+0x44>)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	4413      	add	r3, r2
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d105      	bne.n	80063ae <clear_lock+0x2a>
 80063a2:	4a09      	ldr	r2, [pc, #36]	@ (80063c8 <clear_lock+0x44>)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	4413      	add	r3, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d9eb      	bls.n	8006392 <clear_lock+0xe>
	}
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	2000031c 	.word	0x2000031c

080063cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	78db      	ldrb	r3, [r3, #3]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d034      	beq.n	800644a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	7858      	ldrb	r0, [r3, #1]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063f0:	2301      	movs	r3, #1
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	f7ff fd3e 	bl	8005e74 <disk_write>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <sync_window+0x38>
			res = FR_DISK_ERR;
 80063fe:	2301      	movs	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
 8006402:	e022      	b.n	800644a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	1ad2      	subs	r2, r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	429a      	cmp	r2, r3
 8006418:	d217      	bcs.n	800644a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	789b      	ldrb	r3, [r3, #2]
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	e010      	b.n	8006444 <sync_window+0x78>
					wsect += fs->fsize;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4413      	add	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7858      	ldrb	r0, [r3, #1]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006436:	2301      	movs	r3, #1
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	f7ff fd1b 	bl	8005e74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	3b01      	subs	r3, #1
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d8eb      	bhi.n	8006422 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d01b      	beq.n	80064a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ffad 	bl	80063cc <sync_window>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d113      	bne.n	80064a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7858      	ldrb	r0, [r3, #1]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006486:	2301      	movs	r3, #1
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	f7ff fcd3 	bl	8005e34 <disk_read>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
 8006498:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff87 	bl	80063cc <sync_window>
 80064be:	4603      	mov	r3, r0
 80064c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d159      	bne.n	800657c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d149      	bne.n	8006564 <sync_fs+0xb4>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	791b      	ldrb	r3, [r3, #4]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d145      	bne.n	8006564 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	899b      	ldrh	r3, [r3, #12]
 80064e2:	461a      	mov	r2, r3
 80064e4:	2100      	movs	r1, #0
 80064e6:	f7ff fda7 	bl	8006038 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3338      	adds	r3, #56	@ 0x38
 80064ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80064f2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fd36 	bl	8005f68 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3338      	adds	r3, #56	@ 0x38
 8006500:	4921      	ldr	r1, [pc, #132]	@ (8006588 <sync_fs+0xd8>)
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fd4b 	bl	8005f9e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3338      	adds	r3, #56	@ 0x38
 800650c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006510:	491e      	ldr	r1, [pc, #120]	@ (800658c <sync_fs+0xdc>)
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fd43 	bl	8005f9e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3338      	adds	r3, #56	@ 0x38
 800651c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7ff fd39 	bl	8005f9e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3338      	adds	r3, #56	@ 0x38
 8006530:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f7ff fd2f 	bl	8005f9e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	7858      	ldrb	r0, [r3, #1]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006558:	2301      	movs	r3, #1
 800655a:	f7ff fc8b 	bl	8005e74 <disk_write>
			fs->fsi_flag = 0;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2200      	movs	r2, #0
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fca1 	bl	8005eb4 <disk_ioctl>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <sync_fs+0xcc>
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800657c:	7bfb      	ldrb	r3, [r7, #15]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	41615252 	.word	0x41615252
 800658c:	61417272 	.word	0x61417272

08006590 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	3b02      	subs	r3, #2
 800659e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	3b02      	subs	r3, #2
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d301      	bcc.n	80065b0 <clust2sect+0x20>
 80065ac:	2300      	movs	r3, #0
 80065ae:	e008      	b.n	80065c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	895b      	ldrh	r3, [r3, #10]
 80065b4:	461a      	mov	r2, r3
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	fb03 f202 	mul.w	r2, r3, r2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c0:	4413      	add	r3, r2
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b086      	sub	sp, #24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d904      	bls.n	80065ee <get_fat+0x20>
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d302      	bcc.n	80065f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	e0ba      	b.n	800676a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80065f4:	f04f 33ff 	mov.w	r3, #4294967295
 80065f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	f000 8082 	beq.w	8006708 <get_fat+0x13a>
 8006604:	2b03      	cmp	r3, #3
 8006606:	f300 80a6 	bgt.w	8006756 <get_fat+0x188>
 800660a:	2b01      	cmp	r3, #1
 800660c:	d002      	beq.n	8006614 <get_fat+0x46>
 800660e:	2b02      	cmp	r3, #2
 8006610:	d055      	beq.n	80066be <get_fat+0xf0>
 8006612:	e0a0      	b.n	8006756 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	899b      	ldrh	r3, [r3, #12]
 800662a:	4619      	mov	r1, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006632:	4413      	add	r3, r2
 8006634:	4619      	mov	r1, r3
 8006636:	6938      	ldr	r0, [r7, #16]
 8006638:	f7ff ff0c 	bl	8006454 <move_window>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 808c 	bne.w	800675c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	60fa      	str	r2, [r7, #12]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	8992      	ldrh	r2, [r2, #12]
 800664e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006652:	fb01 f202 	mul.w	r2, r1, r2
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006660:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	899b      	ldrh	r3, [r3, #12]
 800666a:	4619      	mov	r1, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006672:	4413      	add	r3, r2
 8006674:	4619      	mov	r1, r3
 8006676:	6938      	ldr	r0, [r7, #16]
 8006678:	f7ff feec 	bl	8006454 <move_window>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d16e      	bne.n	8006760 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	899b      	ldrh	r3, [r3, #12]
 8006686:	461a      	mov	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	fbb3 f1f2 	udiv	r1, r3, r2
 800668e:	fb01 f202 	mul.w	r2, r1, r2
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4413      	add	r3, r2
 8006698:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <get_fat+0xe6>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	091b      	lsrs	r3, r3, #4
 80066b2:	e002      	b.n	80066ba <get_fat+0xec>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ba:	617b      	str	r3, [r7, #20]
			break;
 80066bc:	e055      	b.n	800676a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	899b      	ldrh	r3, [r3, #12]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	4619      	mov	r1, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80066d2:	4413      	add	r3, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	6938      	ldr	r0, [r7, #16]
 80066d8:	f7ff febc 	bl	8006454 <move_window>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d140      	bne.n	8006764 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	8992      	ldrh	r2, [r2, #12]
 80066f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80066f4:	fb00 f202 	mul.w	r2, r0, r2
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	440b      	add	r3, r1
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fbf7 	bl	8005ef0 <ld_word>
 8006702:	4603      	mov	r3, r0
 8006704:	617b      	str	r3, [r7, #20]
			break;
 8006706:	e030      	b.n	800676a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	899b      	ldrh	r3, [r3, #12]
 8006710:	089b      	lsrs	r3, r3, #2
 8006712:	b29b      	uxth	r3, r3
 8006714:	4619      	mov	r1, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	fbb3 f3f1 	udiv	r3, r3, r1
 800671c:	4413      	add	r3, r2
 800671e:	4619      	mov	r1, r3
 8006720:	6938      	ldr	r0, [r7, #16]
 8006722:	f7ff fe97 	bl	8006454 <move_window>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d11d      	bne.n	8006768 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	8992      	ldrh	r2, [r2, #12]
 800673a:	fbb3 f0f2 	udiv	r0, r3, r2
 800673e:	fb00 f202 	mul.w	r2, r0, r2
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	440b      	add	r3, r1
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fbeb 	bl	8005f22 <ld_dword>
 800674c:	4603      	mov	r3, r0
 800674e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006752:	617b      	str	r3, [r7, #20]
			break;
 8006754:	e009      	b.n	800676a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006756:	2301      	movs	r3, #1
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	e006      	b.n	800676a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800675c:	bf00      	nop
 800675e:	e004      	b.n	800676a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006760:	bf00      	nop
 8006762:	e002      	b.n	800676a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006768:	bf00      	nop
		}
	}

	return val;
 800676a:	697b      	ldr	r3, [r7, #20]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006774:	b590      	push	{r4, r7, lr}
 8006776:	b089      	sub	sp, #36	@ 0x24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006780:	2302      	movs	r3, #2
 8006782:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b01      	cmp	r3, #1
 8006788:	f240 8109 	bls.w	800699e <put_fat+0x22a>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	429a      	cmp	r2, r3
 8006794:	f080 8103 	bcs.w	800699e <put_fat+0x22a>
		switch (fs->fs_type) {
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b03      	cmp	r3, #3
 800679e:	f000 80b6 	beq.w	800690e <put_fat+0x19a>
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	f300 80fb 	bgt.w	800699e <put_fat+0x22a>
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d003      	beq.n	80067b4 <put_fat+0x40>
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	f000 8083 	beq.w	80068b8 <put_fat+0x144>
 80067b2:	e0f4      	b.n	800699e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4413      	add	r3, r2
 80067c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	899b      	ldrh	r3, [r3, #12]
 80067ca:	4619      	mov	r1, r3
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d2:	4413      	add	r3, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff fe3c 	bl	8006454 <move_window>
 80067dc:	4603      	mov	r3, r0
 80067de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 80d4 	bne.w	8006990 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	61ba      	str	r2, [r7, #24]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	8992      	ldrh	r2, [r2, #12]
 80067f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80067fc:	fb00 f202 	mul.w	r2, r0, r2
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	440b      	add	r3, r1
 8006804:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00d      	beq.n	800682c <put_fat+0xb8>
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	b25b      	sxtb	r3, r3
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	b25a      	sxtb	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	b25b      	sxtb	r3, r3
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	b25b      	sxtb	r3, r3
 8006824:	4313      	orrs	r3, r2
 8006826:	b25b      	sxtb	r3, r3
 8006828:	b2db      	uxtb	r3, r3
 800682a:	e001      	b.n	8006830 <put_fat+0xbc>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	899b      	ldrh	r3, [r3, #12]
 8006842:	4619      	mov	r1, r3
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	fbb3 f3f1 	udiv	r3, r3, r1
 800684a:	4413      	add	r3, r2
 800684c:	4619      	mov	r1, r3
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7ff fe00 	bl	8006454 <move_window>
 8006854:	4603      	mov	r3, r0
 8006856:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006858:	7ffb      	ldrb	r3, [r7, #31]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 809a 	bne.w	8006994 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	899b      	ldrh	r3, [r3, #12]
 800686a:	461a      	mov	r2, r3
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006872:	fb00 f202 	mul.w	r2, r0, r2
 8006876:	1a9b      	subs	r3, r3, r2
 8006878:	440b      	add	r3, r1
 800687a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <put_fat+0x11a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	b2db      	uxtb	r3, r3
 800688c:	e00e      	b.n	80068ac <put_fat+0x138>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b25b      	sxtb	r3, r3
 8006894:	f023 030f 	bic.w	r3, r3, #15
 8006898:	b25a      	sxtb	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	0a1b      	lsrs	r3, r3, #8
 800689e:	b25b      	sxtb	r3, r3
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	4313      	orrs	r3, r2
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	70da      	strb	r2, [r3, #3]
			break;
 80068b6:	e072      	b.n	800699e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	899b      	ldrh	r3, [r3, #12]
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4619      	mov	r1, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80068cc:	4413      	add	r3, r2
 80068ce:	4619      	mov	r1, r3
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fdbf 	bl	8006454 <move_window>
 80068d6:	4603      	mov	r3, r0
 80068d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068da:	7ffb      	ldrb	r3, [r7, #31]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d15b      	bne.n	8006998 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	8992      	ldrh	r2, [r2, #12]
 80068ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80068f2:	fb00 f202 	mul.w	r2, r0, r2
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	440b      	add	r3, r1
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	b292      	uxth	r2, r2
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff fb31 	bl	8005f68 <st_word>
			fs->wflag = 1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	70da      	strb	r2, [r3, #3]
			break;
 800690c:	e047      	b.n	800699e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	899b      	ldrh	r3, [r3, #12]
 8006916:	089b      	lsrs	r3, r3, #2
 8006918:	b29b      	uxth	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006922:	4413      	add	r3, r2
 8006924:	4619      	mov	r1, r3
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff fd94 	bl	8006454 <move_window>
 800692c:	4603      	mov	r3, r0
 800692e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006930:	7ffb      	ldrb	r3, [r7, #31]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d132      	bne.n	800699c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	8992      	ldrh	r2, [r2, #12]
 800694a:	fbb3 f0f2 	udiv	r0, r3, r2
 800694e:	fb00 f202 	mul.w	r2, r0, r2
 8006952:	1a9b      	subs	r3, r3, r2
 8006954:	440b      	add	r3, r1
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fae3 	bl	8005f22 <ld_dword>
 800695c:	4603      	mov	r3, r0
 800695e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006962:	4323      	orrs	r3, r4
 8006964:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	8992      	ldrh	r2, [r2, #12]
 8006974:	fbb3 f0f2 	udiv	r0, r3, r2
 8006978:	fb00 f202 	mul.w	r2, r0, r2
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	440b      	add	r3, r1
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff fb0b 	bl	8005f9e <st_dword>
			fs->wflag = 1;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	70da      	strb	r2, [r3, #3]
			break;
 800698e:	e006      	b.n	800699e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006990:	bf00      	nop
 8006992:	e004      	b.n	800699e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006994:	bf00      	nop
 8006996:	e002      	b.n	800699e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006998:	bf00      	nop
 800699a:	e000      	b.n	800699e <put_fat+0x22a>
			if (res != FR_OK) break;
 800699c:	bf00      	nop
		}
	}
	return res;
 800699e:	7ffb      	ldrb	r3, [r7, #31]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3724      	adds	r7, #36	@ 0x24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd90      	pop	{r4, r7, pc}

080069a8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d904      	bls.n	80069ce <remove_chain+0x26>
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d301      	bcc.n	80069d2 <remove_chain+0x2a>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e04b      	b.n	8006a6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	69b8      	ldr	r0, [r7, #24]
 80069e0:	f7ff fec8 	bl	8006774 <put_fat>
 80069e4:	4603      	mov	r3, r0
 80069e6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80069e8:	7ffb      	ldrb	r3, [r7, #31]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <remove_chain+0x4a>
 80069ee:	7ffb      	ldrb	r3, [r7, #31]
 80069f0:	e03b      	b.n	8006a6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff fdea 	bl	80065ce <get_fat>
 80069fa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d031      	beq.n	8006a66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <remove_chain+0x64>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e02e      	b.n	8006a6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d101      	bne.n	8006a18 <remove_chain+0x70>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e028      	b.n	8006a6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006a18:	2200      	movs	r2, #0
 8006a1a:	68b9      	ldr	r1, [r7, #8]
 8006a1c:	69b8      	ldr	r0, [r7, #24]
 8006a1e:	f7ff fea9 	bl	8006774 <put_fat>
 8006a22:	4603      	mov	r3, r0
 8006a24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006a26:	7ffb      	ldrb	r3, [r7, #31]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <remove_chain+0x88>
 8006a2c:	7ffb      	ldrb	r3, [r7, #31]
 8006a2e:	e01c      	b.n	8006a6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	3b02      	subs	r3, #2
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20b      	bcs.n	8006a56 <remove_chain+0xae>
			fs->free_clst++;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	791b      	ldrb	r3, [r3, #4]
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d3c6      	bcc.n	80069f2 <remove_chain+0x4a>
 8006a64:	e000      	b.n	8006a68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006a66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b088      	sub	sp, #32
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10d      	bne.n	8006aa4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <create_chain+0x2c>
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d31b      	bcc.n	8006ad6 <create_chain+0x64>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	e018      	b.n	8006ad6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fd91 	bl	80065ce <get_fat>
 8006aac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d801      	bhi.n	8006ab8 <create_chain+0x46>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e070      	b.n	8006b9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d101      	bne.n	8006ac4 <create_chain+0x52>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	e06a      	b.n	8006b9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d201      	bcs.n	8006ad2 <create_chain+0x60>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	e063      	b.n	8006b9a <create_chain+0x128>
		scl = clst;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	3301      	adds	r3, #1
 8006ade:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d307      	bcc.n	8006afa <create_chain+0x88>
				ncl = 2;
 8006aea:	2302      	movs	r3, #2
 8006aec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d901      	bls.n	8006afa <create_chain+0x88>
 8006af6:	2300      	movs	r3, #0
 8006af8:	e04f      	b.n	8006b9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006afa:	69f9      	ldr	r1, [r7, #28]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff fd66 	bl	80065ce <get_fat>
 8006b02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d003      	beq.n	8006b18 <create_chain+0xa6>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d101      	bne.n	8006b1c <create_chain+0xaa>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	e03e      	b.n	8006b9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d1da      	bne.n	8006ada <create_chain+0x68>
 8006b24:	2300      	movs	r3, #0
 8006b26:	e038      	b.n	8006b9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006b28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	69f9      	ldr	r1, [r7, #28]
 8006b30:	6938      	ldr	r0, [r7, #16]
 8006b32:	f7ff fe1f 	bl	8006774 <put_fat>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <create_chain+0xe2>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6938      	ldr	r0, [r7, #16]
 8006b4c:	f7ff fe12 	bl	8006774 <put_fat>
 8006b50:	4603      	mov	r3, r0
 8006b52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d116      	bne.n	8006b88 <create_chain+0x116>
		fs->last_clst = ncl;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	699a      	ldr	r2, [r3, #24]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	3b02      	subs	r3, #2
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d804      	bhi.n	8006b78 <create_chain+0x106>
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	1e5a      	subs	r2, r3, #1
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	791b      	ldrb	r3, [r3, #4]
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	711a      	strb	r2, [r3, #4]
 8006b86:	e007      	b.n	8006b98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d102      	bne.n	8006b94 <create_chain+0x122>
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	e000      	b.n	8006b96 <create_chain+0x124>
 8006b94:	2301      	movs	r3, #1
 8006b96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006b98:	69fb      	ldr	r3, [r7, #28]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	899b      	ldrh	r3, [r3, #12]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	8952      	ldrh	r2, [r2, #10]
 8006bca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	613a      	str	r2, [r7, #16]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <clmt_clust+0x42>
 8006be0:	2300      	movs	r3, #0
 8006be2:	e010      	b.n	8006c06 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d307      	bcc.n	8006bfc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006bfa:	e7e9      	b.n	8006bd0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006bfc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	4413      	add	r3, r2
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c28:	d204      	bcs.n	8006c34 <dir_sdi+0x22>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f003 031f 	and.w	r3, r3, #31
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006c34:	2302      	movs	r3, #2
 8006c36:	e071      	b.n	8006d1c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <dir_sdi+0x46>
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d902      	bls.n	8006c58 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c56:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10c      	bne.n	8006c78 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	8912      	ldrh	r2, [r2, #8]
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d301      	bcc.n	8006c6e <dir_sdi+0x5c>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e056      	b.n	8006d1c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	61da      	str	r2, [r3, #28]
 8006c76:	e02d      	b.n	8006cd4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	895b      	ldrh	r3, [r3, #10]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	899b      	ldrh	r3, [r3, #12]
 8006c82:	fb02 f303 	mul.w	r3, r2, r3
 8006c86:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c88:	e019      	b.n	8006cbe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6979      	ldr	r1, [r7, #20]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fc9d 	bl	80065ce <get_fat>
 8006c94:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d101      	bne.n	8006ca2 <dir_sdi+0x90>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e03c      	b.n	8006d1c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d904      	bls.n	8006cb2 <dir_sdi+0xa0>
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d301      	bcc.n	8006cb6 <dir_sdi+0xa4>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e032      	b.n	8006d1c <dir_sdi+0x10a>
			ofs -= csz;
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d2e1      	bcs.n	8006c8a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006cc6:	6979      	ldr	r1, [r7, #20]
 8006cc8:	6938      	ldr	r0, [r7, #16]
 8006cca:	f7ff fc61 	bl	8006590 <clust2sect>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <dir_sdi+0xd4>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e01a      	b.n	8006d1c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	69da      	ldr	r2, [r3, #28]
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	899b      	ldrh	r3, [r3, #12]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cf6:	441a      	add	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	899b      	ldrh	r3, [r3, #12]
 8006d06:	461a      	mov	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d0e:	fb00 f202 	mul.w	r2, r0, r2
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	18ca      	adds	r2, r1, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	3320      	adds	r3, #32
 8006d3a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <dir_next+0x28>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d4a:	d301      	bcc.n	8006d50 <dir_next+0x2c>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	e0bb      	b.n	8006ec8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	899b      	ldrh	r3, [r3, #12]
 8006d54:	461a      	mov	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d5c:	fb01 f202 	mul.w	r2, r1, r2
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f040 809d 	bne.w	8006ea2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	8912      	ldrh	r2, [r2, #8]
 8006d82:	4293      	cmp	r3, r2
 8006d84:	f0c0 808d 	bcc.w	8006ea2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	61da      	str	r2, [r3, #28]
 8006d8e:	2304      	movs	r3, #4
 8006d90:	e09a      	b.n	8006ec8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	899b      	ldrh	r3, [r3, #12]
 8006d96:	461a      	mov	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	8952      	ldrh	r2, [r2, #10]
 8006da2:	3a01      	subs	r2, #1
 8006da4:	4013      	ands	r3, r2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d17b      	bne.n	8006ea2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f7ff fc0b 	bl	80065ce <get_fat>
 8006db8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d801      	bhi.n	8006dc4 <dir_next+0xa0>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e081      	b.n	8006ec8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dca:	d101      	bne.n	8006dd0 <dir_next+0xac>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e07b      	b.n	8006ec8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d359      	bcc.n	8006e8e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	61da      	str	r2, [r3, #28]
 8006de6:	2304      	movs	r3, #4
 8006de8:	e06e      	b.n	8006ec8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f7ff fe3d 	bl	8006a72 <create_chain>
 8006df8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <dir_next+0xe0>
 8006e00:	2307      	movs	r3, #7
 8006e02:	e061      	b.n	8006ec8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <dir_next+0xea>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e05c      	b.n	8006ec8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d101      	bne.n	8006e1a <dir_next+0xf6>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e056      	b.n	8006ec8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7ff fad6 	bl	80063cc <sync_window>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <dir_next+0x106>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e04e      	b.n	8006ec8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	899b      	ldrh	r3, [r3, #12]
 8006e34:	461a      	mov	r2, r3
 8006e36:	2100      	movs	r1, #0
 8006e38:	f7ff f8fe 	bl	8006038 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	6979      	ldr	r1, [r7, #20]
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff fba4 	bl	8006590 <clust2sect>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e4e:	e012      	b.n	8006e76 <dir_next+0x152>
						fs->wflag = 1;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff fab8 	bl	80063cc <sync_window>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <dir_next+0x142>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e030      	b.n	8006ec8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	895b      	ldrh	r3, [r3, #10]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d3e6      	bcc.n	8006e50 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad2      	subs	r2, r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006e94:	6979      	ldr	r1, [r7, #20]
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff fb7a 	bl	8006590 <clust2sect>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	899b      	ldrh	r3, [r3, #12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006eba:	fb00 f202 	mul.w	r2, r0, r2
 8006ebe:	1a9b      	subs	r3, r3, r2
 8006ec0:	18ca      	adds	r2, r1, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff fe95 	bl	8006c12 <dir_sdi>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d12b      	bne.n	8006f4a <dir_alloc+0x7a>
		n = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	4619      	mov	r1, r3
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff faa9 	bl	8006454 <move_window>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11d      	bne.n	8006f48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2be5      	cmp	r3, #229	@ 0xe5
 8006f14:	d004      	beq.n	8006f20 <dir_alloc+0x50>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d107      	bne.n	8006f30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3301      	adds	r3, #1
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d102      	bne.n	8006f34 <dir_alloc+0x64>
 8006f2e:	e00c      	b.n	8006f4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006f34:	2101      	movs	r1, #1
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fef4 	bl	8006d24 <dir_next>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0d7      	beq.n	8006ef6 <dir_alloc+0x26>
 8006f46:	e000      	b.n	8006f4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006f48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d101      	bne.n	8006f54 <dir_alloc+0x84>
 8006f50:	2307      	movs	r3, #7
 8006f52:	75fb      	strb	r3, [r7, #23]
	return res;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	331a      	adds	r3, #26
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe ffbf 	bl	8005ef0 <ld_word>
 8006f72:	4603      	mov	r3, r0
 8006f74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d109      	bne.n	8006f92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	3314      	adds	r3, #20
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe ffb4 	bl	8005ef0 <ld_word>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	331a      	adds	r3, #26
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe ffd8 	bl	8005f68 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d109      	bne.n	8006fd4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f103 0214 	add.w	r2, r3, #20
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fe ffca 	bl	8005f68 <st_word>
	}
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	331a      	adds	r3, #26
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe ff80 	bl	8005ef0 <ld_word>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <cmp_lfn+0x1e>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e059      	b.n	80070ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007002:	1e5a      	subs	r2, r3, #1
 8007004:	4613      	mov	r3, r2
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007010:	2301      	movs	r3, #1
 8007012:	81fb      	strh	r3, [r7, #14]
 8007014:	2300      	movs	r3, #0
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	e033      	b.n	8007082 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800701a:	4a27      	ldr	r2, [pc, #156]	@ (80070b8 <cmp_lfn+0xdc>)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	4413      	add	r3, r2
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	4413      	add	r3, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe ff61 	bl	8005ef0 <ld_word>
 800702e:	4603      	mov	r3, r0
 8007030:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007032:	89fb      	ldrh	r3, [r7, #14]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01a      	beq.n	800706e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2bfe      	cmp	r3, #254	@ 0xfe
 800703c:	d812      	bhi.n	8007064 <cmp_lfn+0x88>
 800703e:	89bb      	ldrh	r3, [r7, #12]
 8007040:	4618      	mov	r0, r3
 8007042:	f002 fa1f 	bl	8009484 <ff_wtoupper>
 8007046:	4603      	mov	r3, r0
 8007048:	461c      	mov	r4, r3
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	617a      	str	r2, [r7, #20]
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f002 fa13 	bl	8009484 <ff_wtoupper>
 800705e:	4603      	mov	r3, r0
 8007060:	429c      	cmp	r4, r3
 8007062:	d001      	beq.n	8007068 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007064:	2300      	movs	r3, #0
 8007066:	e022      	b.n	80070ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8007068:	89bb      	ldrh	r3, [r7, #12]
 800706a:	81fb      	strh	r3, [r7, #14]
 800706c:	e006      	b.n	800707c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800706e:	89bb      	ldrh	r3, [r7, #12]
 8007070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007074:	4293      	cmp	r3, r2
 8007076:	d001      	beq.n	800707c <cmp_lfn+0xa0>
 8007078:	2300      	movs	r3, #0
 800707a:	e018      	b.n	80070ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	3301      	adds	r3, #1
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b0c      	cmp	r3, #12
 8007086:	d9c8      	bls.n	800701a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <cmp_lfn+0xd0>
 8007094:	89fb      	ldrh	r3, [r7, #14]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <cmp_lfn+0xd0>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <cmp_lfn+0xd0>
 80070a8:	2300      	movs	r3, #0
 80070aa:	e000      	b.n	80070ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80070ac:	2301      	movs	r3, #1
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	0800e6e8 	.word	0x0800e6e8

080070bc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	331a      	adds	r3, #26
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe ff10 	bl	8005ef0 <ld_word>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <pick_lfn+0x1e>
 80070d6:	2300      	movs	r3, #0
 80070d8:	e04d      	b.n	8007176 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070e2:	1e5a      	subs	r2, r3, #1
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80070f0:	2301      	movs	r3, #1
 80070f2:	81fb      	strh	r3, [r7, #14]
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	e028      	b.n	800714c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80070fa:	4a21      	ldr	r2, [pc, #132]	@ (8007180 <pick_lfn+0xc4>)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4413      	add	r3, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fef1 	bl	8005ef0 <ld_word>
 800710e:	4603      	mov	r3, r0
 8007110:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007112:	89fb      	ldrh	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2bfe      	cmp	r3, #254	@ 0xfe
 800711c:	d901      	bls.n	8007122 <pick_lfn+0x66>
 800711e:	2300      	movs	r3, #0
 8007120:	e029      	b.n	8007176 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007122:	89bb      	ldrh	r3, [r7, #12]
 8007124:	81fb      	strh	r3, [r7, #14]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	617a      	str	r2, [r7, #20]
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	89fa      	ldrh	r2, [r7, #14]
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	e006      	b.n	8007146 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007138:	89bb      	ldrh	r3, [r7, #12]
 800713a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800713e:	4293      	cmp	r3, r2
 8007140:	d001      	beq.n	8007146 <pick_lfn+0x8a>
 8007142:	2300      	movs	r3, #0
 8007144:	e017      	b.n	8007176 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	3301      	adds	r3, #1
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b0c      	cmp	r3, #12
 8007150:	d9d3      	bls.n	80070fa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2bfe      	cmp	r3, #254	@ 0xfe
 8007162:	d901      	bls.n	8007168 <pick_lfn+0xac>
 8007164:	2300      	movs	r3, #0
 8007166:	e006      	b.n	8007176 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4413      	add	r3, r2
 8007170:	2200      	movs	r2, #0
 8007172:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007174:	2301      	movs	r3, #1
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	0800e6e8 	.word	0x0800e6e8

08007184 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	460b      	mov	r3, r1
 8007194:	71fb      	strb	r3, [r7, #7]
 8007196:	4613      	mov	r3, r2
 8007198:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	330d      	adds	r3, #13
 800719e:	79ba      	ldrb	r2, [r7, #6]
 80071a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	330b      	adds	r3, #11
 80071a6:	220f      	movs	r2, #15
 80071a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	330c      	adds	r3, #12
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	331a      	adds	r3, #26
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fed5 	bl	8005f68 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	1e5a      	subs	r2, r3, #1
 80071c2:	4613      	mov	r3, r2
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	82fb      	strh	r3, [r7, #22]
 80071d2:	2300      	movs	r3, #0
 80071d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80071d6:	8afb      	ldrh	r3, [r7, #22]
 80071d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071dc:	4293      	cmp	r3, r2
 80071de:	d007      	beq.n	80071f0 <put_lfn+0x6c>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	61fa      	str	r2, [r7, #28]
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80071f0:	4a17      	ldr	r2, [pc, #92]	@ (8007250 <put_lfn+0xcc>)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	4413      	add	r3, r2
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	4413      	add	r3, r2
 80071fe:	8afa      	ldrh	r2, [r7, #22]
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe feb0 	bl	8005f68 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007208:	8afb      	ldrh	r3, [r7, #22]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <put_lfn+0x90>
 800720e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007212:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	3301      	adds	r3, #1
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b0c      	cmp	r3, #12
 800721e:	d9da      	bls.n	80071d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007220:	8afb      	ldrh	r3, [r7, #22]
 8007222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007226:	4293      	cmp	r3, r2
 8007228:	d006      	beq.n	8007238 <put_lfn+0xb4>
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d103      	bne.n	8007240 <put_lfn+0xbc>
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800723e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	79fa      	ldrb	r2, [r7, #7]
 8007244:	701a      	strb	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	0800e6e8 	.word	0x0800e6e8

08007254 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08c      	sub	sp, #48	@ 0x30
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007262:	220b      	movs	r2, #11
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7fe fec5 	bl	8005ff6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b05      	cmp	r3, #5
 8007270:	d92b      	bls.n	80072ca <gen_numname+0x76>
		sr = seq;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007276:	e022      	b.n	80072be <gen_numname+0x6a>
			wc = *lfn++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	1c9a      	adds	r2, r3, #2
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007282:	2300      	movs	r3, #0
 8007284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007286:	e017      	b.n	80072b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	005a      	lsls	r2, r3, #1
 800728c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	4413      	add	r3, r2
 8007294:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007296:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <gen_numname+0x5e>
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80072ac:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80072b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80072b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b4:	3301      	adds	r3, #1
 80072b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	2b0f      	cmp	r3, #15
 80072bc:	d9e4      	bls.n	8007288 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1d8      	bne.n	8007278 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80072ca:	2307      	movs	r3, #7
 80072cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	3330      	adds	r3, #48	@ 0x30
 80072da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80072de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072e2:	2b39      	cmp	r3, #57	@ 0x39
 80072e4:	d904      	bls.n	80072f0 <gen_numname+0x9c>
 80072e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072ea:	3307      	adds	r3, #7
 80072ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80072f6:	3330      	adds	r3, #48	@ 0x30
 80072f8:	443b      	add	r3, r7
 80072fa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80072fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1df      	bne.n	80072ce <gen_numname+0x7a>
	ns[i] = '~';
 800730e:	f107 0214 	add.w	r2, r7, #20
 8007312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007314:	4413      	add	r3, r2
 8007316:	227e      	movs	r2, #126	@ 0x7e
 8007318:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800731a:	2300      	movs	r3, #0
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
 800731e:	e002      	b.n	8007326 <gen_numname+0xd2>
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	3301      	adds	r3, #1
 8007324:	627b      	str	r3, [r7, #36]	@ 0x24
 8007326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732a:	429a      	cmp	r2, r3
 800732c:	d205      	bcs.n	800733a <gen_numname+0xe6>
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	4413      	add	r3, r2
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b20      	cmp	r3, #32
 8007338:	d1f2      	bne.n	8007320 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800733a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733c:	2b07      	cmp	r3, #7
 800733e:	d807      	bhi.n	8007350 <gen_numname+0xfc>
 8007340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007346:	3330      	adds	r3, #48	@ 0x30
 8007348:	443b      	add	r3, r7
 800734a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800734e:	e000      	b.n	8007352 <gen_numname+0xfe>
 8007350:	2120      	movs	r1, #32
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	627a      	str	r2, [r7, #36]	@ 0x24
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	460a      	mov	r2, r1
 800735e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	2b07      	cmp	r3, #7
 8007364:	d9e9      	bls.n	800733a <gen_numname+0xe6>
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	3730      	adds	r7, #48	@ 0x30
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800737c:	230b      	movs	r3, #11
 800737e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	0852      	lsrs	r2, r2, #1
 8007386:	01db      	lsls	r3, r3, #7
 8007388:	4313      	orrs	r3, r2
 800738a:	b2da      	uxtb	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	6079      	str	r1, [r7, #4]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	4413      	add	r3, r2
 8007396:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	3b01      	subs	r3, #1
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1ed      	bne.n	8007380 <sum_sfn+0x10>
	return sum;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b086      	sub	sp, #24
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80073bc:	2304      	movs	r3, #4
 80073be:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80073c6:	23ff      	movs	r3, #255	@ 0xff
 80073c8:	757b      	strb	r3, [r7, #21]
 80073ca:	23ff      	movs	r3, #255	@ 0xff
 80073cc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80073ce:	e081      	b.n	80074d4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6938      	ldr	r0, [r7, #16]
 80073d8:	f7ff f83c 	bl	8006454 <move_window>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d17c      	bne.n	80074e0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80073ee:	7dbb      	ldrb	r3, [r7, #22]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80073f4:	2304      	movs	r3, #4
 80073f6:	75fb      	strb	r3, [r7, #23]
 80073f8:	e077      	b.n	80074ea <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	330b      	adds	r3, #11
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007406:	73fb      	strb	r3, [r7, #15]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	7bfa      	ldrb	r2, [r7, #15]
 800740c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800740e:	7dbb      	ldrb	r3, [r7, #22]
 8007410:	2be5      	cmp	r3, #229	@ 0xe5
 8007412:	d00e      	beq.n	8007432 <dir_read+0x80>
 8007414:	7dbb      	ldrb	r3, [r7, #22]
 8007416:	2b2e      	cmp	r3, #46	@ 0x2e
 8007418:	d00b      	beq.n	8007432 <dir_read+0x80>
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	f023 0320 	bic.w	r3, r3, #32
 8007420:	2b08      	cmp	r3, #8
 8007422:	bf0c      	ite	eq
 8007424:	2301      	moveq	r3, #1
 8007426:	2300      	movne	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	4293      	cmp	r3, r2
 8007430:	d002      	beq.n	8007438 <dir_read+0x86>
				ord = 0xFF;
 8007432:	23ff      	movs	r3, #255	@ 0xff
 8007434:	757b      	strb	r3, [r7, #21]
 8007436:	e044      	b.n	80074c2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d12f      	bne.n	800749e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800743e:	7dbb      	ldrb	r3, [r7, #22]
 8007440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00d      	beq.n	8007464 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	7b5b      	ldrb	r3, [r3, #13]
 800744e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007450:	7dbb      	ldrb	r3, [r7, #22]
 8007452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007456:	75bb      	strb	r3, [r7, #22]
 8007458:	7dbb      	ldrb	r3, [r7, #22]
 800745a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007464:	7dba      	ldrb	r2, [r7, #22]
 8007466:	7d7b      	ldrb	r3, [r7, #21]
 8007468:	429a      	cmp	r2, r3
 800746a:	d115      	bne.n	8007498 <dir_read+0xe6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	330d      	adds	r3, #13
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	7d3a      	ldrb	r2, [r7, #20]
 8007476:	429a      	cmp	r2, r3
 8007478:	d10e      	bne.n	8007498 <dir_read+0xe6>
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	691a      	ldr	r2, [r3, #16]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f7ff fe19 	bl	80070bc <pick_lfn>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <dir_read+0xe6>
 8007490:	7d7b      	ldrb	r3, [r7, #21]
 8007492:	3b01      	subs	r3, #1
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e000      	b.n	800749a <dir_read+0xe8>
 8007498:	23ff      	movs	r3, #255	@ 0xff
 800749a:	757b      	strb	r3, [r7, #21]
 800749c:	e011      	b.n	80074c2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800749e:	7d7b      	ldrb	r3, [r7, #21]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <dir_read+0x106>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff ff61 	bl	8007370 <sum_sfn>
 80074ae:	4603      	mov	r3, r0
 80074b0:	461a      	mov	r2, r3
 80074b2:	7d3b      	ldrb	r3, [r7, #20]
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d015      	beq.n	80074e4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f04f 32ff 	mov.w	r2, #4294967295
 80074be:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80074c0:	e010      	b.n	80074e4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80074c2:	2100      	movs	r1, #0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff fc2d 	bl	8006d24 <dir_next>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <dir_read+0x136>
	while (dp->sect) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f47f af79 	bne.w	80073d0 <dir_read+0x1e>
 80074de:	e004      	b.n	80074ea <dir_read+0x138>
		if (res != FR_OK) break;
 80074e0:	bf00      	nop
 80074e2:	e002      	b.n	80074ea <dir_read+0x138>
					break;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <dir_read+0x138>
		if (res != FR_OK) break;
 80074e8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <dir_read+0x144>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	61da      	str	r2, [r3, #28]
	return res;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800750e:	2100      	movs	r1, #0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff fb7e 	bl	8006c12 <dir_sdi>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <dir_find+0x24>
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	e0a9      	b.n	8007678 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007524:	23ff      	movs	r3, #255	@ 0xff
 8007526:	753b      	strb	r3, [r7, #20]
 8007528:	7d3b      	ldrb	r3, [r7, #20]
 800752a:	757b      	strb	r3, [r7, #21]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f04f 32ff 	mov.w	r2, #4294967295
 8007532:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4619      	mov	r1, r3
 800753a:	6938      	ldr	r0, [r7, #16]
 800753c:	f7fe ff8a 	bl	8006454 <move_window>
 8007540:	4603      	mov	r3, r0
 8007542:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f040 8090 	bne.w	800766c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007554:	7dbb      	ldrb	r3, [r7, #22]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <dir_find+0x60>
 800755a:	2304      	movs	r3, #4
 800755c:	75fb      	strb	r3, [r7, #23]
 800755e:	e08a      	b.n	8007676 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	330b      	adds	r3, #11
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800756c:	73fb      	strb	r3, [r7, #15]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	7bfa      	ldrb	r2, [r7, #15]
 8007572:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007574:	7dbb      	ldrb	r3, [r7, #22]
 8007576:	2be5      	cmp	r3, #229	@ 0xe5
 8007578:	d007      	beq.n	800758a <dir_find+0x8a>
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <dir_find+0x98>
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	d006      	beq.n	8007598 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800758a:	23ff      	movs	r3, #255	@ 0xff
 800758c:	757b      	strb	r3, [r7, #21]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	631a      	str	r2, [r3, #48]	@ 0x30
 8007596:	e05e      	b.n	8007656 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b0f      	cmp	r3, #15
 800759c:	d136      	bne.n	800760c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d154      	bne.n	8007656 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80075ac:	7dbb      	ldrb	r3, [r7, #22]
 80075ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00d      	beq.n	80075d2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	7b5b      	ldrb	r3, [r3, #13]
 80075bc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80075be:	7dbb      	ldrb	r3, [r7, #22]
 80075c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075c4:	75bb      	strb	r3, [r7, #22]
 80075c6:	7dbb      	ldrb	r3, [r7, #22]
 80075c8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695a      	ldr	r2, [r3, #20]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80075d2:	7dba      	ldrb	r2, [r7, #22]
 80075d4:	7d7b      	ldrb	r3, [r7, #21]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d115      	bne.n	8007606 <dir_find+0x106>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	330d      	adds	r3, #13
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	7d3a      	ldrb	r2, [r7, #20]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d10e      	bne.n	8007606 <dir_find+0x106>
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f7ff fcf2 	bl	8006fdc <cmp_lfn>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <dir_find+0x106>
 80075fe:	7d7b      	ldrb	r3, [r7, #21]
 8007600:	3b01      	subs	r3, #1
 8007602:	b2db      	uxtb	r3, r3
 8007604:	e000      	b.n	8007608 <dir_find+0x108>
 8007606:	23ff      	movs	r3, #255	@ 0xff
 8007608:	757b      	strb	r3, [r7, #21]
 800760a:	e024      	b.n	8007656 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800760c:	7d7b      	ldrb	r3, [r7, #21]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <dir_find+0x126>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff feaa 	bl	8007370 <sum_sfn>
 800761c:	4603      	mov	r3, r0
 800761e:	461a      	mov	r2, r3
 8007620:	7d3b      	ldrb	r3, [r7, #20]
 8007622:	4293      	cmp	r3, r2
 8007624:	d024      	beq.n	8007670 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <dir_find+0x14a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a18      	ldr	r0, [r3, #32]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3324      	adds	r3, #36	@ 0x24
 800763c:	220b      	movs	r2, #11
 800763e:	4619      	mov	r1, r3
 8007640:	f7fe fd15 	bl	800606e <mem_cmp>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d014      	beq.n	8007674 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800764a:	23ff      	movs	r3, #255	@ 0xff
 800764c:	757b      	strb	r3, [r7, #21]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f04f 32ff 	mov.w	r2, #4294967295
 8007654:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007656:	2100      	movs	r1, #0
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff fb63 	bl	8006d24 <dir_next>
 800765e:	4603      	mov	r3, r0
 8007660:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007662:	7dfb      	ldrb	r3, [r7, #23]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f43f af65 	beq.w	8007534 <dir_find+0x34>
 800766a:	e004      	b.n	8007676 <dir_find+0x176>
		if (res != FR_OK) break;
 800766c:	bf00      	nop
 800766e:	e002      	b.n	8007676 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007674:	bf00      	nop

	return res;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08c      	sub	sp, #48	@ 0x30
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007694:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <dir_register+0x20>
 800769c:	2306      	movs	r3, #6
 800769e:	e0e0      	b.n	8007862 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80076a0:	2300      	movs	r3, #0
 80076a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a4:	e002      	b.n	80076ac <dir_register+0x2c>
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	3301      	adds	r3, #1
 80076aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	4413      	add	r3, r2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f4      	bne.n	80076a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80076c2:	f107 030c 	add.w	r3, r7, #12
 80076c6:	220c      	movs	r2, #12
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fc94 	bl	8005ff6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d032      	beq.n	800773e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2240      	movs	r2, #64	@ 0x40
 80076dc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80076e0:	2301      	movs	r3, #1
 80076e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076e4:	e016      	b.n	8007714 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	f107 010c 	add.w	r1, r7, #12
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	f7ff fdad 	bl	8007254 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff ff00 	bl	8007500 <dir_find>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007706:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	3301      	adds	r3, #1
 8007712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	2b63      	cmp	r3, #99	@ 0x63
 8007718:	d9e5      	bls.n	80076e6 <dir_register+0x66>
 800771a:	e000      	b.n	800771e <dir_register+0x9e>
			if (res != FR_OK) break;
 800771c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	2b64      	cmp	r3, #100	@ 0x64
 8007722:	d101      	bne.n	8007728 <dir_register+0xa8>
 8007724:	2307      	movs	r3, #7
 8007726:	e09c      	b.n	8007862 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800772c:	2b04      	cmp	r3, #4
 800772e:	d002      	beq.n	8007736 <dir_register+0xb6>
 8007730:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007734:	e095      	b.n	8007862 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007736:	7dfa      	ldrb	r2, [r7, #23]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <dir_register+0xd8>
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	330c      	adds	r3, #12
 800774c:	4a47      	ldr	r2, [pc, #284]	@ (800786c <dir_register+0x1ec>)
 800774e:	fba2 2303 	umull	r2, r3, r2, r3
 8007752:	089b      	lsrs	r3, r3, #2
 8007754:	3301      	adds	r3, #1
 8007756:	e000      	b.n	800775a <dir_register+0xda>
 8007758:	2301      	movs	r3, #1
 800775a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800775c:	6a39      	ldr	r1, [r7, #32]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fbb6 	bl	8006ed0 <dir_alloc>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800776a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800776e:	2b00      	cmp	r3, #0
 8007770:	d148      	bne.n	8007804 <dir_register+0x184>
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	3b01      	subs	r3, #1
 8007776:	623b      	str	r3, [r7, #32]
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d042      	beq.n	8007804 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695a      	ldr	r2, [r3, #20]
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	015b      	lsls	r3, r3, #5
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff fa41 	bl	8006c12 <dir_sdi>
 8007790:	4603      	mov	r3, r0
 8007792:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007796:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800779a:	2b00      	cmp	r3, #0
 800779c:	d132      	bne.n	8007804 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3324      	adds	r3, #36	@ 0x24
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fde4 	bl	8007370 <sum_sfn>
 80077a8:	4603      	mov	r3, r0
 80077aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	4619      	mov	r1, r3
 80077b2:	69f8      	ldr	r0, [r7, #28]
 80077b4:	f7fe fe4e 	bl	8006454 <move_window>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80077be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d11d      	bne.n	8007802 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	6918      	ldr	r0, [r3, #16]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a19      	ldr	r1, [r3, #32]
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	7efb      	ldrb	r3, [r7, #27]
 80077d4:	f7ff fcd6 	bl	8007184 <put_lfn>
				fs->wflag = 1;
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	2201      	movs	r2, #1
 80077dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80077de:	2100      	movs	r1, #0
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff fa9f 	bl	8006d24 <dir_next>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80077ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d107      	bne.n	8007804 <dir_register+0x184>
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	623b      	str	r3, [r7, #32]
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1d5      	bne.n	80077ac <dir_register+0x12c>
 8007800:	e000      	b.n	8007804 <dir_register+0x184>
				if (res != FR_OK) break;
 8007802:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007804:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007808:	2b00      	cmp	r3, #0
 800780a:	d128      	bne.n	800785e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	4619      	mov	r1, r3
 8007812:	69f8      	ldr	r0, [r7, #28]
 8007814:	f7fe fe1e 	bl	8006454 <move_window>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800781e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007822:	2b00      	cmp	r3, #0
 8007824:	d11b      	bne.n	800785e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	2220      	movs	r2, #32
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f7fe fc02 	bl	8006038 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a18      	ldr	r0, [r3, #32]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3324      	adds	r3, #36	@ 0x24
 800783c:	220b      	movs	r2, #11
 800783e:	4619      	mov	r1, r3
 8007840:	f7fe fbd9 	bl	8005ff6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	330c      	adds	r3, #12
 8007850:	f002 0218 	and.w	r2, r2, #24
 8007854:	b2d2      	uxtb	r2, r2
 8007856:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	2201      	movs	r2, #1
 800785c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800785e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007862:	4618      	mov	r0, r3
 8007864:	3730      	adds	r7, #48	@ 0x30
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	4ec4ec4f 	.word	0x4ec4ec4f

08007870 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788c:	d007      	beq.n	800789e <dir_remove+0x2e>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff f9bc 	bl	8006c12 <dir_sdi>
 800789a:	4603      	mov	r3, r0
 800789c:	e000      	b.n	80078a0 <dir_remove+0x30>
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d128      	bne.n	80078fa <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	4619      	mov	r1, r3
 80078ae:	6938      	ldr	r0, [r7, #16]
 80078b0:	f7fe fdd0 	bl	8006454 <move_window>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d115      	bne.n	80078ea <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	22e5      	movs	r2, #229	@ 0xe5
 80078c4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2201      	movs	r2, #1
 80078ca:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d90b      	bls.n	80078ee <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80078d6:	2100      	movs	r1, #0
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff fa23 	bl	8006d24 <dir_next>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d0df      	beq.n	80078a8 <dir_remove+0x38>
 80078e8:	e002      	b.n	80078f0 <dir_remove+0x80>
			if (res != FR_OK) break;
 80078ea:	bf00      	nop
 80078ec:	e000      	b.n	80078f0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80078ee:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d101      	bne.n	80078fa <dir_remove+0x8a>
 80078f6:	2302      	movs	r3, #2
 80078f8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	@ 0x28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	2300      	movs	r3, #0
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	61ba      	str	r2, [r7, #24]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4413      	add	r3, r2
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007932:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007934:	2b1f      	cmp	r3, #31
 8007936:	d940      	bls.n	80079ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007938:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800793a:	2b2f      	cmp	r3, #47	@ 0x2f
 800793c:	d006      	beq.n	800794c <create_name+0x48>
 800793e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007940:	2b5c      	cmp	r3, #92	@ 0x5c
 8007942:	d110      	bne.n	8007966 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007944:	e002      	b.n	800794c <create_name+0x48>
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	3301      	adds	r3, #1
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	4413      	add	r3, r2
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b2f      	cmp	r3, #47	@ 0x2f
 8007956:	d0f6      	beq.n	8007946 <create_name+0x42>
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	4413      	add	r3, r2
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b5c      	cmp	r3, #92	@ 0x5c
 8007962:	d0f0      	beq.n	8007946 <create_name+0x42>
			break;
 8007964:	e02a      	b.n	80079bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2bfe      	cmp	r3, #254	@ 0xfe
 800796a:	d901      	bls.n	8007970 <create_name+0x6c>
 800796c:	2306      	movs	r3, #6
 800796e:	e17d      	b.n	8007c6c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007970:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007972:	b2db      	uxtb	r3, r3
 8007974:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007976:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007978:	2101      	movs	r1, #1
 800797a:	4618      	mov	r0, r3
 800797c:	f001 fd46 	bl	800940c <ff_convert>
 8007980:	4603      	mov	r3, r0
 8007982:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <create_name+0x8a>
 800798a:	2306      	movs	r3, #6
 800798c:	e16e      	b.n	8007c6c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800798e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007990:	2b7f      	cmp	r3, #127	@ 0x7f
 8007992:	d809      	bhi.n	80079a8 <create_name+0xa4>
 8007994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007996:	4619      	mov	r1, r3
 8007998:	488d      	ldr	r0, [pc, #564]	@ (8007bd0 <create_name+0x2cc>)
 800799a:	f7fe fb8f 	bl	80060bc <chk_chr>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <create_name+0xa4>
 80079a4:	2306      	movs	r3, #6
 80079a6:	e161      	b.n	8007c6c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	617a      	str	r2, [r7, #20]
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80079b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80079b8:	e7b4      	b.n	8007924 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80079ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	441a      	add	r2, r3
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079c8:	2b1f      	cmp	r3, #31
 80079ca:	d801      	bhi.n	80079d0 <create_name+0xcc>
 80079cc:	2304      	movs	r3, #4
 80079ce:	e000      	b.n	80079d2 <create_name+0xce>
 80079d0:	2300      	movs	r3, #0
 80079d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079d6:	e011      	b.n	80079fc <create_name+0xf8>
		w = lfn[di - 1];
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80079de:	3b01      	subs	r3, #1
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80079ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d002      	beq.n	80079f6 <create_name+0xf2>
 80079f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80079f4:	d106      	bne.n	8007a04 <create_name+0x100>
		di--;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1ea      	bne.n	80079d8 <create_name+0xd4>
 8007a02:	e000      	b.n	8007a06 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007a04:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <create_name+0x118>
 8007a18:	2306      	movs	r3, #6
 8007a1a:	e127      	b.n	8007c6c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3324      	adds	r3, #36	@ 0x24
 8007a20:	220b      	movs	r2, #11
 8007a22:	2120      	movs	r1, #32
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe fb07 	bl	8006038 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	e002      	b.n	8007a36 <create_name+0x132>
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	3301      	adds	r3, #1
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d0f5      	beq.n	8007a30 <create_name+0x12c>
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a50:	d0ee      	beq.n	8007a30 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d009      	beq.n	8007a6c <create_name+0x168>
 8007a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a5c:	f043 0303 	orr.w	r3, r3, #3
 8007a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a64:	e002      	b.n	8007a6c <create_name+0x168>
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d009      	beq.n	8007a86 <create_name+0x182>
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a84:	d1ef      	bne.n	8007a66 <create_name+0x162>

	i = b = 0; ni = 8;
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	623b      	str	r3, [r7, #32]
 8007a90:	2308      	movs	r3, #8
 8007a92:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	61ba      	str	r2, [r7, #24]
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007aa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8090 	beq.w	8007bcc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007aac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	d006      	beq.n	8007ac0 <create_name+0x1bc>
 8007ab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ab4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ab6:	d10a      	bne.n	8007ace <create_name+0x1ca>
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d006      	beq.n	8007ace <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac4:	f043 0303 	orr.w	r3, r3, #3
 8007ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007acc:	e07d      	b.n	8007bca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007ace:	6a3a      	ldr	r2, [r7, #32]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d203      	bcs.n	8007ade <create_name+0x1da>
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d123      	bne.n	8007b26 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b0b      	cmp	r3, #11
 8007ae2:	d106      	bne.n	8007af2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ae8:	f043 0303 	orr.w	r3, r3, #3
 8007aec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007af0:	e075      	b.n	8007bde <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d005      	beq.n	8007b06 <create_name+0x202>
 8007afa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007afe:	f043 0303 	orr.w	r3, r3, #3
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d866      	bhi.n	8007bdc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	2308      	movs	r3, #8
 8007b14:	623b      	str	r3, [r7, #32]
 8007b16:	230b      	movs	r3, #11
 8007b18:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b24:	e051      	b.n	8007bca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b28:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b2a:	d914      	bls.n	8007b56 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b2e:	2100      	movs	r1, #0
 8007b30:	4618      	mov	r0, r3
 8007b32:	f001 fc6b 	bl	800940c <ff_convert>
 8007b36:	4603      	mov	r3, r0
 8007b38:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <create_name+0x246>
 8007b40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b42:	3b80      	subs	r3, #128	@ 0x80
 8007b44:	4a23      	ldr	r2, [pc, #140]	@ (8007bd4 <create_name+0x2d0>)
 8007b46:	5cd3      	ldrb	r3, [r2, r3]
 8007b48:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b4e:	f043 0302 	orr.w	r3, r3, #2
 8007b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <create_name+0x268>
 8007b5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b5e:	4619      	mov	r1, r3
 8007b60:	481d      	ldr	r0, [pc, #116]	@ (8007bd8 <create_name+0x2d4>)
 8007b62:	f7fe faab 	bl	80060bc <chk_chr>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b6c:	235f      	movs	r3, #95	@ 0x5f
 8007b6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b74:	f043 0303 	orr.w	r3, r3, #3
 8007b78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007b7c:	e01b      	b.n	8007bb6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b80:	2b40      	cmp	r3, #64	@ 0x40
 8007b82:	d909      	bls.n	8007b98 <create_name+0x294>
 8007b84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b86:	2b5a      	cmp	r3, #90	@ 0x5a
 8007b88:	d806      	bhi.n	8007b98 <create_name+0x294>
					b |= 2;
 8007b8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b8e:	f043 0302 	orr.w	r3, r3, #2
 8007b92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b96:	e00e      	b.n	8007bb6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007b98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b9a:	2b60      	cmp	r3, #96	@ 0x60
 8007b9c:	d90b      	bls.n	8007bb6 <create_name+0x2b2>
 8007b9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ba0:	2b7a      	cmp	r3, #122	@ 0x7a
 8007ba2:	d808      	bhi.n	8007bb6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007bb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bb2:	3b20      	subs	r3, #32
 8007bb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	623a      	str	r2, [r7, #32]
 8007bbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007bbe:	b2d1      	uxtb	r1, r2
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	460a      	mov	r2, r1
 8007bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007bca:	e763      	b.n	8007a94 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007bcc:	bf00      	nop
 8007bce:	e006      	b.n	8007bde <create_name+0x2da>
 8007bd0:	0800e5e8 	.word	0x0800e5e8
 8007bd4:	0800e668 	.word	0x0800e668
 8007bd8:	0800e5f4 	.word	0x0800e5f4
			if (si > di) break;			/* No extension */
 8007bdc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007be4:	2be5      	cmp	r3, #229	@ 0xe5
 8007be6:	d103      	bne.n	8007bf0 <create_name+0x2ec>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2205      	movs	r2, #5
 8007bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b08      	cmp	r3, #8
 8007bf4:	d104      	bne.n	8007c00 <create_name+0x2fc>
 8007bf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007c00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c04:	f003 030c 	and.w	r3, r3, #12
 8007c08:	2b0c      	cmp	r3, #12
 8007c0a:	d005      	beq.n	8007c18 <create_name+0x314>
 8007c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d105      	bne.n	8007c24 <create_name+0x320>
 8007c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c1c:	f043 0302 	orr.w	r3, r3, #2
 8007c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d117      	bne.n	8007c60 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c34:	f003 0303 	and.w	r3, r3, #3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d105      	bne.n	8007c48 <create_name+0x344>
 8007c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c40:	f043 0310 	orr.w	r3, r3, #16
 8007c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c4c:	f003 030c 	and.w	r3, r3, #12
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d105      	bne.n	8007c60 <create_name+0x35c>
 8007c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c58:	f043 0308 	orr.w	r3, r3, #8
 8007c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007c66:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007c6a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3728      	adds	r7, #40	@ 0x28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c88:	e002      	b.n	8007c90 <follow_path+0x1c>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c96:	d0f8      	beq.n	8007c8a <follow_path+0x16>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c9e:	d0f4      	beq.n	8007c8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b1f      	cmp	r3, #31
 8007cac:	d80a      	bhi.n	8007cc4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2280      	movs	r2, #128	@ 0x80
 8007cb2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7fe ffaa 	bl	8006c12 <dir_sdi>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]
 8007cc2:	e048      	b.n	8007d56 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fe1b 	bl	8007904 <create_name>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d139      	bne.n	8007d4c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fc11 	bl	8007500 <dir_find>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007ce8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d12c      	bne.n	8007d50 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007cf6:	7afb      	ldrb	r3, [r7, #11]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d127      	bne.n	8007d50 <follow_path+0xdc>
 8007d00:	2305      	movs	r3, #5
 8007d02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007d04:	e024      	b.n	8007d50 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d06:	7afb      	ldrb	r3, [r7, #11]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d121      	bne.n	8007d54 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	799b      	ldrb	r3, [r3, #6]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d1c:	2305      	movs	r3, #5
 8007d1e:	75fb      	strb	r3, [r7, #23]
 8007d20:	e019      	b.n	8007d56 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	8992      	ldrh	r2, [r2, #12]
 8007d30:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d34:	fb00 f202 	mul.w	r2, r0, r2
 8007d38:	1a9b      	subs	r3, r3, r2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff f90d 	bl	8006f5e <ld_clust>
 8007d44:	4602      	mov	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d4a:	e7bb      	b.n	8007cc4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007d4c:	bf00      	nop
 8007d4e:	e002      	b.n	8007d56 <follow_path+0xe2>
				break;
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d54:	bf00      	nop
			}
		}
	}

	return res;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d031      	beq.n	8007dda <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	e002      	b.n	8007d84 <get_ldnumber+0x24>
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	3301      	adds	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b1f      	cmp	r3, #31
 8007d8a:	d903      	bls.n	8007d94 <get_ldnumber+0x34>
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d92:	d1f4      	bne.n	8007d7e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d9a:	d11c      	bne.n	8007dd6 <get_ldnumber+0x76>
			tp = *path;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	60fa      	str	r2, [r7, #12]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	3b30      	subs	r3, #48	@ 0x30
 8007dac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b09      	cmp	r3, #9
 8007db2:	d80e      	bhi.n	8007dd2 <get_ldnumber+0x72>
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d10a      	bne.n	8007dd2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d107      	bne.n	8007dd2 <get_ldnumber+0x72>
					vol = (int)i;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	e002      	b.n	8007ddc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007dda:	693b      	ldr	r3, [r7, #16]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	70da      	strb	r2, [r3, #3]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfe:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7fe fb26 	bl	8006454 <move_window>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <check_fs+0x2a>
 8007e0e:	2304      	movs	r3, #4
 8007e10:	e038      	b.n	8007e84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3338      	adds	r3, #56	@ 0x38
 8007e16:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe f868 	bl	8005ef0 <ld_word>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d001      	beq.n	8007e30 <check_fs+0x48>
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e029      	b.n	8007e84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e36:	2be9      	cmp	r3, #233	@ 0xe9
 8007e38:	d009      	beq.n	8007e4e <check_fs+0x66>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e40:	2beb      	cmp	r3, #235	@ 0xeb
 8007e42:	d11e      	bne.n	8007e82 <check_fs+0x9a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007e4a:	2b90      	cmp	r3, #144	@ 0x90
 8007e4c:	d119      	bne.n	8007e82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3338      	adds	r3, #56	@ 0x38
 8007e52:	3336      	adds	r3, #54	@ 0x36
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe f864 	bl	8005f22 <ld_dword>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e60:	4a0a      	ldr	r2, [pc, #40]	@ (8007e8c <check_fs+0xa4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d101      	bne.n	8007e6a <check_fs+0x82>
 8007e66:	2300      	movs	r3, #0
 8007e68:	e00c      	b.n	8007e84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3338      	adds	r3, #56	@ 0x38
 8007e6e:	3352      	adds	r3, #82	@ 0x52
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe f856 	bl	8005f22 <ld_dword>
 8007e76:	4603      	mov	r3, r0
 8007e78:	4a05      	ldr	r2, [pc, #20]	@ (8007e90 <check_fs+0xa8>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d101      	bne.n	8007e82 <check_fs+0x9a>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e000      	b.n	8007e84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e82:	2302      	movs	r3, #2
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	00544146 	.word	0x00544146
 8007e90:	33544146 	.word	0x33544146

08007e94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b096      	sub	sp, #88	@ 0x58
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff ff59 	bl	8007d60 <get_ldnumber>
 8007eae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da01      	bge.n	8007eba <find_volume+0x26>
 8007eb6:	230b      	movs	r3, #11
 8007eb8:	e265      	b.n	8008386 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007eba:	4a9f      	ldr	r2, [pc, #636]	@ (8008138 <find_volume+0x2a4>)
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <find_volume+0x3a>
 8007eca:	230c      	movs	r3, #12
 8007ecc:	e25b      	b.n	8008386 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ed2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	f023 0301 	bic.w	r3, r3, #1
 8007eda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01a      	beq.n	8007f1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fd ff61 	bl	8005db0 <disk_status>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10c      	bne.n	8007f1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <find_volume+0x82>
 8007f06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f12:	230a      	movs	r3, #10
 8007f14:	e237      	b.n	8008386 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007f16:	2300      	movs	r3, #0
 8007f18:	e235      	b.n	8008386 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fd ff59 	bl	8005de4 <disk_initialize>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f44:	2303      	movs	r3, #3
 8007f46:	e21e      	b.n	8008386 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <find_volume+0xca>
 8007f4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f5a:	230a      	movs	r3, #10
 8007f5c:	e213      	b.n	8008386 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	7858      	ldrb	r0, [r3, #1]
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	330c      	adds	r3, #12
 8007f66:	461a      	mov	r2, r3
 8007f68:	2102      	movs	r1, #2
 8007f6a:	f7fd ffa3 	bl	8005eb4 <disk_ioctl>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <find_volume+0xe4>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e206      	b.n	8008386 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7a:	899b      	ldrh	r3, [r3, #12]
 8007f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f80:	d80d      	bhi.n	8007f9e <find_volume+0x10a>
 8007f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f84:	899b      	ldrh	r3, [r3, #12]
 8007f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f8a:	d308      	bcc.n	8007f9e <find_volume+0x10a>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	899b      	ldrh	r3, [r3, #12]
 8007f90:	461a      	mov	r2, r3
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	899b      	ldrh	r3, [r3, #12]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <find_volume+0x10e>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e1f1      	b.n	8008386 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007fa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fa8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007faa:	f7ff ff1d 	bl	8007de8 <check_fs>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d149      	bne.n	8008050 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fc0:	e01e      	b.n	8008000 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007fd0:	4413      	add	r3, r2
 8007fd2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d006      	beq.n	8007fec <find_volume+0x158>
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fd ff9d 	bl	8005f22 <ld_dword>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	e000      	b.n	8007fee <find_volume+0x15a>
 8007fec:	2200      	movs	r2, #0
 8007fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	3358      	adds	r3, #88	@ 0x58
 8007ff4:	443b      	add	r3, r7
 8007ff6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008002:	2b03      	cmp	r3, #3
 8008004:	d9dd      	bls.n	8007fc2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008006:	2300      	movs	r3, #0
 8008008:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800800a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <find_volume+0x182>
 8008010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008012:	3b01      	subs	r3, #1
 8008014:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	3358      	adds	r3, #88	@ 0x58
 800801c:	443b      	add	r3, r7
 800801e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008022:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <find_volume+0x1a2>
 800802a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800802c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800802e:	f7ff fedb 	bl	8007de8 <check_fs>
 8008032:	4603      	mov	r3, r0
 8008034:	e000      	b.n	8008038 <find_volume+0x1a4>
 8008036:	2303      	movs	r3, #3
 8008038:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800803c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008040:	2b01      	cmp	r3, #1
 8008042:	d905      	bls.n	8008050 <find_volume+0x1bc>
 8008044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008046:	3301      	adds	r3, #1
 8008048:	643b      	str	r3, [r7, #64]	@ 0x40
 800804a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800804c:	2b03      	cmp	r3, #3
 800804e:	d9e2      	bls.n	8008016 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008050:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008054:	2b04      	cmp	r3, #4
 8008056:	d101      	bne.n	800805c <find_volume+0x1c8>
 8008058:	2301      	movs	r3, #1
 800805a:	e194      	b.n	8008386 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800805c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008060:	2b01      	cmp	r3, #1
 8008062:	d901      	bls.n	8008068 <find_volume+0x1d4>
 8008064:	230d      	movs	r3, #13
 8008066:	e18e      	b.n	8008386 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806a:	3338      	adds	r3, #56	@ 0x38
 800806c:	330b      	adds	r3, #11
 800806e:	4618      	mov	r0, r3
 8008070:	f7fd ff3e 	bl	8005ef0 <ld_word>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807a:	899b      	ldrh	r3, [r3, #12]
 800807c:	429a      	cmp	r2, r3
 800807e:	d001      	beq.n	8008084 <find_volume+0x1f0>
 8008080:	230d      	movs	r3, #13
 8008082:	e180      	b.n	8008386 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008086:	3338      	adds	r3, #56	@ 0x38
 8008088:	3316      	adds	r3, #22
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd ff30 	bl	8005ef0 <ld_word>
 8008090:	4603      	mov	r3, r0
 8008092:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <find_volume+0x214>
 800809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809c:	3338      	adds	r3, #56	@ 0x38
 800809e:	3324      	adds	r3, #36	@ 0x24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fd ff3e 	bl	8005f22 <ld_dword>
 80080a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80080ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80080b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80080b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ba:	789b      	ldrb	r3, [r3, #2]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d005      	beq.n	80080cc <find_volume+0x238>
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	789b      	ldrb	r3, [r3, #2]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d001      	beq.n	80080cc <find_volume+0x238>
 80080c8:	230d      	movs	r3, #13
 80080ca:	e15c      	b.n	8008386 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	789b      	ldrb	r3, [r3, #2]
 80080d0:	461a      	mov	r2, r3
 80080d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
 80080d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080e0:	461a      	mov	r2, r3
 80080e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80080e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e8:	895b      	ldrh	r3, [r3, #10]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d008      	beq.n	8008100 <find_volume+0x26c>
 80080ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f0:	895b      	ldrh	r3, [r3, #10]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f6:	895b      	ldrh	r3, [r3, #10]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <find_volume+0x270>
 8008100:	230d      	movs	r3, #13
 8008102:	e140      	b.n	8008386 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008106:	3338      	adds	r3, #56	@ 0x38
 8008108:	3311      	adds	r3, #17
 800810a:	4618      	mov	r0, r3
 800810c:	f7fd fef0 	bl	8005ef0 <ld_word>
 8008110:	4603      	mov	r3, r0
 8008112:	461a      	mov	r2, r3
 8008114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008116:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	891b      	ldrh	r3, [r3, #8]
 800811c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800811e:	8992      	ldrh	r2, [r2, #12]
 8008120:	0952      	lsrs	r2, r2, #5
 8008122:	b292      	uxth	r2, r2
 8008124:	fbb3 f1f2 	udiv	r1, r3, r2
 8008128:	fb01 f202 	mul.w	r2, r1, r2
 800812c:	1a9b      	subs	r3, r3, r2
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <find_volume+0x2a8>
 8008134:	230d      	movs	r3, #13
 8008136:	e126      	b.n	8008386 <find_volume+0x4f2>
 8008138:	20000314 	.word	0x20000314

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800813c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813e:	3338      	adds	r3, #56	@ 0x38
 8008140:	3313      	adds	r3, #19
 8008142:	4618      	mov	r0, r3
 8008144:	f7fd fed4 	bl	8005ef0 <ld_word>
 8008148:	4603      	mov	r3, r0
 800814a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800814c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <find_volume+0x2cc>
 8008152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008154:	3338      	adds	r3, #56	@ 0x38
 8008156:	3320      	adds	r3, #32
 8008158:	4618      	mov	r0, r3
 800815a:	f7fd fee2 	bl	8005f22 <ld_dword>
 800815e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008162:	3338      	adds	r3, #56	@ 0x38
 8008164:	330e      	adds	r3, #14
 8008166:	4618      	mov	r0, r3
 8008168:	f7fd fec2 	bl	8005ef0 <ld_word>
 800816c:	4603      	mov	r3, r0
 800816e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008170:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <find_volume+0x2e6>
 8008176:	230d      	movs	r3, #13
 8008178:	e105      	b.n	8008386 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800817a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800817c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800817e:	4413      	add	r3, r2
 8008180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008182:	8911      	ldrh	r1, [r2, #8]
 8008184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008186:	8992      	ldrh	r2, [r2, #12]
 8008188:	0952      	lsrs	r2, r2, #5
 800818a:	b292      	uxth	r2, r2
 800818c:	fbb1 f2f2 	udiv	r2, r1, r2
 8008190:	b292      	uxth	r2, r2
 8008192:	4413      	add	r3, r2
 8008194:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819a:	429a      	cmp	r2, r3
 800819c:	d201      	bcs.n	80081a2 <find_volume+0x30e>
 800819e:	230d      	movs	r3, #13
 80081a0:	e0f1      	b.n	8008386 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80081a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081aa:	8952      	ldrh	r2, [r2, #10]
 80081ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <find_volume+0x328>
 80081b8:	230d      	movs	r3, #13
 80081ba:	e0e4      	b.n	8008386 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80081bc:	2303      	movs	r3, #3
 80081be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d802      	bhi.n	80081d2 <find_volume+0x33e>
 80081cc:	2302      	movs	r3, #2
 80081ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80081d8:	4293      	cmp	r3, r2
 80081da:	d802      	bhi.n	80081e2 <find_volume+0x34e>
 80081dc:	2301      	movs	r3, #1
 80081de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	1c9a      	adds	r2, r3, #2
 80081e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081ee:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80081f0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80081f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f4:	441a      	add	r2, r3
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80081fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	441a      	add	r2, r3
 8008200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008202:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008204:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008208:	2b03      	cmp	r3, #3
 800820a:	d11e      	bne.n	800824a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	3338      	adds	r3, #56	@ 0x38
 8008210:	332a      	adds	r3, #42	@ 0x2a
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd fe6c 	bl	8005ef0 <ld_word>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <find_volume+0x38e>
 800821e:	230d      	movs	r3, #13
 8008220:	e0b1      	b.n	8008386 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008224:	891b      	ldrh	r3, [r3, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <find_volume+0x39a>
 800822a:	230d      	movs	r3, #13
 800822c:	e0ab      	b.n	8008386 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	3338      	adds	r3, #56	@ 0x38
 8008232:	332c      	adds	r3, #44	@ 0x2c
 8008234:	4618      	mov	r0, r3
 8008236:	f7fd fe74 	bl	8005f22 <ld_dword>
 800823a:	4602      	mov	r2, r0
 800823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	647b      	str	r3, [r7, #68]	@ 0x44
 8008248:	e01f      	b.n	800828a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800824a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824c:	891b      	ldrh	r3, [r3, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <find_volume+0x3c2>
 8008252:	230d      	movs	r3, #13
 8008254:	e097      	b.n	8008386 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800825a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800825c:	441a      	add	r2, r3
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008262:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008266:	2b02      	cmp	r3, #2
 8008268:	d103      	bne.n	8008272 <find_volume+0x3de>
 800826a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	e00a      	b.n	8008288 <find_volume+0x3f4>
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	69da      	ldr	r2, [r3, #28]
 8008276:	4613      	mov	r3, r2
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	4413      	add	r3, r2
 800827c:	085a      	lsrs	r2, r3, #1
 800827e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008288:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	6a1a      	ldr	r2, [r3, #32]
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	899b      	ldrh	r3, [r3, #12]
 8008292:	4619      	mov	r1, r3
 8008294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008296:	440b      	add	r3, r1
 8008298:	3b01      	subs	r3, #1
 800829a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800829c:	8989      	ldrh	r1, [r1, #12]
 800829e:	fbb3 f3f1 	udiv	r3, r3, r1
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d201      	bcs.n	80082aa <find_volume+0x416>
 80082a6:	230d      	movs	r3, #13
 80082a8:	e06d      	b.n	8008386 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	f04f 32ff 	mov.w	r2, #4294967295
 80082b0:	619a      	str	r2, [r3, #24]
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	699a      	ldr	r2, [r3, #24]
 80082b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80082ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082bc:	2280      	movs	r2, #128	@ 0x80
 80082be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80082c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d149      	bne.n	800835c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80082c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ca:	3338      	adds	r3, #56	@ 0x38
 80082cc:	3330      	adds	r3, #48	@ 0x30
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fd fe0e 	bl	8005ef0 <ld_word>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d140      	bne.n	800835c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80082da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082dc:	3301      	adds	r3, #1
 80082de:	4619      	mov	r1, r3
 80082e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80082e2:	f7fe f8b7 	bl	8006454 <move_window>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d137      	bne.n	800835c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80082ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ee:	2200      	movs	r2, #0
 80082f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	3338      	adds	r3, #56	@ 0x38
 80082f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fd fdf8 	bl	8005ef0 <ld_word>
 8008300:	4603      	mov	r3, r0
 8008302:	461a      	mov	r2, r3
 8008304:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008308:	429a      	cmp	r2, r3
 800830a:	d127      	bne.n	800835c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830e:	3338      	adds	r3, #56	@ 0x38
 8008310:	4618      	mov	r0, r3
 8008312:	f7fd fe06 	bl	8005f22 <ld_dword>
 8008316:	4603      	mov	r3, r0
 8008318:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <find_volume+0x4fc>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d11e      	bne.n	800835c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	3338      	adds	r3, #56	@ 0x38
 8008322:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008326:	4618      	mov	r0, r3
 8008328:	f7fd fdfb 	bl	8005f22 <ld_dword>
 800832c:	4603      	mov	r3, r0
 800832e:	4a19      	ldr	r2, [pc, #100]	@ (8008394 <find_volume+0x500>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d113      	bne.n	800835c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008336:	3338      	adds	r3, #56	@ 0x38
 8008338:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800833c:	4618      	mov	r0, r3
 800833e:	f7fd fdf0 	bl	8005f22 <ld_dword>
 8008342:	4602      	mov	r2, r0
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834a:	3338      	adds	r3, #56	@ 0x38
 800834c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008350:	4618      	mov	r0, r3
 8008352:	f7fd fde6 	bl	8005f22 <ld_dword>
 8008356:	4602      	mov	r2, r0
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008362:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008364:	4b0c      	ldr	r3, [pc, #48]	@ (8008398 <find_volume+0x504>)
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <find_volume+0x504>)
 800836e:	801a      	strh	r2, [r3, #0]
 8008370:	4b09      	ldr	r3, [pc, #36]	@ (8008398 <find_volume+0x504>)
 8008372:	881a      	ldrh	r2, [r3, #0]
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837a:	4a08      	ldr	r2, [pc, #32]	@ (800839c <find_volume+0x508>)
 800837c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800837e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008380:	f7fe f800 	bl	8006384 <clear_lock>
#endif
	return FR_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3758      	adds	r7, #88	@ 0x58
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	41615252 	.word	0x41615252
 8008394:	61417272 	.word	0x61417272
 8008398:	20000318 	.word	0x20000318
 800839c:	2000033c 	.word	0x2000033c

080083a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80083aa:	2309      	movs	r3, #9
 80083ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01c      	beq.n	80083ee <validate+0x4e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d018      	beq.n	80083ee <validate+0x4e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d013      	beq.n	80083ee <validate+0x4e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	889a      	ldrh	r2, [r3, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	88db      	ldrh	r3, [r3, #6]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d10c      	bne.n	80083ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fd fce8 	bl	8005db0 <disk_status>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <validate+0x4e>
			res = FR_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d102      	bne.n	80083fa <validate+0x5a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	e000      	b.n	80083fc <validate+0x5c>
 80083fa:	2300      	movs	r3, #0
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	6013      	str	r3, [r2, #0]
	return res;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800841e:	f107 0310 	add.w	r3, r7, #16
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fc9c 	bl	8007d60 <get_ldnumber>
 8008428:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	2b00      	cmp	r3, #0
 800842e:	da01      	bge.n	8008434 <f_mount+0x28>
 8008430:	230b      	movs	r3, #11
 8008432:	e02b      	b.n	800848c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008434:	4a17      	ldr	r2, [pc, #92]	@ (8008494 <f_mount+0x88>)
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800843c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008444:	69b8      	ldr	r0, [r7, #24]
 8008446:	f7fd ff9d 	bl	8006384 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	490d      	ldr	r1, [pc, #52]	@ (8008494 <f_mount+0x88>)
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <f_mount+0x66>
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d001      	beq.n	8008476 <f_mount+0x6a>
 8008472:	2300      	movs	r3, #0
 8008474:	e00a      	b.n	800848c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008476:	f107 010c 	add.w	r1, r7, #12
 800847a:	f107 0308 	add.w	r3, r7, #8
 800847e:	2200      	movs	r2, #0
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff fd07 	bl	8007e94 <find_volume>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800848a:	7dfb      	ldrb	r3, [r7, #23]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3720      	adds	r7, #32
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20000314 	.word	0x20000314

08008498 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b09a      	sub	sp, #104	@ 0x68
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <f_open+0x18>
 80084ac:	2309      	movs	r3, #9
 80084ae:	e1b7      	b.n	8008820 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80084b0:	79fb      	ldrb	r3, [r7, #7]
 80084b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80084b8:	79fa      	ldrb	r2, [r7, #7]
 80084ba:	f107 0114 	add.w	r1, r7, #20
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fce6 	bl	8007e94 <find_volume>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80084ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f040 819b 	bne.w	800880e <f_open+0x376>
		dj.obj.fs = fs;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	f107 0318 	add.w	r3, r7, #24
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fbc5 	bl	8007c74 <follow_path>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80084f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d118      	bne.n	800852a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80084f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084fc:	b25b      	sxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	da03      	bge.n	800850a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008502:	2306      	movs	r3, #6
 8008504:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008508:	e00f      	b.n	800852a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	2b01      	cmp	r3, #1
 800850e:	bf8c      	ite	hi
 8008510:	2301      	movhi	r3, #1
 8008512:	2300      	movls	r3, #0
 8008514:	b2db      	uxtb	r3, r3
 8008516:	461a      	mov	r2, r3
 8008518:	f107 0318 	add.w	r3, r7, #24
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd fde8 	bl	80060f4 <chk_lock>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	f003 031c 	and.w	r3, r3, #28
 8008530:	2b00      	cmp	r3, #0
 8008532:	d07f      	beq.n	8008634 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008534:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008538:	2b00      	cmp	r3, #0
 800853a:	d017      	beq.n	800856c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800853c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008540:	2b04      	cmp	r3, #4
 8008542:	d10e      	bne.n	8008562 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008544:	f7fd fe32 	bl	80061ac <enq_lock>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d006      	beq.n	800855c <f_open+0xc4>
 800854e:	f107 0318 	add.w	r3, r7, #24
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff f894 	bl	8007680 <dir_register>
 8008558:	4603      	mov	r3, r0
 800855a:	e000      	b.n	800855e <f_open+0xc6>
 800855c:	2312      	movs	r3, #18
 800855e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	f043 0308 	orr.w	r3, r3, #8
 8008568:	71fb      	strb	r3, [r7, #7]
 800856a:	e010      	b.n	800858e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800856c:	7fbb      	ldrb	r3, [r7, #30]
 800856e:	f003 0311 	and.w	r3, r3, #17
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <f_open+0xe6>
					res = FR_DENIED;
 8008576:	2307      	movs	r3, #7
 8008578:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800857c:	e007      	b.n	800858e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <f_open+0xf6>
 8008588:	2308      	movs	r3, #8
 800858a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800858e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008592:	2b00      	cmp	r3, #0
 8008594:	d168      	bne.n	8008668 <f_open+0x1d0>
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d063      	beq.n	8008668 <f_open+0x1d0>
				dw = GET_FATTIME();
 80085a0:	f7fd fa68 	bl	8005a74 <get_fattime>
 80085a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	330e      	adds	r3, #14
 80085aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fd fcf6 	bl	8005f9e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80085b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b4:	3316      	adds	r3, #22
 80085b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fd fcf0 	bl	8005f9e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	330b      	adds	r3, #11
 80085c2:	2220      	movs	r2, #32
 80085c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085ca:	4611      	mov	r1, r2
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe fcc6 	bl	8006f5e <ld_clust>
 80085d2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085d8:	2200      	movs	r2, #0
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fcde 	bl	8006f9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80085e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e2:	331c      	adds	r3, #28
 80085e4:	2100      	movs	r1, #0
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fd fcd9 	bl	8005f9e <st_dword>
					fs->wflag = 1;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2201      	movs	r2, #1
 80085f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80085f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d037      	beq.n	8008668 <f_open+0x1d0>
						dw = fs->winsect;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80085fe:	f107 0318 	add.w	r3, r7, #24
 8008602:	2200      	movs	r2, #0
 8008604:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008606:	4618      	mov	r0, r3
 8008608:	f7fe f9ce 	bl	80069a8 <remove_chain>
 800860c:	4603      	mov	r3, r0
 800860e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008612:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008616:	2b00      	cmp	r3, #0
 8008618:	d126      	bne.n	8008668 <f_open+0x1d0>
							res = move_window(fs, dw);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800861e:	4618      	mov	r0, r3
 8008620:	f7fd ff18 	bl	8006454 <move_window>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800862e:	3a01      	subs	r2, #1
 8008630:	615a      	str	r2, [r3, #20]
 8008632:	e019      	b.n	8008668 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008634:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008638:	2b00      	cmp	r3, #0
 800863a:	d115      	bne.n	8008668 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800863c:	7fbb      	ldrb	r3, [r7, #30]
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <f_open+0x1b6>
					res = FR_NO_FILE;
 8008646:	2304      	movs	r3, #4
 8008648:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800864c:	e00c      	b.n	8008668 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800864e:	79fb      	ldrb	r3, [r7, #7]
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <f_open+0x1d0>
 8008658:	7fbb      	ldrb	r3, [r7, #30]
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <f_open+0x1d0>
						res = FR_DENIED;
 8008662:	2307      	movs	r3, #7
 8008664:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008668:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800866c:	2b00      	cmp	r3, #0
 800866e:	d126      	bne.n	80086be <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008680:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800868a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	2b01      	cmp	r3, #1
 8008694:	bf8c      	ite	hi
 8008696:	2301      	movhi	r3, #1
 8008698:	2300      	movls	r3, #0
 800869a:	b2db      	uxtb	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	f107 0318 	add.w	r3, r7, #24
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd fda3 	bl	80061f0 <inc_lock>
 80086aa:	4602      	mov	r2, r0
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <f_open+0x226>
 80086b8:	2302      	movs	r3, #2
 80086ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80086be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f040 80a3 	bne.w	800880e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fc45 	bl	8006f5e <ld_clust>
 80086d4:	4602      	mov	r2, r0
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80086da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086dc:	331c      	adds	r3, #28
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fd fc1f 	bl	8005f22 <ld_dword>
 80086e4:	4602      	mov	r2, r0
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	88da      	ldrh	r2, [r3, #6]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	79fa      	ldrb	r2, [r7, #7]
 8008702:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3330      	adds	r3, #48	@ 0x30
 800871a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd fc89 	bl	8006038 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b00      	cmp	r3, #0
 800872e:	d06e      	beq.n	800880e <f_open+0x376>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d06a      	beq.n	800880e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	895b      	ldrh	r3, [r3, #10]
 8008744:	461a      	mov	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	899b      	ldrh	r3, [r3, #12]
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800875c:	e016      	b.n	800878c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008762:	4618      	mov	r0, r3
 8008764:	f7fd ff33 	bl	80065ce <get_fat>
 8008768:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800876a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800876c:	2b01      	cmp	r3, #1
 800876e:	d802      	bhi.n	8008776 <f_open+0x2de>
 8008770:	2302      	movs	r3, #2
 8008772:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877c:	d102      	bne.n	8008784 <f_open+0x2ec>
 800877e:	2301      	movs	r3, #1
 8008780:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008784:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800878c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <f_open+0x304>
 8008794:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008798:	429a      	cmp	r2, r3
 800879a:	d8e0      	bhi.n	800875e <f_open+0x2c6>
				}
				fp->clust = clst;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80087a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d131      	bne.n	800880e <f_open+0x376>
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	899b      	ldrh	r3, [r3, #12]
 80087ae:	461a      	mov	r2, r3
 80087b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80087b6:	fb01 f202 	mul.w	r2, r1, r2
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d026      	beq.n	800880e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fd fee3 	bl	8006590 <clust2sect>
 80087ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80087cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <f_open+0x342>
						res = FR_INT_ERR;
 80087d2:	2302      	movs	r3, #2
 80087d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80087d8:	e019      	b.n	800880e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	899b      	ldrh	r3, [r3, #12]
 80087de:	461a      	mov	r2, r3
 80087e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80087e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087e8:	441a      	add	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	7858      	ldrb	r0, [r3, #1]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a1a      	ldr	r2, [r3, #32]
 80087fc:	2301      	movs	r3, #1
 80087fe:	f7fd fb19 	bl	8005e34 <disk_read>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <f_open+0x376>
 8008808:	2301      	movs	r3, #1
 800880a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800880e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <f_open+0x384>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800881c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008820:	4618      	mov	r0, r3
 8008822:	3768      	adds	r7, #104	@ 0x68
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	@ 0x38
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f107 0214 	add.w	r2, r7, #20
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff fda9 	bl	80083a0 <validate>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008854:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008858:	2b00      	cmp	r3, #0
 800885a:	d107      	bne.n	800886c <f_read+0x44>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	7d5b      	ldrb	r3, [r3, #21]
 8008860:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <f_read+0x4a>
 800886c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008870:	e135      	b.n	8008ade <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	7d1b      	ldrb	r3, [r3, #20]
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <f_read+0x5a>
 800887e:	2307      	movs	r3, #7
 8008880:	e12d      	b.n	8008ade <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	429a      	cmp	r2, r3
 8008894:	f240 811e 	bls.w	8008ad4 <f_read+0x2ac>
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800889c:	e11a      	b.n	8008ad4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	8992      	ldrh	r2, [r2, #12]
 80088a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80088aa:	fb01 f202 	mul.w	r2, r1, r2
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f040 80d5 	bne.w	8008a60 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	8992      	ldrh	r2, [r2, #12]
 80088be:	fbb3 f3f2 	udiv	r3, r3, r2
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	8952      	ldrh	r2, [r2, #10]
 80088c6:	3a01      	subs	r2, #1
 80088c8:	4013      	ands	r3, r2
 80088ca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d12f      	bne.n	8008932 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	633b      	str	r3, [r7, #48]	@ 0x30
 80088e0:	e013      	b.n	800890a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d007      	beq.n	80088fa <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	4619      	mov	r1, r3
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7fe f956 	bl	8006ba2 <clmt_clust>
 80088f6:	6338      	str	r0, [r7, #48]	@ 0x30
 80088f8:	e007      	b.n	800890a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	4619      	mov	r1, r3
 8008902:	4610      	mov	r0, r2
 8008904:	f7fd fe63 	bl	80065ce <get_fat>
 8008908:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800890a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890c:	2b01      	cmp	r3, #1
 800890e:	d804      	bhi.n	800891a <f_read+0xf2>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2202      	movs	r2, #2
 8008914:	755a      	strb	r2, [r3, #21]
 8008916:	2302      	movs	r3, #2
 8008918:	e0e1      	b.n	8008ade <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d104      	bne.n	800892c <f_read+0x104>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	755a      	strb	r2, [r3, #21]
 8008928:	2301      	movs	r3, #1
 800892a:	e0d8      	b.n	8008ade <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008930:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	4619      	mov	r1, r3
 800893a:	4610      	mov	r0, r2
 800893c:	f7fd fe28 	bl	8006590 <clust2sect>
 8008940:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d104      	bne.n	8008952 <f_read+0x12a>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2202      	movs	r2, #2
 800894c:	755a      	strb	r2, [r3, #21]
 800894e:	2302      	movs	r3, #2
 8008950:	e0c5      	b.n	8008ade <f_read+0x2b6>
			sect += csect;
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	4413      	add	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	899b      	ldrh	r3, [r3, #12]
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	fbb3 f3f2 	udiv	r3, r3, r2
 8008966:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896a:	2b00      	cmp	r3, #0
 800896c:	d041      	beq.n	80089f2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008972:	4413      	add	r3, r2
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	8952      	ldrh	r2, [r2, #10]
 8008978:	4293      	cmp	r3, r2
 800897a:	d905      	bls.n	8008988 <f_read+0x160>
					cc = fs->csize - csect;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	895b      	ldrh	r3, [r3, #10]
 8008980:	461a      	mov	r2, r3
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	7858      	ldrb	r0, [r3, #1]
 800898c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008992:	f7fd fa4f 	bl	8005e34 <disk_read>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d004      	beq.n	80089a6 <f_read+0x17e>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	755a      	strb	r2, [r3, #21]
 80089a2:	2301      	movs	r3, #1
 80089a4:	e09b      	b.n	8008ade <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	7d1b      	ldrb	r3, [r3, #20]
 80089aa:	b25b      	sxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	da18      	bge.n	80089e2 <f_read+0x1ba>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a1a      	ldr	r2, [r3, #32]
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d911      	bls.n	80089e2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a1a      	ldr	r2, [r3, #32]
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	8992      	ldrh	r2, [r2, #12]
 80089ca:	fb02 f303 	mul.w	r3, r2, r3
 80089ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089d0:	18d0      	adds	r0, r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	899b      	ldrh	r3, [r3, #12]
 80089dc:	461a      	mov	r2, r3
 80089de:	f7fd fb0a 	bl	8005ff6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	899b      	ldrh	r3, [r3, #12]
 80089e6:	461a      	mov	r2, r3
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
 80089ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80089f0:	e05c      	b.n	8008aac <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d02e      	beq.n	8008a5a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	7d1b      	ldrb	r3, [r3, #20]
 8008a00:	b25b      	sxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	da18      	bge.n	8008a38 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	7858      	ldrb	r0, [r3, #1]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a1a      	ldr	r2, [r3, #32]
 8008a14:	2301      	movs	r3, #1
 8008a16:	f7fd fa2d 	bl	8005e74 <disk_write>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d004      	beq.n	8008a2a <f_read+0x202>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	755a      	strb	r2, [r3, #21]
 8008a26:	2301      	movs	r3, #1
 8008a28:	e059      	b.n	8008ade <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	7d1b      	ldrb	r3, [r3, #20]
 8008a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	7858      	ldrb	r0, [r3, #1]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a42:	2301      	movs	r3, #1
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	f7fd f9f5 	bl	8005e34 <disk_read>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d004      	beq.n	8008a5a <f_read+0x232>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	755a      	strb	r2, [r3, #21]
 8008a56:	2301      	movs	r3, #1
 8008a58:	e041      	b.n	8008ade <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	899b      	ldrh	r3, [r3, #12]
 8008a64:	4618      	mov	r0, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	8992      	ldrh	r2, [r2, #12]
 8008a6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a72:	fb01 f202 	mul.w	r2, r1, r2
 8008a76:	1a9b      	subs	r3, r3, r2
 8008a78:	1ac3      	subs	r3, r0, r3
 8008a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d901      	bls.n	8008a88 <f_read+0x260>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	8992      	ldrh	r2, [r2, #12]
 8008a96:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a9a:	fb00 f202 	mul.w	r2, r0, r2
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008aa8:	f7fd faa5 	bl	8005ff6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab0:	4413      	add	r3, r2
 8008ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	699a      	ldr	r2, [r3, #24]
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aba:	441a      	add	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	619a      	str	r2, [r3, #24]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac6:	441a      	add	r2, r3
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f47f aee1 	bne.w	800889e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3738      	adds	r7, #56	@ 0x38
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b08c      	sub	sp, #48	@ 0x30
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
 8008af2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f107 0210 	add.w	r2, r7, #16
 8008b04:	4611      	mov	r1, r2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff fc4a 	bl	80083a0 <validate>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d107      	bne.n	8008b2a <f_write+0x44>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	7d5b      	ldrb	r3, [r3, #21]
 8008b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <f_write+0x4a>
 8008b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b2e:	e16a      	b.n	8008e06 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	7d1b      	ldrb	r3, [r3, #20]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <f_write+0x5a>
 8008b3c:	2307      	movs	r3, #7
 8008b3e:	e162      	b.n	8008e06 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	699a      	ldr	r2, [r3, #24]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	441a      	add	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	f080 814c 	bcs.w	8008dea <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	43db      	mvns	r3, r3
 8008b58:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b5a:	e146      	b.n	8008dea <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	8992      	ldrh	r2, [r2, #12]
 8008b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b68:	fb01 f202 	mul.w	r2, r1, r2
 8008b6c:	1a9b      	subs	r3, r3, r2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f040 80f1 	bne.w	8008d56 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	8992      	ldrh	r2, [r2, #12]
 8008b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	8952      	ldrh	r2, [r2, #10]
 8008b84:	3a01      	subs	r2, #1
 8008b86:	4013      	ands	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d143      	bne.n	8008c18 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10c      	bne.n	8008bb2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d11a      	bne.n	8008bda <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fd ff62 	bl	8006a72 <create_chain>
 8008bae:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008bb0:	e013      	b.n	8008bda <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7fd ffee 	bl	8006ba2 <clmt_clust>
 8008bc6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008bc8:	e007      	b.n	8008bda <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f7fd ff4d 	bl	8006a72 <create_chain>
 8008bd8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 8109 	beq.w	8008df4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d104      	bne.n	8008bf2 <f_write+0x10c>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2202      	movs	r2, #2
 8008bec:	755a      	strb	r2, [r3, #21]
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e109      	b.n	8008e06 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf8:	d104      	bne.n	8008c04 <f_write+0x11e>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	755a      	strb	r2, [r3, #21]
 8008c00:	2301      	movs	r3, #1
 8008c02:	e100      	b.n	8008e06 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c08:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d102      	bne.n	8008c18 <f_write+0x132>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c16:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	7d1b      	ldrb	r3, [r3, #20]
 8008c1c:	b25b      	sxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	da18      	bge.n	8008c54 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	7858      	ldrb	r0, [r3, #1]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a1a      	ldr	r2, [r3, #32]
 8008c30:	2301      	movs	r3, #1
 8008c32:	f7fd f91f 	bl	8005e74 <disk_write>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d004      	beq.n	8008c46 <f_write+0x160>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	755a      	strb	r2, [r3, #21]
 8008c42:	2301      	movs	r3, #1
 8008c44:	e0df      	b.n	8008e06 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	7d1b      	ldrb	r3, [r3, #20]
 8008c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	f7fd fc97 	bl	8006590 <clust2sect>
 8008c62:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <f_write+0x18e>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	755a      	strb	r2, [r3, #21]
 8008c70:	2302      	movs	r3, #2
 8008c72:	e0c8      	b.n	8008e06 <f_write+0x320>
			sect += csect;
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	4413      	add	r3, r2
 8008c7a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	899b      	ldrh	r3, [r3, #12]
 8008c80:	461a      	mov	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c88:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d043      	beq.n	8008d18 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	4413      	add	r3, r2
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	8952      	ldrh	r2, [r2, #10]
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d905      	bls.n	8008caa <f_write+0x1c4>
					cc = fs->csize - csect;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	895b      	ldrh	r3, [r3, #10]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	7858      	ldrb	r0, [r3, #1]
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	69f9      	ldr	r1, [r7, #28]
 8008cb4:	f7fd f8de 	bl	8005e74 <disk_write>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <f_write+0x1e2>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	755a      	strb	r2, [r3, #21]
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e09e      	b.n	8008e06 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a1a      	ldr	r2, [r3, #32]
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	6a3a      	ldr	r2, [r7, #32]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d918      	bls.n	8008d08 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a1a      	ldr	r2, [r3, #32]
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	8992      	ldrh	r2, [r2, #12]
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
 8008cec:	69fa      	ldr	r2, [r7, #28]
 8008cee:	18d1      	adds	r1, r2, r3
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	899b      	ldrh	r3, [r3, #12]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f7fd f97e 	bl	8005ff6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	7d1b      	ldrb	r3, [r3, #20]
 8008cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	899b      	ldrh	r3, [r3, #12]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	fb02 f303 	mul.w	r3, r2, r3
 8008d14:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008d16:	e04b      	b.n	8008db0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d016      	beq.n	8008d50 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	699a      	ldr	r2, [r3, #24]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d210      	bcs.n	8008d50 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	7858      	ldrb	r0, [r3, #1]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d38:	2301      	movs	r3, #1
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	f7fd f87a 	bl	8005e34 <disk_read>
 8008d40:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d004      	beq.n	8008d50 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	755a      	strb	r2, [r3, #21]
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e05a      	b.n	8008e06 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	899b      	ldrh	r3, [r3, #12]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	8992      	ldrh	r2, [r2, #12]
 8008d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d68:	fb01 f202 	mul.w	r2, r1, r2
 8008d6c:	1a9b      	subs	r3, r3, r2
 8008d6e:	1ac3      	subs	r3, r0, r3
 8008d70:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d901      	bls.n	8008d7e <f_write+0x298>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	8992      	ldrh	r2, [r2, #12]
 8008d8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d90:	fb00 f202 	mul.w	r2, r0, r2
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	440b      	add	r3, r1
 8008d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d9a:	69f9      	ldr	r1, [r7, #28]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fd f92a 	bl	8005ff6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	7d1b      	ldrb	r3, [r3, #20]
 8008da6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	4413      	add	r3, r2
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbe:	441a      	add	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	619a      	str	r2, [r3, #24]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	bf38      	it	cc
 8008dd0:	461a      	movcc	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	60da      	str	r2, [r3, #12]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ddc:	441a      	add	r2, r3
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f47f aeb5 	bne.w	8008b5c <f_write+0x76>
 8008df2:	e000      	b.n	8008df6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008df4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	7d1b      	ldrb	r3, [r3, #20]
 8008dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3730      	adds	r7, #48	@ 0x30
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b086      	sub	sp, #24
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f107 0208 	add.w	r2, r7, #8
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff fabe 	bl	80083a0 <validate>
 8008e24:	4603      	mov	r3, r0
 8008e26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d168      	bne.n	8008f00 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	7d1b      	ldrb	r3, [r3, #20]
 8008e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d062      	beq.n	8008f00 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	7d1b      	ldrb	r3, [r3, #20]
 8008e3e:	b25b      	sxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da15      	bge.n	8008e70 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	7858      	ldrb	r0, [r3, #1]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1a      	ldr	r2, [r3, #32]
 8008e52:	2301      	movs	r3, #1
 8008e54:	f7fd f80e 	bl	8005e74 <disk_write>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <f_sync+0x54>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e04f      	b.n	8008f02 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7d1b      	ldrb	r3, [r3, #20]
 8008e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e70:	f7fc fe00 	bl	8005a74 <get_fattime>
 8008e74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	f7fd fae8 	bl	8006454 <move_window>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d138      	bne.n	8008f00 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	330b      	adds	r3, #11
 8008e98:	781a      	ldrb	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	330b      	adds	r3, #11
 8008e9e:	f042 0220 	orr.w	r2, r2, #32
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68f9      	ldr	r1, [r7, #12]
 8008eb2:	f7fe f873 	bl	8006f9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f103 021c 	add.w	r2, r3, #28
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7fd f86b 	bl	8005f9e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3316      	adds	r3, #22
 8008ecc:	6939      	ldr	r1, [r7, #16]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd f865 	bl	8005f9e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3312      	adds	r3, #18
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fd f844 	bl	8005f68 <st_word>
					fs->wflag = 1;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fd fae1 	bl	80064b0 <sync_fs>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7d1b      	ldrb	r3, [r3, #20]
 8008ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff ff7b 	bl	8008e0e <f_sync>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d118      	bne.n	8008f54 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f107 0208 	add.w	r2, r7, #8
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff fa38 	bl	80083a0 <validate>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10c      	bne.n	8008f54 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fd f9e4 	bl	800630c <dec_lock>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b092      	sub	sp, #72	@ 0x48
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008f6a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008f6e:	f107 030c 	add.w	r3, r7, #12
 8008f72:	2200      	movs	r2, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe ff8d 	bl	8007e94 <find_volume>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008f80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f040 8099 	bne.w	80090bc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	3b02      	subs	r3, #2
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d804      	bhi.n	8008fa8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa0:	699a      	ldr	r2, [r3, #24]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	e089      	b.n	80090bc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d128      	bne.n	8009006 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008fbc:	f107 0314 	add.w	r3, r7, #20
 8008fc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fd fb03 	bl	80065ce <get_fat>
 8008fc8:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd0:	d103      	bne.n	8008fda <f_getfree+0x7c>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008fd8:	e063      	b.n	80090a2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d103      	bne.n	8008fe8 <f_getfree+0x8a>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008fe6:	e05c      	b.n	80090a2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <f_getfree+0x96>
 8008fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009000:	429a      	cmp	r2, r3
 8009002:	d3db      	bcc.n	8008fbc <f_getfree+0x5e>
 8009004:	e04d      	b.n	80090a2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800900c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009010:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	637b      	str	r3, [r7, #52]	@ 0x34
 8009016:	2300      	movs	r3, #0
 8009018:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800901a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800901c:	2b00      	cmp	r3, #0
 800901e:	d113      	bne.n	8009048 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009028:	4619      	mov	r1, r3
 800902a:	f7fd fa13 	bl	8006454 <move_window>
 800902e:	4603      	mov	r3, r0
 8009030:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009034:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009038:	2b00      	cmp	r3, #0
 800903a:	d131      	bne.n	80090a0 <f_getfree+0x142>
							p = fs->win;
 800903c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903e:	3338      	adds	r3, #56	@ 0x38
 8009040:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	899b      	ldrh	r3, [r3, #12]
 8009046:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d10f      	bne.n	8009070 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009052:	f7fc ff4d 	bl	8005ef0 <ld_word>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <f_getfree+0x104>
 800905c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800905e:	3301      	adds	r3, #1
 8009060:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	3302      	adds	r3, #2
 8009066:	633b      	str	r3, [r7, #48]	@ 0x30
 8009068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906a:	3b02      	subs	r3, #2
 800906c:	637b      	str	r3, [r7, #52]	@ 0x34
 800906e:	e010      	b.n	8009092 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009072:	f7fc ff56 	bl	8005f22 <ld_dword>
 8009076:	4603      	mov	r3, r0
 8009078:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <f_getfree+0x128>
 8009080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009082:	3301      	adds	r3, #1
 8009084:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009088:	3304      	adds	r3, #4
 800908a:	633b      	str	r3, [r7, #48]	@ 0x30
 800908c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908e:	3b04      	subs	r3, #4
 8009090:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	3b01      	subs	r3, #1
 8009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1bd      	bne.n	800901a <f_getfree+0xbc>
 800909e:	e000      	b.n	80090a2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80090a0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090a6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80090a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090ac:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80090ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b0:	791a      	ldrb	r2, [r3, #4]
 80090b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b4:	f042 0201 	orr.w	r2, r2, #1
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80090bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3748      	adds	r7, #72	@ 0x48
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b0a0      	sub	sp, #128	@ 0x80
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80090d4:	f107 010c 	add.w	r1, r7, #12
 80090d8:	1d3b      	adds	r3, r7, #4
 80090da:	2202      	movs	r2, #2
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe fed9 	bl	8007e94 <find_volume>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 80090ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f040 808e 	bne.w	8009212 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fdb8 	bl	8007c74 <follow_path>
 8009104:	4603      	mov	r3, r0
 8009106:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800910a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800910e:	2b00      	cmp	r3, #0
 8009110:	d108      	bne.n	8009124 <f_unlink+0x5c>
 8009112:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009116:	2102      	movs	r1, #2
 8009118:	4618      	mov	r0, r3
 800911a:	f7fc ffeb 	bl	80060f4 <chk_lock>
 800911e:	4603      	mov	r3, r0
 8009120:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009124:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009128:	2b00      	cmp	r3, #0
 800912a:	d172      	bne.n	8009212 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800912c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009130:	b25b      	sxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	da03      	bge.n	800913e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009136:	2306      	movs	r3, #6
 8009138:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800913c:	e008      	b.n	8009150 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800913e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800914a:	2307      	movs	r3, #7
 800914c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8009150:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009154:	2b00      	cmp	r3, #0
 8009156:	d134      	bne.n	80091c2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd fefd 	bl	8006f5e <ld_clust>
 8009164:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009166:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800916a:	f003 0310 	and.w	r3, r3, #16
 800916e:	2b00      	cmp	r3, #0
 8009170:	d027      	beq.n	80091c2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009176:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009178:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800917a:	f107 0310 	add.w	r3, r7, #16
 800917e:	2100      	movs	r1, #0
 8009180:	4618      	mov	r0, r3
 8009182:	f7fd fd46 	bl	8006c12 <dir_sdi>
 8009186:	4603      	mov	r3, r0
 8009188:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 800918c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009190:	2b00      	cmp	r3, #0
 8009192:	d116      	bne.n	80091c2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009194:	f107 0310 	add.w	r3, r7, #16
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe f909 	bl	80073b2 <dir_read>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80091a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d102      	bne.n	80091b4 <f_unlink+0xec>
 80091ae:	2307      	movs	r3, #7
 80091b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80091b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d102      	bne.n	80091c2 <f_unlink+0xfa>
 80091bc:	2300      	movs	r3, #0
 80091be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 80091c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d123      	bne.n	8009212 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80091ca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fb4e 	bl	8007870 <dir_remove>
 80091d4:	4603      	mov	r3, r0
 80091d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80091da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10c      	bne.n	80091fc <f_unlink+0x134>
 80091e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d009      	beq.n	80091fc <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80091e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80091ec:	2200      	movs	r2, #0
 80091ee:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fd fbd9 	bl	80069a8 <remove_chain>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80091fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <f_unlink+0x14a>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4618      	mov	r0, r3
 8009208:	f7fd f952 	bl	80064b0 <sync_fs>
 800920c:	4603      	mov	r3, r0
 800920e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009212:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8009216:	4618      	mov	r0, r3
 8009218:	3780      	adds	r7, #128	@ 0x80
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	460b      	mov	r3, r1
 8009228:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	2b0a      	cmp	r3, #10
 800922e:	d103      	bne.n	8009238 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009230:	210d      	movs	r1, #13
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fff3 	bl	800921e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	db25      	blt.n	8009290 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	60fa      	str	r2, [r7, #12]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	78fa      	ldrb	r2, [r7, #3]
 8009250:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b3c      	cmp	r3, #60	@ 0x3c
 8009256:	dd12      	ble.n	800927e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f103 010c 	add.w	r1, r3, #12
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	f107 0308 	add.w	r3, r7, #8
 8009268:	f7ff fc3d 	bl	8008ae6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	429a      	cmp	r2, r3
 8009272:	d101      	bne.n	8009278 <putc_bfd+0x5a>
 8009274:	2300      	movs	r3, #0
 8009276:	e001      	b.n	800927c <putc_bfd+0x5e>
 8009278:	f04f 33ff 	mov.w	r3, #4294967295
 800927c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	609a      	str	r2, [r3, #8]
 800928e:	e000      	b.n	8009292 <putc_bfd+0x74>
	if (i < 0) return;
 8009290:	bf00      	nop
}
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	db16      	blt.n	80092d6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f103 010c 	add.w	r1, r3, #12
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	461a      	mov	r2, r3
 80092b8:	f107 030c 	add.w	r3, r7, #12
 80092bc:	f7ff fc13 	bl	8008ae6 <f_write>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d107      	bne.n	80092d6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d102      	bne.n	80092d6 <putc_flush+0x3e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	e001      	b.n	80092da <putc_flush+0x42>
	return EOF;
 80092d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	605a      	str	r2, [r3, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	609a      	str	r2, [r3, #8]
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b096      	sub	sp, #88	@ 0x58
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009316:	f107 030c 	add.w	r3, r7, #12
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff ffe0 	bl	80092e2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009322:	e009      	b.n	8009338 <f_puts+0x2c>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	781a      	ldrb	r2, [r3, #0]
 800932c:	f107 030c 	add.w	r3, r7, #12
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7ff ff73 	bl	800921e <putc_bfd>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1f1      	bne.n	8009324 <f_puts+0x18>
	return putc_flush(&pb);
 8009340:	f107 030c 	add.w	r3, r7, #12
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff ffa7 	bl	8009298 <putc_flush>
 800934a:	4603      	mov	r3, r0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3758      	adds	r7, #88	@ 0x58
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009362:	2301      	movs	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800936a:	4b1f      	ldr	r3, [pc, #124]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 800936c:	7a5b      	ldrb	r3, [r3, #9]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d131      	bne.n	80093d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009374:	4b1c      	ldr	r3, [pc, #112]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 8009376:	7a5b      	ldrb	r3, [r3, #9]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	461a      	mov	r2, r3
 800937c:	4b1a      	ldr	r3, [pc, #104]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 800937e:	2100      	movs	r1, #0
 8009380:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009382:	4b19      	ldr	r3, [pc, #100]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 8009384:	7a5b      	ldrb	r3, [r3, #9]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	4a17      	ldr	r2, [pc, #92]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009392:	4b15      	ldr	r3, [pc, #84]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 8009394:	7a5b      	ldrb	r3, [r3, #9]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	461a      	mov	r2, r3
 800939a:	4b13      	ldr	r3, [pc, #76]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 800939c:	4413      	add	r3, r2
 800939e:	79fa      	ldrb	r2, [r7, #7]
 80093a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80093a2:	4b11      	ldr	r3, [pc, #68]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 80093a4:	7a5b      	ldrb	r3, [r3, #9]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	b2d1      	uxtb	r1, r2
 80093ac:	4a0e      	ldr	r2, [pc, #56]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 80093ae:	7251      	strb	r1, [r2, #9]
 80093b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80093b2:	7dbb      	ldrb	r3, [r7, #22]
 80093b4:	3330      	adds	r3, #48	@ 0x30
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	3301      	adds	r3, #1
 80093c0:	223a      	movs	r2, #58	@ 0x3a
 80093c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	3302      	adds	r3, #2
 80093c8:	222f      	movs	r2, #47	@ 0x2f
 80093ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	3303      	adds	r3, #3
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	371c      	adds	r7, #28
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	2000053c 	.word	0x2000053c

080093ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80093f6:	2200      	movs	r2, #0
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff ffaa 	bl	8009354 <FATFS_LinkDriverEx>
 8009400:	4603      	mov	r3, r0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	6039      	str	r1, [r7, #0]
 8009416:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009418:	88fb      	ldrh	r3, [r7, #6]
 800941a:	2b7f      	cmp	r3, #127	@ 0x7f
 800941c:	d802      	bhi.n	8009424 <ff_convert+0x18>
		c = chr;
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	81fb      	strh	r3, [r7, #14]
 8009422:	e025      	b.n	8009470 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800942a:	88fb      	ldrh	r3, [r7, #6]
 800942c:	2bff      	cmp	r3, #255	@ 0xff
 800942e:	d805      	bhi.n	800943c <ff_convert+0x30>
 8009430:	88fb      	ldrh	r3, [r7, #6]
 8009432:	3b80      	subs	r3, #128	@ 0x80
 8009434:	4a12      	ldr	r2, [pc, #72]	@ (8009480 <ff_convert+0x74>)
 8009436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800943a:	e000      	b.n	800943e <ff_convert+0x32>
 800943c:	2300      	movs	r3, #0
 800943e:	81fb      	strh	r3, [r7, #14]
 8009440:	e016      	b.n	8009470 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009442:	2300      	movs	r3, #0
 8009444:	81fb      	strh	r3, [r7, #14]
 8009446:	e009      	b.n	800945c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009448:	89fb      	ldrh	r3, [r7, #14]
 800944a:	4a0d      	ldr	r2, [pc, #52]	@ (8009480 <ff_convert+0x74>)
 800944c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009450:	88fa      	ldrh	r2, [r7, #6]
 8009452:	429a      	cmp	r2, r3
 8009454:	d006      	beq.n	8009464 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009456:	89fb      	ldrh	r3, [r7, #14]
 8009458:	3301      	adds	r3, #1
 800945a:	81fb      	strh	r3, [r7, #14]
 800945c:	89fb      	ldrh	r3, [r7, #14]
 800945e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009460:	d9f2      	bls.n	8009448 <ff_convert+0x3c>
 8009462:	e000      	b.n	8009466 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009464:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009466:	89fb      	ldrh	r3, [r7, #14]
 8009468:	3380      	adds	r3, #128	@ 0x80
 800946a:	b29b      	uxth	r3, r3
 800946c:	b2db      	uxtb	r3, r3
 800946e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009470:	89fb      	ldrh	r3, [r7, #14]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	0800e6f8 	.word	0x0800e6f8

08009484 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009494:	d201      	bcs.n	800949a <ff_wtoupper+0x16>
 8009496:	4b3e      	ldr	r3, [pc, #248]	@ (8009590 <ff_wtoupper+0x10c>)
 8009498:	e000      	b.n	800949c <ff_wtoupper+0x18>
 800949a:	4b3e      	ldr	r3, [pc, #248]	@ (8009594 <ff_wtoupper+0x110>)
 800949c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	1c9a      	adds	r2, r3, #2
 80094a2:	617a      	str	r2, [r7, #20]
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80094a8:	8a7b      	ldrh	r3, [r7, #18]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d068      	beq.n	8009580 <ff_wtoupper+0xfc>
 80094ae:	88fa      	ldrh	r2, [r7, #6]
 80094b0:	8a7b      	ldrh	r3, [r7, #18]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d364      	bcc.n	8009580 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	1c9a      	adds	r2, r3, #2
 80094ba:	617a      	str	r2, [r7, #20]
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	823b      	strh	r3, [r7, #16]
 80094c0:	8a3b      	ldrh	r3, [r7, #16]
 80094c2:	0a1b      	lsrs	r3, r3, #8
 80094c4:	81fb      	strh	r3, [r7, #14]
 80094c6:	8a3b      	ldrh	r3, [r7, #16]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80094cc:	88fa      	ldrh	r2, [r7, #6]
 80094ce:	8a79      	ldrh	r1, [r7, #18]
 80094d0:	8a3b      	ldrh	r3, [r7, #16]
 80094d2:	440b      	add	r3, r1
 80094d4:	429a      	cmp	r2, r3
 80094d6:	da49      	bge.n	800956c <ff_wtoupper+0xe8>
			switch (cmd) {
 80094d8:	89fb      	ldrh	r3, [r7, #14]
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d84f      	bhi.n	800957e <ff_wtoupper+0xfa>
 80094de:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <ff_wtoupper+0x60>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	08009509 	.word	0x08009509
 80094e8:	0800951b 	.word	0x0800951b
 80094ec:	08009531 	.word	0x08009531
 80094f0:	08009539 	.word	0x08009539
 80094f4:	08009541 	.word	0x08009541
 80094f8:	08009549 	.word	0x08009549
 80094fc:	08009551 	.word	0x08009551
 8009500:	08009559 	.word	0x08009559
 8009504:	08009561 	.word	0x08009561
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009508:	88fa      	ldrh	r2, [r7, #6]
 800950a:	8a7b      	ldrh	r3, [r7, #18]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	4413      	add	r3, r2
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	80fb      	strh	r3, [r7, #6]
 8009518:	e027      	b.n	800956a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800951a:	88fa      	ldrh	r2, [r7, #6]
 800951c:	8a7b      	ldrh	r3, [r7, #18]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	b29b      	uxth	r3, r3
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	b29b      	uxth	r3, r3
 8009528:	88fa      	ldrh	r2, [r7, #6]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	80fb      	strh	r3, [r7, #6]
 800952e:	e01c      	b.n	800956a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009530:	88fb      	ldrh	r3, [r7, #6]
 8009532:	3b10      	subs	r3, #16
 8009534:	80fb      	strh	r3, [r7, #6]
 8009536:	e018      	b.n	800956a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009538:	88fb      	ldrh	r3, [r7, #6]
 800953a:	3b20      	subs	r3, #32
 800953c:	80fb      	strh	r3, [r7, #6]
 800953e:	e014      	b.n	800956a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009540:	88fb      	ldrh	r3, [r7, #6]
 8009542:	3b30      	subs	r3, #48	@ 0x30
 8009544:	80fb      	strh	r3, [r7, #6]
 8009546:	e010      	b.n	800956a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009548:	88fb      	ldrh	r3, [r7, #6]
 800954a:	3b1a      	subs	r3, #26
 800954c:	80fb      	strh	r3, [r7, #6]
 800954e:	e00c      	b.n	800956a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009550:	88fb      	ldrh	r3, [r7, #6]
 8009552:	3308      	adds	r3, #8
 8009554:	80fb      	strh	r3, [r7, #6]
 8009556:	e008      	b.n	800956a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009558:	88fb      	ldrh	r3, [r7, #6]
 800955a:	3b50      	subs	r3, #80	@ 0x50
 800955c:	80fb      	strh	r3, [r7, #6]
 800955e:	e004      	b.n	800956a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009566:	80fb      	strh	r3, [r7, #6]
 8009568:	bf00      	nop
			}
			break;
 800956a:	e008      	b.n	800957e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800956c:	89fb      	ldrh	r3, [r7, #14]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d195      	bne.n	800949e <ff_wtoupper+0x1a>
 8009572:	8a3b      	ldrh	r3, [r7, #16]
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4413      	add	r3, r2
 800957a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800957c:	e78f      	b.n	800949e <ff_wtoupper+0x1a>
			break;
 800957e:	bf00      	nop
	}

	return chr;
 8009580:	88fb      	ldrh	r3, [r7, #6]
}
 8009582:	4618      	mov	r0, r3
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	0800e7f8 	.word	0x0800e7f8
 8009594:	0800e9ec 	.word	0x0800e9ec

08009598 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800959e:	4b26      	ldr	r3, [pc, #152]	@ (8009638 <_DoInit+0xa0>)
 80095a0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80095a2:	22a8      	movs	r2, #168	@ 0xa8
 80095a4:	2100      	movs	r1, #0
 80095a6:	6838      	ldr	r0, [r7, #0]
 80095a8:	f001 fa78 	bl	800aa9c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2203      	movs	r2, #3
 80095b0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2203      	movs	r2, #3
 80095b6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	4a20      	ldr	r2, [pc, #128]	@ (800963c <_DoInit+0xa4>)
 80095bc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009640 <_DoInit+0xa8>)
 80095c2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80095ca:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2200      	movs	r2, #0
 80095d0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2200      	movs	r2, #0
 80095d6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2200      	movs	r2, #0
 80095dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	4a16      	ldr	r2, [pc, #88]	@ (800963c <_DoInit+0xa4>)
 80095e2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	4a17      	ldr	r2, [pc, #92]	@ (8009644 <_DoInit+0xac>)
 80095e8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2210      	movs	r2, #16
 80095ee:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2200      	movs	r2, #0
 80095fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2200      	movs	r2, #0
 8009600:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8009602:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8009606:	2300      	movs	r3, #0
 8009608:	607b      	str	r3, [r7, #4]
 800960a:	e00c      	b.n	8009626 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f1c3 030f 	rsb	r3, r3, #15
 8009612:	4a0d      	ldr	r2, [pc, #52]	@ (8009648 <_DoInit+0xb0>)
 8009614:	5cd1      	ldrb	r1, [r2, r3]
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4413      	add	r3, r2
 800961c:	460a      	mov	r2, r1
 800961e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3301      	adds	r3, #1
 8009624:	607b      	str	r3, [r7, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b0f      	cmp	r3, #15
 800962a:	d9ef      	bls.n	800960c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800962c:	f3bf 8f5f 	dmb	sy
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20000548 	.word	0x20000548
 800963c:	0800e630 	.word	0x0800e630
 8009640:	200005f0 	.word	0x200005f0
 8009644:	200009f0 	.word	0x200009f0
 8009648:	0800eaa8 	.word	0x0800eaa8

0800964c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800964c:	b580      	push	{r7, lr}
 800964e:	b08a      	sub	sp, #40	@ 0x28
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8009658:	2300      	movs	r3, #0
 800965a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	429a      	cmp	r2, r3
 800966e:	d905      	bls.n	800967c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8009670:	69ba      	ldr	r2, [r7, #24]
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	3b01      	subs	r3, #1
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
 800967a:	e007      	b.n	800968c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	69b9      	ldr	r1, [r7, #24]
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	1acb      	subs	r3, r1, r3
 8009686:	4413      	add	r3, r2
 8009688:	3b01      	subs	r3, #1
 800968a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009696:	4293      	cmp	r3, r2
 8009698:	bf28      	it	cs
 800969a:	4613      	movcs	r3, r2
 800969c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800969e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4293      	cmp	r3, r2
 80096a4:	bf28      	it	cs
 80096a6:	4613      	movcs	r3, r2
 80096a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	4413      	add	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80096b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b6:	68b9      	ldr	r1, [r7, #8]
 80096b8:	6978      	ldr	r0, [r7, #20]
 80096ba:	f001 fa6e 	bl	800ab9a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80096be:	6a3a      	ldr	r2, [r7, #32]
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c2:	4413      	add	r3, r2
 80096c4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ca:	4413      	add	r3, r2
 80096cc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80096d6:	69fa      	ldr	r2, [r7, #28]
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	4413      	add	r3, r2
 80096dc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	69fa      	ldr	r2, [r7, #28]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d101      	bne.n	80096ec <_WriteBlocking+0xa0>
      WrOff = 0u;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80096ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1b2      	bne.n	8009662 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80096fc:	6a3b      	ldr	r3, [r7, #32]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3728      	adds	r7, #40	@ 0x28
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8009706:	b580      	push	{r7, lr}
 8009708:	b088      	sub	sp, #32
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	429a      	cmp	r2, r3
 8009728:	d911      	bls.n	800974e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	4413      	add	r3, r2
 8009732:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	6938      	ldr	r0, [r7, #16]
 800973a:	f001 fa2e 	bl	800ab9a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800973e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	441a      	add	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800974c:	e01f      	b.n	800978e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	6938      	ldr	r0, [r7, #16]
 8009762:	f001 fa1a 	bl	800ab9a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	4413      	add	r3, r2
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	4619      	mov	r1, r3
 800977e:	6938      	ldr	r0, [r7, #16]
 8009780:	f001 fa0b 	bl	800ab9a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009784:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	60da      	str	r2, [r3, #12]
}
 800978e:	bf00      	nop
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8009796:	b480      	push	{r7}
 8009798:	b087      	sub	sp, #28
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d808      	bhi.n	80097c4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689a      	ldr	r2, [r3, #8]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	1ad2      	subs	r2, r2, r3
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	4413      	add	r3, r2
 80097be:	3b01      	subs	r3, #1
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	e004      	b.n	80097ce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80097ce:	697b      	ldr	r3, [r7, #20]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	4613      	mov	r3, r2
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	4413      	add	r3, r2
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009878 <SEGGER_RTT_WriteNoLock+0x9c>)
 80097fa:	4413      	add	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d029      	beq.n	800985a <SEGGER_RTT_WriteNoLock+0x7e>
 8009806:	2b02      	cmp	r3, #2
 8009808:	d82e      	bhi.n	8009868 <SEGGER_RTT_WriteNoLock+0x8c>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <SEGGER_RTT_WriteNoLock+0x38>
 800980e:	2b01      	cmp	r3, #1
 8009810:	d013      	beq.n	800983a <SEGGER_RTT_WriteNoLock+0x5e>
 8009812:	e029      	b.n	8009868 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009814:	6978      	ldr	r0, [r7, #20]
 8009816:	f7ff ffbe 	bl	8009796 <_GetAvailWriteSpace>
 800981a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d202      	bcs.n	800982a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8009824:	2300      	movs	r3, #0
 8009826:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8009828:	e021      	b.n	800986e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	69b9      	ldr	r1, [r7, #24]
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	f7ff ff67 	bl	8009706 <_WriteNoCheck>
    break;
 8009838:	e019      	b.n	800986e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800983a:	6978      	ldr	r0, [r7, #20]
 800983c:	f7ff ffab 	bl	8009796 <_GetAvailWriteSpace>
 8009840:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	4293      	cmp	r3, r2
 8009848:	bf28      	it	cs
 800984a:	4613      	movcs	r3, r2
 800984c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	69b9      	ldr	r1, [r7, #24]
 8009852:	6978      	ldr	r0, [r7, #20]
 8009854:	f7ff ff57 	bl	8009706 <_WriteNoCheck>
    break;
 8009858:	e009      	b.n	800986e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	69b9      	ldr	r1, [r7, #24]
 800985e:	6978      	ldr	r0, [r7, #20]
 8009860:	f7ff fef4 	bl	800964c <_WriteBlocking>
 8009864:	61f8      	str	r0, [r7, #28]
    break;
 8009866:	e002      	b.n	800986e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009868:	2300      	movs	r3, #0
 800986a:	61fb      	str	r3, [r7, #28]
    break;
 800986c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800986e:	69fb      	ldr	r3, [r7, #28]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3720      	adds	r7, #32
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000548 	.word	0x20000548

0800987c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009888:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <SEGGER_RTT_Write+0x48>)
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b53      	cmp	r3, #83	@ 0x53
 8009894:	d001      	beq.n	800989a <SEGGER_RTT_Write+0x1e>
 8009896:	f7ff fe7f 	bl	8009598 <_DoInit>
  SEGGER_RTT_LOCK();
 800989a:	f3ef 8311 	mrs	r3, BASEPRI
 800989e:	f04f 0120 	mov.w	r1, #32
 80098a2:	f381 8811 	msr	BASEPRI, r1
 80098a6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f7ff ff95 	bl	80097dc <SEGGER_RTT_WriteNoLock>
 80098b2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80098ba:	697b      	ldr	r3, [r7, #20]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3720      	adds	r7, #32
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000548 	.word	0x20000548

080098c8 <ha_hal_hardware_delay>:
#include "ha_hal_delay.h"

void ha_hal_hardware_delay(uint8_t _ms)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	71fb      	strb	r3, [r7, #7]
	DELAY_MS(_ms);
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e01f      	b.n	8009918 <ha_hal_hardware_delay+0x50>
 80098d8:	4b15      	ldr	r3, [pc, #84]	@ (8009930 <ha_hal_hardware_delay+0x68>)
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	4b15      	ldr	r3, [pc, #84]	@ (8009934 <ha_hal_hardware_delay+0x6c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a15      	ldr	r2, [pc, #84]	@ (8009938 <ha_hal_hardware_delay+0x70>)
 80098e4:	fba2 2303 	umull	r2, r3, r2, r3
 80098e8:	0c9b      	lsrs	r3, r3, #18
 80098ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80098ee:	fb03 f202 	mul.w	r2, r3, r2
 80098f2:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <ha_hal_hardware_delay+0x6c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4910      	ldr	r1, [pc, #64]	@ (8009938 <ha_hal_hardware_delay+0x70>)
 80098f8:	fba1 1303 	umull	r1, r3, r1, r3
 80098fc:	0c9b      	lsrs	r3, r3, #18
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	4b0a      	ldr	r3, [pc, #40]	@ (8009930 <ha_hal_hardware_delay+0x68>)
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	429a      	cmp	r2, r3
 8009910:	d8f8      	bhi.n	8009904 <ha_hal_hardware_delay+0x3c>
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	3301      	adds	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	429a      	cmp	r2, r3
 800991e:	d3db      	bcc.n	80098d8 <ha_hal_hardware_delay+0x10>
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	e000e010 	.word	0xe000e010
 8009934:	20000000 	.word	0x20000000
 8009938:	431bde83 	.word	0x431bde83

0800993c <ha_hal_gpio_set_level>:
#include "ha_hal_gpio.h"

uint8_t ha_hal_gpio_set_level(GPIO_TypeDef *_gpio_type, uint16_t _gpio_number, GPIO_PinState _gpio_level)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	807b      	strh	r3, [r7, #2]
 8009948:	4613      	mov	r3, r2
 800994a:	707b      	strb	r3, [r7, #1]
    if (_gpio_type == NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <ha_hal_gpio_set_level+0x1a>
    {
        return 0; // Error: GPIO type is NULL
 8009952:	2300      	movs	r3, #0
 8009954:	e00e      	b.n	8009974 <ha_hal_gpio_set_level+0x38>
    }
    if (_gpio_level != GPIO_PIN_SET && _gpio_level != GPIO_PIN_RESET)
 8009956:	787b      	ldrb	r3, [r7, #1]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d004      	beq.n	8009966 <ha_hal_gpio_set_level+0x2a>
 800995c:	787b      	ldrb	r3, [r7, #1]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <ha_hal_gpio_set_level+0x2a>
    {
        return 0; // Error: Invalid GPIO level
 8009962:	2300      	movs	r3, #0
 8009964:	e006      	b.n	8009974 <ha_hal_gpio_set_level+0x38>
    }
    HAL_GPIO_WritePin(_gpio_type, _gpio_number, _gpio_level);
 8009966:	787a      	ldrb	r2, [r7, #1]
 8009968:	887b      	ldrh	r3, [r7, #2]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7f8 fd65 	bl	800243c <HAL_GPIO_WritePin>
    return 1; // Success
 8009972:	2301      	movs	r3, #1
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <__cvt>:
 800997c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	ec57 6b10 	vmov	r6, r7, d0
 8009984:	2f00      	cmp	r7, #0
 8009986:	460c      	mov	r4, r1
 8009988:	4619      	mov	r1, r3
 800998a:	463b      	mov	r3, r7
 800998c:	bfbb      	ittet	lt
 800998e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009992:	461f      	movlt	r7, r3
 8009994:	2300      	movge	r3, #0
 8009996:	232d      	movlt	r3, #45	@ 0x2d
 8009998:	700b      	strb	r3, [r1, #0]
 800999a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800999c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099a0:	4691      	mov	r9, r2
 80099a2:	f023 0820 	bic.w	r8, r3, #32
 80099a6:	bfbc      	itt	lt
 80099a8:	4632      	movlt	r2, r6
 80099aa:	4616      	movlt	r6, r2
 80099ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099b0:	d005      	beq.n	80099be <__cvt+0x42>
 80099b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099b6:	d100      	bne.n	80099ba <__cvt+0x3e>
 80099b8:	3401      	adds	r4, #1
 80099ba:	2102      	movs	r1, #2
 80099bc:	e000      	b.n	80099c0 <__cvt+0x44>
 80099be:	2103      	movs	r1, #3
 80099c0:	ab03      	add	r3, sp, #12
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	ab02      	add	r3, sp, #8
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	ec47 6b10 	vmov	d0, r6, r7
 80099cc:	4653      	mov	r3, sl
 80099ce:	4622      	mov	r2, r4
 80099d0:	f001 f982 	bl	800acd8 <_dtoa_r>
 80099d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80099d8:	4605      	mov	r5, r0
 80099da:	d119      	bne.n	8009a10 <__cvt+0x94>
 80099dc:	f019 0f01 	tst.w	r9, #1
 80099e0:	d00e      	beq.n	8009a00 <__cvt+0x84>
 80099e2:	eb00 0904 	add.w	r9, r0, r4
 80099e6:	2200      	movs	r2, #0
 80099e8:	2300      	movs	r3, #0
 80099ea:	4630      	mov	r0, r6
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f7 f86b 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f2:	b108      	cbz	r0, 80099f8 <__cvt+0x7c>
 80099f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80099f8:	2230      	movs	r2, #48	@ 0x30
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	454b      	cmp	r3, r9
 80099fe:	d31e      	bcc.n	8009a3e <__cvt+0xc2>
 8009a00:	9b03      	ldr	r3, [sp, #12]
 8009a02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a04:	1b5b      	subs	r3, r3, r5
 8009a06:	4628      	mov	r0, r5
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	b004      	add	sp, #16
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a14:	eb00 0904 	add.w	r9, r0, r4
 8009a18:	d1e5      	bne.n	80099e6 <__cvt+0x6a>
 8009a1a:	7803      	ldrb	r3, [r0, #0]
 8009a1c:	2b30      	cmp	r3, #48	@ 0x30
 8009a1e:	d10a      	bne.n	8009a36 <__cvt+0xba>
 8009a20:	2200      	movs	r2, #0
 8009a22:	2300      	movs	r3, #0
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f7 f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a2c:	b918      	cbnz	r0, 8009a36 <__cvt+0xba>
 8009a2e:	f1c4 0401 	rsb	r4, r4, #1
 8009a32:	f8ca 4000 	str.w	r4, [sl]
 8009a36:	f8da 3000 	ldr.w	r3, [sl]
 8009a3a:	4499      	add	r9, r3
 8009a3c:	e7d3      	b.n	80099e6 <__cvt+0x6a>
 8009a3e:	1c59      	adds	r1, r3, #1
 8009a40:	9103      	str	r1, [sp, #12]
 8009a42:	701a      	strb	r2, [r3, #0]
 8009a44:	e7d9      	b.n	80099fa <__cvt+0x7e>

08009a46 <__exponent>:
 8009a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a48:	2900      	cmp	r1, #0
 8009a4a:	bfba      	itte	lt
 8009a4c:	4249      	neglt	r1, r1
 8009a4e:	232d      	movlt	r3, #45	@ 0x2d
 8009a50:	232b      	movge	r3, #43	@ 0x2b
 8009a52:	2909      	cmp	r1, #9
 8009a54:	7002      	strb	r2, [r0, #0]
 8009a56:	7043      	strb	r3, [r0, #1]
 8009a58:	dd29      	ble.n	8009aae <__exponent+0x68>
 8009a5a:	f10d 0307 	add.w	r3, sp, #7
 8009a5e:	461d      	mov	r5, r3
 8009a60:	270a      	movs	r7, #10
 8009a62:	461a      	mov	r2, r3
 8009a64:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a68:	fb07 1416 	mls	r4, r7, r6, r1
 8009a6c:	3430      	adds	r4, #48	@ 0x30
 8009a6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a72:	460c      	mov	r4, r1
 8009a74:	2c63      	cmp	r4, #99	@ 0x63
 8009a76:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	dcf1      	bgt.n	8009a62 <__exponent+0x1c>
 8009a7e:	3130      	adds	r1, #48	@ 0x30
 8009a80:	1e94      	subs	r4, r2, #2
 8009a82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a86:	1c41      	adds	r1, r0, #1
 8009a88:	4623      	mov	r3, r4
 8009a8a:	42ab      	cmp	r3, r5
 8009a8c:	d30a      	bcc.n	8009aa4 <__exponent+0x5e>
 8009a8e:	f10d 0309 	add.w	r3, sp, #9
 8009a92:	1a9b      	subs	r3, r3, r2
 8009a94:	42ac      	cmp	r4, r5
 8009a96:	bf88      	it	hi
 8009a98:	2300      	movhi	r3, #0
 8009a9a:	3302      	adds	r3, #2
 8009a9c:	4403      	add	r3, r0
 8009a9e:	1a18      	subs	r0, r3, r0
 8009aa0:	b003      	add	sp, #12
 8009aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009aa8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009aac:	e7ed      	b.n	8009a8a <__exponent+0x44>
 8009aae:	2330      	movs	r3, #48	@ 0x30
 8009ab0:	3130      	adds	r1, #48	@ 0x30
 8009ab2:	7083      	strb	r3, [r0, #2]
 8009ab4:	70c1      	strb	r1, [r0, #3]
 8009ab6:	1d03      	adds	r3, r0, #4
 8009ab8:	e7f1      	b.n	8009a9e <__exponent+0x58>
	...

08009abc <_printf_float>:
 8009abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	b08d      	sub	sp, #52	@ 0x34
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ac8:	4616      	mov	r6, r2
 8009aca:	461f      	mov	r7, r3
 8009acc:	4605      	mov	r5, r0
 8009ace:	f000 ffed 	bl	800aaac <_localeconv_r>
 8009ad2:	6803      	ldr	r3, [r0, #0]
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7f6 fbca 	bl	8000270 <strlen>
 8009adc:	2300      	movs	r3, #0
 8009ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae4:	9005      	str	r0, [sp, #20]
 8009ae6:	3307      	adds	r3, #7
 8009ae8:	f023 0307 	bic.w	r3, r3, #7
 8009aec:	f103 0208 	add.w	r2, r3, #8
 8009af0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009af4:	f8d4 b000 	ldr.w	fp, [r4]
 8009af8:	f8c8 2000 	str.w	r2, [r8]
 8009afc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b04:	9307      	str	r3, [sp, #28]
 8009b06:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b12:	4b9c      	ldr	r3, [pc, #624]	@ (8009d84 <_printf_float+0x2c8>)
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295
 8009b18:	f7f7 f808 	bl	8000b2c <__aeabi_dcmpun>
 8009b1c:	bb70      	cbnz	r0, 8009b7c <_printf_float+0xc0>
 8009b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b22:	4b98      	ldr	r3, [pc, #608]	@ (8009d84 <_printf_float+0x2c8>)
 8009b24:	f04f 32ff 	mov.w	r2, #4294967295
 8009b28:	f7f6 ffe2 	bl	8000af0 <__aeabi_dcmple>
 8009b2c:	bb30      	cbnz	r0, 8009b7c <_printf_float+0xc0>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2300      	movs	r3, #0
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 ffd1 	bl	8000adc <__aeabi_dcmplt>
 8009b3a:	b110      	cbz	r0, 8009b42 <_printf_float+0x86>
 8009b3c:	232d      	movs	r3, #45	@ 0x2d
 8009b3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b42:	4a91      	ldr	r2, [pc, #580]	@ (8009d88 <_printf_float+0x2cc>)
 8009b44:	4b91      	ldr	r3, [pc, #580]	@ (8009d8c <_printf_float+0x2d0>)
 8009b46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b4a:	bf8c      	ite	hi
 8009b4c:	4690      	movhi	r8, r2
 8009b4e:	4698      	movls	r8, r3
 8009b50:	2303      	movs	r3, #3
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	f02b 0304 	bic.w	r3, fp, #4
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	f04f 0900 	mov.w	r9, #0
 8009b5e:	9700      	str	r7, [sp, #0]
 8009b60:	4633      	mov	r3, r6
 8009b62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b64:	4621      	mov	r1, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f9d2 	bl	8009f10 <_printf_common>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f040 808d 	bne.w	8009c8c <_printf_float+0x1d0>
 8009b72:	f04f 30ff 	mov.w	r0, #4294967295
 8009b76:	b00d      	add	sp, #52	@ 0x34
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	464b      	mov	r3, r9
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 ffd2 	bl	8000b2c <__aeabi_dcmpun>
 8009b88:	b140      	cbz	r0, 8009b9c <_printf_float+0xe0>
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfbc      	itt	lt
 8009b90:	232d      	movlt	r3, #45	@ 0x2d
 8009b92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b96:	4a7e      	ldr	r2, [pc, #504]	@ (8009d90 <_printf_float+0x2d4>)
 8009b98:	4b7e      	ldr	r3, [pc, #504]	@ (8009d94 <_printf_float+0x2d8>)
 8009b9a:	e7d4      	b.n	8009b46 <_printf_float+0x8a>
 8009b9c:	6863      	ldr	r3, [r4, #4]
 8009b9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009ba2:	9206      	str	r2, [sp, #24]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	d13b      	bne.n	8009c20 <_printf_float+0x164>
 8009ba8:	2306      	movs	r3, #6
 8009baa:	6063      	str	r3, [r4, #4]
 8009bac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	9303      	str	r3, [sp, #12]
 8009bb6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009bb8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009bbc:	ab09      	add	r3, sp, #36	@ 0x24
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	6861      	ldr	r1, [r4, #4]
 8009bc2:	ec49 8b10 	vmov	d0, r8, r9
 8009bc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f7ff fed6 	bl	800997c <__cvt>
 8009bd0:	9b06      	ldr	r3, [sp, #24]
 8009bd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bd4:	2b47      	cmp	r3, #71	@ 0x47
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	d129      	bne.n	8009c2e <_printf_float+0x172>
 8009bda:	1cc8      	adds	r0, r1, #3
 8009bdc:	db02      	blt.n	8009be4 <_printf_float+0x128>
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	4299      	cmp	r1, r3
 8009be2:	dd41      	ble.n	8009c68 <_printf_float+0x1ac>
 8009be4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009be8:	fa5f fa8a 	uxtb.w	sl, sl
 8009bec:	3901      	subs	r1, #1
 8009bee:	4652      	mov	r2, sl
 8009bf0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009bf4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bf6:	f7ff ff26 	bl	8009a46 <__exponent>
 8009bfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bfc:	1813      	adds	r3, r2, r0
 8009bfe:	2a01      	cmp	r2, #1
 8009c00:	4681      	mov	r9, r0
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	dc02      	bgt.n	8009c0c <_printf_float+0x150>
 8009c06:	6822      	ldr	r2, [r4, #0]
 8009c08:	07d2      	lsls	r2, r2, #31
 8009c0a:	d501      	bpl.n	8009c10 <_printf_float+0x154>
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0a2      	beq.n	8009b5e <_printf_float+0xa2>
 8009c18:	232d      	movs	r3, #45	@ 0x2d
 8009c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c1e:	e79e      	b.n	8009b5e <_printf_float+0xa2>
 8009c20:	9a06      	ldr	r2, [sp, #24]
 8009c22:	2a47      	cmp	r2, #71	@ 0x47
 8009c24:	d1c2      	bne.n	8009bac <_printf_float+0xf0>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1c0      	bne.n	8009bac <_printf_float+0xf0>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e7bd      	b.n	8009baa <_printf_float+0xee>
 8009c2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c32:	d9db      	bls.n	8009bec <_printf_float+0x130>
 8009c34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c38:	d118      	bne.n	8009c6c <_printf_float+0x1b0>
 8009c3a:	2900      	cmp	r1, #0
 8009c3c:	6863      	ldr	r3, [r4, #4]
 8009c3e:	dd0b      	ble.n	8009c58 <_printf_float+0x19c>
 8009c40:	6121      	str	r1, [r4, #16]
 8009c42:	b913      	cbnz	r3, 8009c4a <_printf_float+0x18e>
 8009c44:	6822      	ldr	r2, [r4, #0]
 8009c46:	07d0      	lsls	r0, r2, #31
 8009c48:	d502      	bpl.n	8009c50 <_printf_float+0x194>
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	440b      	add	r3, r1
 8009c4e:	6123      	str	r3, [r4, #16]
 8009c50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c52:	f04f 0900 	mov.w	r9, #0
 8009c56:	e7db      	b.n	8009c10 <_printf_float+0x154>
 8009c58:	b913      	cbnz	r3, 8009c60 <_printf_float+0x1a4>
 8009c5a:	6822      	ldr	r2, [r4, #0]
 8009c5c:	07d2      	lsls	r2, r2, #31
 8009c5e:	d501      	bpl.n	8009c64 <_printf_float+0x1a8>
 8009c60:	3302      	adds	r3, #2
 8009c62:	e7f4      	b.n	8009c4e <_printf_float+0x192>
 8009c64:	2301      	movs	r3, #1
 8009c66:	e7f2      	b.n	8009c4e <_printf_float+0x192>
 8009c68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c6e:	4299      	cmp	r1, r3
 8009c70:	db05      	blt.n	8009c7e <_printf_float+0x1c2>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	6121      	str	r1, [r4, #16]
 8009c76:	07d8      	lsls	r0, r3, #31
 8009c78:	d5ea      	bpl.n	8009c50 <_printf_float+0x194>
 8009c7a:	1c4b      	adds	r3, r1, #1
 8009c7c:	e7e7      	b.n	8009c4e <_printf_float+0x192>
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	bfd4      	ite	le
 8009c82:	f1c1 0202 	rsble	r2, r1, #2
 8009c86:	2201      	movgt	r2, #1
 8009c88:	4413      	add	r3, r2
 8009c8a:	e7e0      	b.n	8009c4e <_printf_float+0x192>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	055a      	lsls	r2, r3, #21
 8009c90:	d407      	bmi.n	8009ca2 <_printf_float+0x1e6>
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	4642      	mov	r2, r8
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d12b      	bne.n	8009cf8 <_printf_float+0x23c>
 8009ca0:	e767      	b.n	8009b72 <_printf_float+0xb6>
 8009ca2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ca6:	f240 80dd 	bls.w	8009e64 <_printf_float+0x3a8>
 8009caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f7f6 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d033      	beq.n	8009d22 <_printf_float+0x266>
 8009cba:	4a37      	ldr	r2, [pc, #220]	@ (8009d98 <_printf_float+0x2dc>)
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f43f af54 	beq.w	8009b72 <_printf_float+0xb6>
 8009cca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cce:	4543      	cmp	r3, r8
 8009cd0:	db02      	blt.n	8009cd8 <_printf_float+0x21c>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	07d8      	lsls	r0, r3, #31
 8009cd6:	d50f      	bpl.n	8009cf8 <_printf_float+0x23c>
 8009cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f43f af45 	beq.w	8009b72 <_printf_float+0xb6>
 8009ce8:	f04f 0900 	mov.w	r9, #0
 8009cec:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cf0:	f104 0a1a 	add.w	sl, r4, #26
 8009cf4:	45c8      	cmp	r8, r9
 8009cf6:	dc09      	bgt.n	8009d0c <_printf_float+0x250>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	079b      	lsls	r3, r3, #30
 8009cfc:	f100 8103 	bmi.w	8009f06 <_printf_float+0x44a>
 8009d00:	68e0      	ldr	r0, [r4, #12]
 8009d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d04:	4298      	cmp	r0, r3
 8009d06:	bfb8      	it	lt
 8009d08:	4618      	movlt	r0, r3
 8009d0a:	e734      	b.n	8009b76 <_printf_float+0xba>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	4652      	mov	r2, sl
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af2b 	beq.w	8009b72 <_printf_float+0xb6>
 8009d1c:	f109 0901 	add.w	r9, r9, #1
 8009d20:	e7e8      	b.n	8009cf4 <_printf_float+0x238>
 8009d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dc39      	bgt.n	8009d9c <_printf_float+0x2e0>
 8009d28:	4a1b      	ldr	r2, [pc, #108]	@ (8009d98 <_printf_float+0x2dc>)
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	4628      	mov	r0, r5
 8009d30:	47b8      	blx	r7
 8009d32:	3001      	adds	r0, #1
 8009d34:	f43f af1d 	beq.w	8009b72 <_printf_float+0xb6>
 8009d38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d3c:	ea59 0303 	orrs.w	r3, r9, r3
 8009d40:	d102      	bne.n	8009d48 <_printf_float+0x28c>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	07d9      	lsls	r1, r3, #31
 8009d46:	d5d7      	bpl.n	8009cf8 <_printf_float+0x23c>
 8009d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b8      	blx	r7
 8009d52:	3001      	adds	r0, #1
 8009d54:	f43f af0d 	beq.w	8009b72 <_printf_float+0xb6>
 8009d58:	f04f 0a00 	mov.w	sl, #0
 8009d5c:	f104 0b1a 	add.w	fp, r4, #26
 8009d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d62:	425b      	negs	r3, r3
 8009d64:	4553      	cmp	r3, sl
 8009d66:	dc01      	bgt.n	8009d6c <_printf_float+0x2b0>
 8009d68:	464b      	mov	r3, r9
 8009d6a:	e793      	b.n	8009c94 <_printf_float+0x1d8>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	465a      	mov	r2, fp
 8009d70:	4631      	mov	r1, r6
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b8      	blx	r7
 8009d76:	3001      	adds	r0, #1
 8009d78:	f43f aefb 	beq.w	8009b72 <_printf_float+0xb6>
 8009d7c:	f10a 0a01 	add.w	sl, sl, #1
 8009d80:	e7ee      	b.n	8009d60 <_printf_float+0x2a4>
 8009d82:	bf00      	nop
 8009d84:	7fefffff 	.word	0x7fefffff
 8009d88:	0800eabd 	.word	0x0800eabd
 8009d8c:	0800eab9 	.word	0x0800eab9
 8009d90:	0800eac5 	.word	0x0800eac5
 8009d94:	0800eac1 	.word	0x0800eac1
 8009d98:	0800eac9 	.word	0x0800eac9
 8009d9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009da2:	4553      	cmp	r3, sl
 8009da4:	bfa8      	it	ge
 8009da6:	4653      	movge	r3, sl
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	4699      	mov	r9, r3
 8009dac:	dc36      	bgt.n	8009e1c <_printf_float+0x360>
 8009dae:	f04f 0b00 	mov.w	fp, #0
 8009db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009db6:	f104 021a 	add.w	r2, r4, #26
 8009dba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dbc:	9306      	str	r3, [sp, #24]
 8009dbe:	eba3 0309 	sub.w	r3, r3, r9
 8009dc2:	455b      	cmp	r3, fp
 8009dc4:	dc31      	bgt.n	8009e2a <_printf_float+0x36e>
 8009dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc8:	459a      	cmp	sl, r3
 8009dca:	dc3a      	bgt.n	8009e42 <_printf_float+0x386>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	07da      	lsls	r2, r3, #31
 8009dd0:	d437      	bmi.n	8009e42 <_printf_float+0x386>
 8009dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd4:	ebaa 0903 	sub.w	r9, sl, r3
 8009dd8:	9b06      	ldr	r3, [sp, #24]
 8009dda:	ebaa 0303 	sub.w	r3, sl, r3
 8009dde:	4599      	cmp	r9, r3
 8009de0:	bfa8      	it	ge
 8009de2:	4699      	movge	r9, r3
 8009de4:	f1b9 0f00 	cmp.w	r9, #0
 8009de8:	dc33      	bgt.n	8009e52 <_printf_float+0x396>
 8009dea:	f04f 0800 	mov.w	r8, #0
 8009dee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009df2:	f104 0b1a 	add.w	fp, r4, #26
 8009df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df8:	ebaa 0303 	sub.w	r3, sl, r3
 8009dfc:	eba3 0309 	sub.w	r3, r3, r9
 8009e00:	4543      	cmp	r3, r8
 8009e02:	f77f af79 	ble.w	8009cf8 <_printf_float+0x23c>
 8009e06:	2301      	movs	r3, #1
 8009e08:	465a      	mov	r2, fp
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b8      	blx	r7
 8009e10:	3001      	adds	r0, #1
 8009e12:	f43f aeae 	beq.w	8009b72 <_printf_float+0xb6>
 8009e16:	f108 0801 	add.w	r8, r8, #1
 8009e1a:	e7ec      	b.n	8009df6 <_printf_float+0x33a>
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4628      	mov	r0, r5
 8009e22:	47b8      	blx	r7
 8009e24:	3001      	adds	r0, #1
 8009e26:	d1c2      	bne.n	8009dae <_printf_float+0x2f2>
 8009e28:	e6a3      	b.n	8009b72 <_printf_float+0xb6>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	9206      	str	r2, [sp, #24]
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	f43f ae9c 	beq.w	8009b72 <_printf_float+0xb6>
 8009e3a:	9a06      	ldr	r2, [sp, #24]
 8009e3c:	f10b 0b01 	add.w	fp, fp, #1
 8009e40:	e7bb      	b.n	8009dba <_printf_float+0x2fe>
 8009e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1c0      	bne.n	8009dd2 <_printf_float+0x316>
 8009e50:	e68f      	b.n	8009b72 <_printf_float+0xb6>
 8009e52:	9a06      	ldr	r2, [sp, #24]
 8009e54:	464b      	mov	r3, r9
 8009e56:	4442      	add	r2, r8
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d1c3      	bne.n	8009dea <_printf_float+0x32e>
 8009e62:	e686      	b.n	8009b72 <_printf_float+0xb6>
 8009e64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e68:	f1ba 0f01 	cmp.w	sl, #1
 8009e6c:	dc01      	bgt.n	8009e72 <_printf_float+0x3b6>
 8009e6e:	07db      	lsls	r3, r3, #31
 8009e70:	d536      	bpl.n	8009ee0 <_printf_float+0x424>
 8009e72:	2301      	movs	r3, #1
 8009e74:	4642      	mov	r2, r8
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	47b8      	blx	r7
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	f43f ae78 	beq.w	8009b72 <_printf_float+0xb6>
 8009e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b8      	blx	r7
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	f43f ae70 	beq.w	8009b72 <_printf_float+0xb6>
 8009e92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e96:	2200      	movs	r2, #0
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e9e:	f7f6 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ea2:	b9c0      	cbnz	r0, 8009ed6 <_printf_float+0x41a>
 8009ea4:	4653      	mov	r3, sl
 8009ea6:	f108 0201 	add.w	r2, r8, #1
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4628      	mov	r0, r5
 8009eae:	47b8      	blx	r7
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	d10c      	bne.n	8009ece <_printf_float+0x412>
 8009eb4:	e65d      	b.n	8009b72 <_printf_float+0xb6>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	465a      	mov	r2, fp
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b8      	blx	r7
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f43f ae56 	beq.w	8009b72 <_printf_float+0xb6>
 8009ec6:	f108 0801 	add.w	r8, r8, #1
 8009eca:	45d0      	cmp	r8, sl
 8009ecc:	dbf3      	blt.n	8009eb6 <_printf_float+0x3fa>
 8009ece:	464b      	mov	r3, r9
 8009ed0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ed4:	e6df      	b.n	8009c96 <_printf_float+0x1da>
 8009ed6:	f04f 0800 	mov.w	r8, #0
 8009eda:	f104 0b1a 	add.w	fp, r4, #26
 8009ede:	e7f4      	b.n	8009eca <_printf_float+0x40e>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	e7e1      	b.n	8009eaa <_printf_float+0x3ee>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	464a      	mov	r2, r9
 8009eea:	4631      	mov	r1, r6
 8009eec:	4628      	mov	r0, r5
 8009eee:	47b8      	blx	r7
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f43f ae3e 	beq.w	8009b72 <_printf_float+0xb6>
 8009ef6:	f108 0801 	add.w	r8, r8, #1
 8009efa:	68e3      	ldr	r3, [r4, #12]
 8009efc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009efe:	1a5b      	subs	r3, r3, r1
 8009f00:	4543      	cmp	r3, r8
 8009f02:	dcf0      	bgt.n	8009ee6 <_printf_float+0x42a>
 8009f04:	e6fc      	b.n	8009d00 <_printf_float+0x244>
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	f104 0919 	add.w	r9, r4, #25
 8009f0e:	e7f4      	b.n	8009efa <_printf_float+0x43e>

08009f10 <_printf_common>:
 8009f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	4616      	mov	r6, r2
 8009f16:	4698      	mov	r8, r3
 8009f18:	688a      	ldr	r2, [r1, #8]
 8009f1a:	690b      	ldr	r3, [r1, #16]
 8009f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	bfb8      	it	lt
 8009f24:	4613      	movlt	r3, r2
 8009f26:	6033      	str	r3, [r6, #0]
 8009f28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	b10a      	cbz	r2, 8009f36 <_printf_common+0x26>
 8009f32:	3301      	adds	r3, #1
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	0699      	lsls	r1, r3, #26
 8009f3a:	bf42      	ittt	mi
 8009f3c:	6833      	ldrmi	r3, [r6, #0]
 8009f3e:	3302      	addmi	r3, #2
 8009f40:	6033      	strmi	r3, [r6, #0]
 8009f42:	6825      	ldr	r5, [r4, #0]
 8009f44:	f015 0506 	ands.w	r5, r5, #6
 8009f48:	d106      	bne.n	8009f58 <_printf_common+0x48>
 8009f4a:	f104 0a19 	add.w	sl, r4, #25
 8009f4e:	68e3      	ldr	r3, [r4, #12]
 8009f50:	6832      	ldr	r2, [r6, #0]
 8009f52:	1a9b      	subs	r3, r3, r2
 8009f54:	42ab      	cmp	r3, r5
 8009f56:	dc26      	bgt.n	8009fa6 <_printf_common+0x96>
 8009f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f5c:	6822      	ldr	r2, [r4, #0]
 8009f5e:	3b00      	subs	r3, #0
 8009f60:	bf18      	it	ne
 8009f62:	2301      	movne	r3, #1
 8009f64:	0692      	lsls	r2, r2, #26
 8009f66:	d42b      	bmi.n	8009fc0 <_printf_common+0xb0>
 8009f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f6c:	4641      	mov	r1, r8
 8009f6e:	4638      	mov	r0, r7
 8009f70:	47c8      	blx	r9
 8009f72:	3001      	adds	r0, #1
 8009f74:	d01e      	beq.n	8009fb4 <_printf_common+0xa4>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	6922      	ldr	r2, [r4, #16]
 8009f7a:	f003 0306 	and.w	r3, r3, #6
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	bf02      	ittt	eq
 8009f82:	68e5      	ldreq	r5, [r4, #12]
 8009f84:	6833      	ldreq	r3, [r6, #0]
 8009f86:	1aed      	subeq	r5, r5, r3
 8009f88:	68a3      	ldr	r3, [r4, #8]
 8009f8a:	bf0c      	ite	eq
 8009f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f90:	2500      	movne	r5, #0
 8009f92:	4293      	cmp	r3, r2
 8009f94:	bfc4      	itt	gt
 8009f96:	1a9b      	subgt	r3, r3, r2
 8009f98:	18ed      	addgt	r5, r5, r3
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	341a      	adds	r4, #26
 8009f9e:	42b5      	cmp	r5, r6
 8009fa0:	d11a      	bne.n	8009fd8 <_printf_common+0xc8>
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e008      	b.n	8009fb8 <_printf_common+0xa8>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	4652      	mov	r2, sl
 8009faa:	4641      	mov	r1, r8
 8009fac:	4638      	mov	r0, r7
 8009fae:	47c8      	blx	r9
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d103      	bne.n	8009fbc <_printf_common+0xac>
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fbc:	3501      	adds	r5, #1
 8009fbe:	e7c6      	b.n	8009f4e <_printf_common+0x3e>
 8009fc0:	18e1      	adds	r1, r4, r3
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	2030      	movs	r0, #48	@ 0x30
 8009fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fca:	4422      	add	r2, r4
 8009fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fd4:	3302      	adds	r3, #2
 8009fd6:	e7c7      	b.n	8009f68 <_printf_common+0x58>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	4622      	mov	r2, r4
 8009fdc:	4641      	mov	r1, r8
 8009fde:	4638      	mov	r0, r7
 8009fe0:	47c8      	blx	r9
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d0e6      	beq.n	8009fb4 <_printf_common+0xa4>
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	e7d9      	b.n	8009f9e <_printf_common+0x8e>
	...

08009fec <_printf_i>:
 8009fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	7e0f      	ldrb	r7, [r1, #24]
 8009ff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ff4:	2f78      	cmp	r7, #120	@ 0x78
 8009ff6:	4691      	mov	r9, r2
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	469a      	mov	sl, r3
 8009ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a002:	d807      	bhi.n	800a014 <_printf_i+0x28>
 800a004:	2f62      	cmp	r7, #98	@ 0x62
 800a006:	d80a      	bhi.n	800a01e <_printf_i+0x32>
 800a008:	2f00      	cmp	r7, #0
 800a00a:	f000 80d1 	beq.w	800a1b0 <_printf_i+0x1c4>
 800a00e:	2f58      	cmp	r7, #88	@ 0x58
 800a010:	f000 80b8 	beq.w	800a184 <_printf_i+0x198>
 800a014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a01c:	e03a      	b.n	800a094 <_printf_i+0xa8>
 800a01e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a022:	2b15      	cmp	r3, #21
 800a024:	d8f6      	bhi.n	800a014 <_printf_i+0x28>
 800a026:	a101      	add	r1, pc, #4	@ (adr r1, 800a02c <_printf_i+0x40>)
 800a028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a02c:	0800a085 	.word	0x0800a085
 800a030:	0800a099 	.word	0x0800a099
 800a034:	0800a015 	.word	0x0800a015
 800a038:	0800a015 	.word	0x0800a015
 800a03c:	0800a015 	.word	0x0800a015
 800a040:	0800a015 	.word	0x0800a015
 800a044:	0800a099 	.word	0x0800a099
 800a048:	0800a015 	.word	0x0800a015
 800a04c:	0800a015 	.word	0x0800a015
 800a050:	0800a015 	.word	0x0800a015
 800a054:	0800a015 	.word	0x0800a015
 800a058:	0800a197 	.word	0x0800a197
 800a05c:	0800a0c3 	.word	0x0800a0c3
 800a060:	0800a151 	.word	0x0800a151
 800a064:	0800a015 	.word	0x0800a015
 800a068:	0800a015 	.word	0x0800a015
 800a06c:	0800a1b9 	.word	0x0800a1b9
 800a070:	0800a015 	.word	0x0800a015
 800a074:	0800a0c3 	.word	0x0800a0c3
 800a078:	0800a015 	.word	0x0800a015
 800a07c:	0800a015 	.word	0x0800a015
 800a080:	0800a159 	.word	0x0800a159
 800a084:	6833      	ldr	r3, [r6, #0]
 800a086:	1d1a      	adds	r2, r3, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6032      	str	r2, [r6, #0]
 800a08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a094:	2301      	movs	r3, #1
 800a096:	e09c      	b.n	800a1d2 <_printf_i+0x1e6>
 800a098:	6833      	ldr	r3, [r6, #0]
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	1d19      	adds	r1, r3, #4
 800a09e:	6031      	str	r1, [r6, #0]
 800a0a0:	0606      	lsls	r6, r0, #24
 800a0a2:	d501      	bpl.n	800a0a8 <_printf_i+0xbc>
 800a0a4:	681d      	ldr	r5, [r3, #0]
 800a0a6:	e003      	b.n	800a0b0 <_printf_i+0xc4>
 800a0a8:	0645      	lsls	r5, r0, #25
 800a0aa:	d5fb      	bpl.n	800a0a4 <_printf_i+0xb8>
 800a0ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	da03      	bge.n	800a0bc <_printf_i+0xd0>
 800a0b4:	232d      	movs	r3, #45	@ 0x2d
 800a0b6:	426d      	negs	r5, r5
 800a0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0bc:	4858      	ldr	r0, [pc, #352]	@ (800a220 <_printf_i+0x234>)
 800a0be:	230a      	movs	r3, #10
 800a0c0:	e011      	b.n	800a0e6 <_printf_i+0xfa>
 800a0c2:	6821      	ldr	r1, [r4, #0]
 800a0c4:	6833      	ldr	r3, [r6, #0]
 800a0c6:	0608      	lsls	r0, r1, #24
 800a0c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0cc:	d402      	bmi.n	800a0d4 <_printf_i+0xe8>
 800a0ce:	0649      	lsls	r1, r1, #25
 800a0d0:	bf48      	it	mi
 800a0d2:	b2ad      	uxthmi	r5, r5
 800a0d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0d6:	4852      	ldr	r0, [pc, #328]	@ (800a220 <_printf_i+0x234>)
 800a0d8:	6033      	str	r3, [r6, #0]
 800a0da:	bf14      	ite	ne
 800a0dc:	230a      	movne	r3, #10
 800a0de:	2308      	moveq	r3, #8
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0e6:	6866      	ldr	r6, [r4, #4]
 800a0e8:	60a6      	str	r6, [r4, #8]
 800a0ea:	2e00      	cmp	r6, #0
 800a0ec:	db05      	blt.n	800a0fa <_printf_i+0x10e>
 800a0ee:	6821      	ldr	r1, [r4, #0]
 800a0f0:	432e      	orrs	r6, r5
 800a0f2:	f021 0104 	bic.w	r1, r1, #4
 800a0f6:	6021      	str	r1, [r4, #0]
 800a0f8:	d04b      	beq.n	800a192 <_printf_i+0x1a6>
 800a0fa:	4616      	mov	r6, r2
 800a0fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a100:	fb03 5711 	mls	r7, r3, r1, r5
 800a104:	5dc7      	ldrb	r7, [r0, r7]
 800a106:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a10a:	462f      	mov	r7, r5
 800a10c:	42bb      	cmp	r3, r7
 800a10e:	460d      	mov	r5, r1
 800a110:	d9f4      	bls.n	800a0fc <_printf_i+0x110>
 800a112:	2b08      	cmp	r3, #8
 800a114:	d10b      	bne.n	800a12e <_printf_i+0x142>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	07df      	lsls	r7, r3, #31
 800a11a:	d508      	bpl.n	800a12e <_printf_i+0x142>
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	6861      	ldr	r1, [r4, #4]
 800a120:	4299      	cmp	r1, r3
 800a122:	bfde      	ittt	le
 800a124:	2330      	movle	r3, #48	@ 0x30
 800a126:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a12a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a12e:	1b92      	subs	r2, r2, r6
 800a130:	6122      	str	r2, [r4, #16]
 800a132:	f8cd a000 	str.w	sl, [sp]
 800a136:	464b      	mov	r3, r9
 800a138:	aa03      	add	r2, sp, #12
 800a13a:	4621      	mov	r1, r4
 800a13c:	4640      	mov	r0, r8
 800a13e:	f7ff fee7 	bl	8009f10 <_printf_common>
 800a142:	3001      	adds	r0, #1
 800a144:	d14a      	bne.n	800a1dc <_printf_i+0x1f0>
 800a146:	f04f 30ff 	mov.w	r0, #4294967295
 800a14a:	b004      	add	sp, #16
 800a14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	f043 0320 	orr.w	r3, r3, #32
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	4832      	ldr	r0, [pc, #200]	@ (800a224 <_printf_i+0x238>)
 800a15a:	2778      	movs	r7, #120	@ 0x78
 800a15c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	6831      	ldr	r1, [r6, #0]
 800a164:	061f      	lsls	r7, r3, #24
 800a166:	f851 5b04 	ldr.w	r5, [r1], #4
 800a16a:	d402      	bmi.n	800a172 <_printf_i+0x186>
 800a16c:	065f      	lsls	r7, r3, #25
 800a16e:	bf48      	it	mi
 800a170:	b2ad      	uxthmi	r5, r5
 800a172:	6031      	str	r1, [r6, #0]
 800a174:	07d9      	lsls	r1, r3, #31
 800a176:	bf44      	itt	mi
 800a178:	f043 0320 	orrmi.w	r3, r3, #32
 800a17c:	6023      	strmi	r3, [r4, #0]
 800a17e:	b11d      	cbz	r5, 800a188 <_printf_i+0x19c>
 800a180:	2310      	movs	r3, #16
 800a182:	e7ad      	b.n	800a0e0 <_printf_i+0xf4>
 800a184:	4826      	ldr	r0, [pc, #152]	@ (800a220 <_printf_i+0x234>)
 800a186:	e7e9      	b.n	800a15c <_printf_i+0x170>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	f023 0320 	bic.w	r3, r3, #32
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	e7f6      	b.n	800a180 <_printf_i+0x194>
 800a192:	4616      	mov	r6, r2
 800a194:	e7bd      	b.n	800a112 <_printf_i+0x126>
 800a196:	6833      	ldr	r3, [r6, #0]
 800a198:	6825      	ldr	r5, [r4, #0]
 800a19a:	6961      	ldr	r1, [r4, #20]
 800a19c:	1d18      	adds	r0, r3, #4
 800a19e:	6030      	str	r0, [r6, #0]
 800a1a0:	062e      	lsls	r6, r5, #24
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	d501      	bpl.n	800a1aa <_printf_i+0x1be>
 800a1a6:	6019      	str	r1, [r3, #0]
 800a1a8:	e002      	b.n	800a1b0 <_printf_i+0x1c4>
 800a1aa:	0668      	lsls	r0, r5, #25
 800a1ac:	d5fb      	bpl.n	800a1a6 <_printf_i+0x1ba>
 800a1ae:	8019      	strh	r1, [r3, #0]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	6123      	str	r3, [r4, #16]
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	e7bc      	b.n	800a132 <_printf_i+0x146>
 800a1b8:	6833      	ldr	r3, [r6, #0]
 800a1ba:	1d1a      	adds	r2, r3, #4
 800a1bc:	6032      	str	r2, [r6, #0]
 800a1be:	681e      	ldr	r6, [r3, #0]
 800a1c0:	6862      	ldr	r2, [r4, #4]
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f7f6 f803 	bl	80001d0 <memchr>
 800a1ca:	b108      	cbz	r0, 800a1d0 <_printf_i+0x1e4>
 800a1cc:	1b80      	subs	r0, r0, r6
 800a1ce:	6060      	str	r0, [r4, #4]
 800a1d0:	6863      	ldr	r3, [r4, #4]
 800a1d2:	6123      	str	r3, [r4, #16]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1da:	e7aa      	b.n	800a132 <_printf_i+0x146>
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	4632      	mov	r2, r6
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	47d0      	blx	sl
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d0ad      	beq.n	800a146 <_printf_i+0x15a>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	079b      	lsls	r3, r3, #30
 800a1ee:	d413      	bmi.n	800a218 <_printf_i+0x22c>
 800a1f0:	68e0      	ldr	r0, [r4, #12]
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	4298      	cmp	r0, r3
 800a1f6:	bfb8      	it	lt
 800a1f8:	4618      	movlt	r0, r3
 800a1fa:	e7a6      	b.n	800a14a <_printf_i+0x15e>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4632      	mov	r2, r6
 800a200:	4649      	mov	r1, r9
 800a202:	4640      	mov	r0, r8
 800a204:	47d0      	blx	sl
 800a206:	3001      	adds	r0, #1
 800a208:	d09d      	beq.n	800a146 <_printf_i+0x15a>
 800a20a:	3501      	adds	r5, #1
 800a20c:	68e3      	ldr	r3, [r4, #12]
 800a20e:	9903      	ldr	r1, [sp, #12]
 800a210:	1a5b      	subs	r3, r3, r1
 800a212:	42ab      	cmp	r3, r5
 800a214:	dcf2      	bgt.n	800a1fc <_printf_i+0x210>
 800a216:	e7eb      	b.n	800a1f0 <_printf_i+0x204>
 800a218:	2500      	movs	r5, #0
 800a21a:	f104 0619 	add.w	r6, r4, #25
 800a21e:	e7f5      	b.n	800a20c <_printf_i+0x220>
 800a220:	0800eacb 	.word	0x0800eacb
 800a224:	0800eadc 	.word	0x0800eadc

0800a228 <_scanf_float>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	b087      	sub	sp, #28
 800a22e:	4691      	mov	r9, r2
 800a230:	9303      	str	r3, [sp, #12]
 800a232:	688b      	ldr	r3, [r1, #8]
 800a234:	1e5a      	subs	r2, r3, #1
 800a236:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a23a:	bf81      	itttt	hi
 800a23c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a240:	eb03 0b05 	addhi.w	fp, r3, r5
 800a244:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a248:	608b      	strhi	r3, [r1, #8]
 800a24a:	680b      	ldr	r3, [r1, #0]
 800a24c:	460a      	mov	r2, r1
 800a24e:	f04f 0500 	mov.w	r5, #0
 800a252:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a256:	f842 3b1c 	str.w	r3, [r2], #28
 800a25a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a25e:	4680      	mov	r8, r0
 800a260:	460c      	mov	r4, r1
 800a262:	bf98      	it	ls
 800a264:	f04f 0b00 	movls.w	fp, #0
 800a268:	9201      	str	r2, [sp, #4]
 800a26a:	4616      	mov	r6, r2
 800a26c:	46aa      	mov	sl, r5
 800a26e:	462f      	mov	r7, r5
 800a270:	9502      	str	r5, [sp, #8]
 800a272:	68a2      	ldr	r2, [r4, #8]
 800a274:	b15a      	cbz	r2, 800a28e <_scanf_float+0x66>
 800a276:	f8d9 3000 	ldr.w	r3, [r9]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b4e      	cmp	r3, #78	@ 0x4e
 800a27e:	d863      	bhi.n	800a348 <_scanf_float+0x120>
 800a280:	2b40      	cmp	r3, #64	@ 0x40
 800a282:	d83b      	bhi.n	800a2fc <_scanf_float+0xd4>
 800a284:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a288:	b2c8      	uxtb	r0, r1
 800a28a:	280e      	cmp	r0, #14
 800a28c:	d939      	bls.n	800a302 <_scanf_float+0xda>
 800a28e:	b11f      	cbz	r7, 800a298 <_scanf_float+0x70>
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a296:	6023      	str	r3, [r4, #0]
 800a298:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a29c:	f1ba 0f01 	cmp.w	sl, #1
 800a2a0:	f200 8114 	bhi.w	800a4cc <_scanf_float+0x2a4>
 800a2a4:	9b01      	ldr	r3, [sp, #4]
 800a2a6:	429e      	cmp	r6, r3
 800a2a8:	f200 8105 	bhi.w	800a4b6 <_scanf_float+0x28e>
 800a2ac:	2001      	movs	r0, #1
 800a2ae:	b007      	add	sp, #28
 800a2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a2b8:	2a0d      	cmp	r2, #13
 800a2ba:	d8e8      	bhi.n	800a28e <_scanf_float+0x66>
 800a2bc:	a101      	add	r1, pc, #4	@ (adr r1, 800a2c4 <_scanf_float+0x9c>)
 800a2be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2c2:	bf00      	nop
 800a2c4:	0800a40d 	.word	0x0800a40d
 800a2c8:	0800a28f 	.word	0x0800a28f
 800a2cc:	0800a28f 	.word	0x0800a28f
 800a2d0:	0800a28f 	.word	0x0800a28f
 800a2d4:	0800a469 	.word	0x0800a469
 800a2d8:	0800a443 	.word	0x0800a443
 800a2dc:	0800a28f 	.word	0x0800a28f
 800a2e0:	0800a28f 	.word	0x0800a28f
 800a2e4:	0800a41b 	.word	0x0800a41b
 800a2e8:	0800a28f 	.word	0x0800a28f
 800a2ec:	0800a28f 	.word	0x0800a28f
 800a2f0:	0800a28f 	.word	0x0800a28f
 800a2f4:	0800a28f 	.word	0x0800a28f
 800a2f8:	0800a3d7 	.word	0x0800a3d7
 800a2fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a300:	e7da      	b.n	800a2b8 <_scanf_float+0x90>
 800a302:	290e      	cmp	r1, #14
 800a304:	d8c3      	bhi.n	800a28e <_scanf_float+0x66>
 800a306:	a001      	add	r0, pc, #4	@ (adr r0, 800a30c <_scanf_float+0xe4>)
 800a308:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a30c:	0800a3c7 	.word	0x0800a3c7
 800a310:	0800a28f 	.word	0x0800a28f
 800a314:	0800a3c7 	.word	0x0800a3c7
 800a318:	0800a457 	.word	0x0800a457
 800a31c:	0800a28f 	.word	0x0800a28f
 800a320:	0800a369 	.word	0x0800a369
 800a324:	0800a3ad 	.word	0x0800a3ad
 800a328:	0800a3ad 	.word	0x0800a3ad
 800a32c:	0800a3ad 	.word	0x0800a3ad
 800a330:	0800a3ad 	.word	0x0800a3ad
 800a334:	0800a3ad 	.word	0x0800a3ad
 800a338:	0800a3ad 	.word	0x0800a3ad
 800a33c:	0800a3ad 	.word	0x0800a3ad
 800a340:	0800a3ad 	.word	0x0800a3ad
 800a344:	0800a3ad 	.word	0x0800a3ad
 800a348:	2b6e      	cmp	r3, #110	@ 0x6e
 800a34a:	d809      	bhi.n	800a360 <_scanf_float+0x138>
 800a34c:	2b60      	cmp	r3, #96	@ 0x60
 800a34e:	d8b1      	bhi.n	800a2b4 <_scanf_float+0x8c>
 800a350:	2b54      	cmp	r3, #84	@ 0x54
 800a352:	d07b      	beq.n	800a44c <_scanf_float+0x224>
 800a354:	2b59      	cmp	r3, #89	@ 0x59
 800a356:	d19a      	bne.n	800a28e <_scanf_float+0x66>
 800a358:	2d07      	cmp	r5, #7
 800a35a:	d198      	bne.n	800a28e <_scanf_float+0x66>
 800a35c:	2508      	movs	r5, #8
 800a35e:	e02f      	b.n	800a3c0 <_scanf_float+0x198>
 800a360:	2b74      	cmp	r3, #116	@ 0x74
 800a362:	d073      	beq.n	800a44c <_scanf_float+0x224>
 800a364:	2b79      	cmp	r3, #121	@ 0x79
 800a366:	e7f6      	b.n	800a356 <_scanf_float+0x12e>
 800a368:	6821      	ldr	r1, [r4, #0]
 800a36a:	05c8      	lsls	r0, r1, #23
 800a36c:	d51e      	bpl.n	800a3ac <_scanf_float+0x184>
 800a36e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a372:	6021      	str	r1, [r4, #0]
 800a374:	3701      	adds	r7, #1
 800a376:	f1bb 0f00 	cmp.w	fp, #0
 800a37a:	d003      	beq.n	800a384 <_scanf_float+0x15c>
 800a37c:	3201      	adds	r2, #1
 800a37e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a382:	60a2      	str	r2, [r4, #8]
 800a384:	68a3      	ldr	r3, [r4, #8]
 800a386:	3b01      	subs	r3, #1
 800a388:	60a3      	str	r3, [r4, #8]
 800a38a:	6923      	ldr	r3, [r4, #16]
 800a38c:	3301      	adds	r3, #1
 800a38e:	6123      	str	r3, [r4, #16]
 800a390:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a394:	3b01      	subs	r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	f8c9 3004 	str.w	r3, [r9, #4]
 800a39c:	f340 8082 	ble.w	800a4a4 <_scanf_float+0x27c>
 800a3a0:	f8d9 3000 	ldr.w	r3, [r9]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	f8c9 3000 	str.w	r3, [r9]
 800a3aa:	e762      	b.n	800a272 <_scanf_float+0x4a>
 800a3ac:	eb1a 0105 	adds.w	r1, sl, r5
 800a3b0:	f47f af6d 	bne.w	800a28e <_scanf_float+0x66>
 800a3b4:	6822      	ldr	r2, [r4, #0]
 800a3b6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a3ba:	6022      	str	r2, [r4, #0]
 800a3bc:	460d      	mov	r5, r1
 800a3be:	468a      	mov	sl, r1
 800a3c0:	f806 3b01 	strb.w	r3, [r6], #1
 800a3c4:	e7de      	b.n	800a384 <_scanf_float+0x15c>
 800a3c6:	6822      	ldr	r2, [r4, #0]
 800a3c8:	0610      	lsls	r0, r2, #24
 800a3ca:	f57f af60 	bpl.w	800a28e <_scanf_float+0x66>
 800a3ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3d2:	6022      	str	r2, [r4, #0]
 800a3d4:	e7f4      	b.n	800a3c0 <_scanf_float+0x198>
 800a3d6:	f1ba 0f00 	cmp.w	sl, #0
 800a3da:	d10c      	bne.n	800a3f6 <_scanf_float+0x1ce>
 800a3dc:	b977      	cbnz	r7, 800a3fc <_scanf_float+0x1d4>
 800a3de:	6822      	ldr	r2, [r4, #0]
 800a3e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a3e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a3e8:	d108      	bne.n	800a3fc <_scanf_float+0x1d4>
 800a3ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3ee:	6022      	str	r2, [r4, #0]
 800a3f0:	f04f 0a01 	mov.w	sl, #1
 800a3f4:	e7e4      	b.n	800a3c0 <_scanf_float+0x198>
 800a3f6:	f1ba 0f02 	cmp.w	sl, #2
 800a3fa:	d050      	beq.n	800a49e <_scanf_float+0x276>
 800a3fc:	2d01      	cmp	r5, #1
 800a3fe:	d002      	beq.n	800a406 <_scanf_float+0x1de>
 800a400:	2d04      	cmp	r5, #4
 800a402:	f47f af44 	bne.w	800a28e <_scanf_float+0x66>
 800a406:	3501      	adds	r5, #1
 800a408:	b2ed      	uxtb	r5, r5
 800a40a:	e7d9      	b.n	800a3c0 <_scanf_float+0x198>
 800a40c:	f1ba 0f01 	cmp.w	sl, #1
 800a410:	f47f af3d 	bne.w	800a28e <_scanf_float+0x66>
 800a414:	f04f 0a02 	mov.w	sl, #2
 800a418:	e7d2      	b.n	800a3c0 <_scanf_float+0x198>
 800a41a:	b975      	cbnz	r5, 800a43a <_scanf_float+0x212>
 800a41c:	2f00      	cmp	r7, #0
 800a41e:	f47f af37 	bne.w	800a290 <_scanf_float+0x68>
 800a422:	6822      	ldr	r2, [r4, #0]
 800a424:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a428:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a42c:	f040 8103 	bne.w	800a636 <_scanf_float+0x40e>
 800a430:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a434:	6022      	str	r2, [r4, #0]
 800a436:	2501      	movs	r5, #1
 800a438:	e7c2      	b.n	800a3c0 <_scanf_float+0x198>
 800a43a:	2d03      	cmp	r5, #3
 800a43c:	d0e3      	beq.n	800a406 <_scanf_float+0x1de>
 800a43e:	2d05      	cmp	r5, #5
 800a440:	e7df      	b.n	800a402 <_scanf_float+0x1da>
 800a442:	2d02      	cmp	r5, #2
 800a444:	f47f af23 	bne.w	800a28e <_scanf_float+0x66>
 800a448:	2503      	movs	r5, #3
 800a44a:	e7b9      	b.n	800a3c0 <_scanf_float+0x198>
 800a44c:	2d06      	cmp	r5, #6
 800a44e:	f47f af1e 	bne.w	800a28e <_scanf_float+0x66>
 800a452:	2507      	movs	r5, #7
 800a454:	e7b4      	b.n	800a3c0 <_scanf_float+0x198>
 800a456:	6822      	ldr	r2, [r4, #0]
 800a458:	0591      	lsls	r1, r2, #22
 800a45a:	f57f af18 	bpl.w	800a28e <_scanf_float+0x66>
 800a45e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a462:	6022      	str	r2, [r4, #0]
 800a464:	9702      	str	r7, [sp, #8]
 800a466:	e7ab      	b.n	800a3c0 <_scanf_float+0x198>
 800a468:	6822      	ldr	r2, [r4, #0]
 800a46a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a46e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a472:	d005      	beq.n	800a480 <_scanf_float+0x258>
 800a474:	0550      	lsls	r0, r2, #21
 800a476:	f57f af0a 	bpl.w	800a28e <_scanf_float+0x66>
 800a47a:	2f00      	cmp	r7, #0
 800a47c:	f000 80db 	beq.w	800a636 <_scanf_float+0x40e>
 800a480:	0591      	lsls	r1, r2, #22
 800a482:	bf58      	it	pl
 800a484:	9902      	ldrpl	r1, [sp, #8]
 800a486:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a48a:	bf58      	it	pl
 800a48c:	1a79      	subpl	r1, r7, r1
 800a48e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a492:	bf58      	it	pl
 800a494:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a498:	6022      	str	r2, [r4, #0]
 800a49a:	2700      	movs	r7, #0
 800a49c:	e790      	b.n	800a3c0 <_scanf_float+0x198>
 800a49e:	f04f 0a03 	mov.w	sl, #3
 800a4a2:	e78d      	b.n	800a3c0 <_scanf_float+0x198>
 800a4a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	4798      	blx	r3
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f43f aedf 	beq.w	800a272 <_scanf_float+0x4a>
 800a4b4:	e6eb      	b.n	800a28e <_scanf_float+0x66>
 800a4b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4be:	464a      	mov	r2, r9
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4798      	blx	r3
 800a4c4:	6923      	ldr	r3, [r4, #16]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	e6eb      	b.n	800a2a4 <_scanf_float+0x7c>
 800a4cc:	1e6b      	subs	r3, r5, #1
 800a4ce:	2b06      	cmp	r3, #6
 800a4d0:	d824      	bhi.n	800a51c <_scanf_float+0x2f4>
 800a4d2:	2d02      	cmp	r5, #2
 800a4d4:	d836      	bhi.n	800a544 <_scanf_float+0x31c>
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	429e      	cmp	r6, r3
 800a4da:	f67f aee7 	bls.w	800a2ac <_scanf_float+0x84>
 800a4de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4e6:	464a      	mov	r2, r9
 800a4e8:	4640      	mov	r0, r8
 800a4ea:	4798      	blx	r3
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	6123      	str	r3, [r4, #16]
 800a4f2:	e7f0      	b.n	800a4d6 <_scanf_float+0x2ae>
 800a4f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a4fc:	464a      	mov	r2, r9
 800a4fe:	4640      	mov	r0, r8
 800a500:	4798      	blx	r3
 800a502:	6923      	ldr	r3, [r4, #16]
 800a504:	3b01      	subs	r3, #1
 800a506:	6123      	str	r3, [r4, #16]
 800a508:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a50c:	fa5f fa8a 	uxtb.w	sl, sl
 800a510:	f1ba 0f02 	cmp.w	sl, #2
 800a514:	d1ee      	bne.n	800a4f4 <_scanf_float+0x2cc>
 800a516:	3d03      	subs	r5, #3
 800a518:	b2ed      	uxtb	r5, r5
 800a51a:	1b76      	subs	r6, r6, r5
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	05da      	lsls	r2, r3, #23
 800a520:	d530      	bpl.n	800a584 <_scanf_float+0x35c>
 800a522:	055b      	lsls	r3, r3, #21
 800a524:	d511      	bpl.n	800a54a <_scanf_float+0x322>
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	429e      	cmp	r6, r3
 800a52a:	f67f aebf 	bls.w	800a2ac <_scanf_float+0x84>
 800a52e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a536:	464a      	mov	r2, r9
 800a538:	4640      	mov	r0, r8
 800a53a:	4798      	blx	r3
 800a53c:	6923      	ldr	r3, [r4, #16]
 800a53e:	3b01      	subs	r3, #1
 800a540:	6123      	str	r3, [r4, #16]
 800a542:	e7f0      	b.n	800a526 <_scanf_float+0x2fe>
 800a544:	46aa      	mov	sl, r5
 800a546:	46b3      	mov	fp, r6
 800a548:	e7de      	b.n	800a508 <_scanf_float+0x2e0>
 800a54a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a54e:	6923      	ldr	r3, [r4, #16]
 800a550:	2965      	cmp	r1, #101	@ 0x65
 800a552:	f103 33ff 	add.w	r3, r3, #4294967295
 800a556:	f106 35ff 	add.w	r5, r6, #4294967295
 800a55a:	6123      	str	r3, [r4, #16]
 800a55c:	d00c      	beq.n	800a578 <_scanf_float+0x350>
 800a55e:	2945      	cmp	r1, #69	@ 0x45
 800a560:	d00a      	beq.n	800a578 <_scanf_float+0x350>
 800a562:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a566:	464a      	mov	r2, r9
 800a568:	4640      	mov	r0, r8
 800a56a:	4798      	blx	r3
 800a56c:	6923      	ldr	r3, [r4, #16]
 800a56e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a572:	3b01      	subs	r3, #1
 800a574:	1eb5      	subs	r5, r6, #2
 800a576:	6123      	str	r3, [r4, #16]
 800a578:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a57c:	464a      	mov	r2, r9
 800a57e:	4640      	mov	r0, r8
 800a580:	4798      	blx	r3
 800a582:	462e      	mov	r6, r5
 800a584:	6822      	ldr	r2, [r4, #0]
 800a586:	f012 0210 	ands.w	r2, r2, #16
 800a58a:	d001      	beq.n	800a590 <_scanf_float+0x368>
 800a58c:	2000      	movs	r0, #0
 800a58e:	e68e      	b.n	800a2ae <_scanf_float+0x86>
 800a590:	7032      	strb	r2, [r6, #0]
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a59c:	d125      	bne.n	800a5ea <_scanf_float+0x3c2>
 800a59e:	9b02      	ldr	r3, [sp, #8]
 800a5a0:	429f      	cmp	r7, r3
 800a5a2:	d00a      	beq.n	800a5ba <_scanf_float+0x392>
 800a5a4:	1bda      	subs	r2, r3, r7
 800a5a6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a5aa:	429e      	cmp	r6, r3
 800a5ac:	bf28      	it	cs
 800a5ae:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a5b2:	4922      	ldr	r1, [pc, #136]	@ (800a63c <_scanf_float+0x414>)
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f000 f977 	bl	800a8a8 <siprintf>
 800a5ba:	9901      	ldr	r1, [sp, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4640      	mov	r0, r8
 800a5c0:	f002 fd06 	bl	800cfd0 <_strtod_r>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	6821      	ldr	r1, [r4, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f011 0f02 	tst.w	r1, #2
 800a5ce:	ec57 6b10 	vmov	r6, r7, d0
 800a5d2:	f103 0204 	add.w	r2, r3, #4
 800a5d6:	d015      	beq.n	800a604 <_scanf_float+0x3dc>
 800a5d8:	9903      	ldr	r1, [sp, #12]
 800a5da:	600a      	str	r2, [r1, #0]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	e9c3 6700 	strd	r6, r7, [r3]
 800a5e2:	68e3      	ldr	r3, [r4, #12]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	60e3      	str	r3, [r4, #12]
 800a5e8:	e7d0      	b.n	800a58c <_scanf_float+0x364>
 800a5ea:	9b04      	ldr	r3, [sp, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0e4      	beq.n	800a5ba <_scanf_float+0x392>
 800a5f0:	9905      	ldr	r1, [sp, #20]
 800a5f2:	230a      	movs	r3, #10
 800a5f4:	3101      	adds	r1, #1
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	f002 fd6a 	bl	800d0d0 <_strtol_r>
 800a5fc:	9b04      	ldr	r3, [sp, #16]
 800a5fe:	9e05      	ldr	r6, [sp, #20]
 800a600:	1ac2      	subs	r2, r0, r3
 800a602:	e7d0      	b.n	800a5a6 <_scanf_float+0x37e>
 800a604:	f011 0f04 	tst.w	r1, #4
 800a608:	9903      	ldr	r1, [sp, #12]
 800a60a:	600a      	str	r2, [r1, #0]
 800a60c:	d1e6      	bne.n	800a5dc <_scanf_float+0x3b4>
 800a60e:	681d      	ldr	r5, [r3, #0]
 800a610:	4632      	mov	r2, r6
 800a612:	463b      	mov	r3, r7
 800a614:	4630      	mov	r0, r6
 800a616:	4639      	mov	r1, r7
 800a618:	f7f6 fa88 	bl	8000b2c <__aeabi_dcmpun>
 800a61c:	b128      	cbz	r0, 800a62a <_scanf_float+0x402>
 800a61e:	4808      	ldr	r0, [pc, #32]	@ (800a640 <_scanf_float+0x418>)
 800a620:	f000 faca 	bl	800abb8 <nanf>
 800a624:	ed85 0a00 	vstr	s0, [r5]
 800a628:	e7db      	b.n	800a5e2 <_scanf_float+0x3ba>
 800a62a:	4630      	mov	r0, r6
 800a62c:	4639      	mov	r1, r7
 800a62e:	f7f6 fadb 	bl	8000be8 <__aeabi_d2f>
 800a632:	6028      	str	r0, [r5, #0]
 800a634:	e7d5      	b.n	800a5e2 <_scanf_float+0x3ba>
 800a636:	2700      	movs	r7, #0
 800a638:	e62e      	b.n	800a298 <_scanf_float+0x70>
 800a63a:	bf00      	nop
 800a63c:	0800eaed 	.word	0x0800eaed
 800a640:	0800ec2e 	.word	0x0800ec2e

0800a644 <std>:
 800a644:	2300      	movs	r3, #0
 800a646:	b510      	push	{r4, lr}
 800a648:	4604      	mov	r4, r0
 800a64a:	e9c0 3300 	strd	r3, r3, [r0]
 800a64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a652:	6083      	str	r3, [r0, #8]
 800a654:	8181      	strh	r1, [r0, #12]
 800a656:	6643      	str	r3, [r0, #100]	@ 0x64
 800a658:	81c2      	strh	r2, [r0, #14]
 800a65a:	6183      	str	r3, [r0, #24]
 800a65c:	4619      	mov	r1, r3
 800a65e:	2208      	movs	r2, #8
 800a660:	305c      	adds	r0, #92	@ 0x5c
 800a662:	f000 fa1b 	bl	800aa9c <memset>
 800a666:	4b0d      	ldr	r3, [pc, #52]	@ (800a69c <std+0x58>)
 800a668:	6263      	str	r3, [r4, #36]	@ 0x24
 800a66a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a0 <std+0x5c>)
 800a66c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a66e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a4 <std+0x60>)
 800a670:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a672:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a8 <std+0x64>)
 800a674:	6323      	str	r3, [r4, #48]	@ 0x30
 800a676:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ac <std+0x68>)
 800a678:	6224      	str	r4, [r4, #32]
 800a67a:	429c      	cmp	r4, r3
 800a67c:	d006      	beq.n	800a68c <std+0x48>
 800a67e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a682:	4294      	cmp	r4, r2
 800a684:	d002      	beq.n	800a68c <std+0x48>
 800a686:	33d0      	adds	r3, #208	@ 0xd0
 800a688:	429c      	cmp	r4, r3
 800a68a:	d105      	bne.n	800a698 <std+0x54>
 800a68c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a694:	f000 ba7e 	b.w	800ab94 <__retarget_lock_init_recursive>
 800a698:	bd10      	pop	{r4, pc}
 800a69a:	bf00      	nop
 800a69c:	0800a8ed 	.word	0x0800a8ed
 800a6a0:	0800a90f 	.word	0x0800a90f
 800a6a4:	0800a947 	.word	0x0800a947
 800a6a8:	0800a96b 	.word	0x0800a96b
 800a6ac:	20000a00 	.word	0x20000a00

0800a6b0 <stdio_exit_handler>:
 800a6b0:	4a02      	ldr	r2, [pc, #8]	@ (800a6bc <stdio_exit_handler+0xc>)
 800a6b2:	4903      	ldr	r1, [pc, #12]	@ (800a6c0 <stdio_exit_handler+0x10>)
 800a6b4:	4803      	ldr	r0, [pc, #12]	@ (800a6c4 <stdio_exit_handler+0x14>)
 800a6b6:	f000 b869 	b.w	800a78c <_fwalk_sglue>
 800a6ba:	bf00      	nop
 800a6bc:	2000000c 	.word	0x2000000c
 800a6c0:	0800d711 	.word	0x0800d711
 800a6c4:	2000001c 	.word	0x2000001c

0800a6c8 <cleanup_stdio>:
 800a6c8:	6841      	ldr	r1, [r0, #4]
 800a6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a6fc <cleanup_stdio+0x34>)
 800a6cc:	4299      	cmp	r1, r3
 800a6ce:	b510      	push	{r4, lr}
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	d001      	beq.n	800a6d8 <cleanup_stdio+0x10>
 800a6d4:	f003 f81c 	bl	800d710 <_fflush_r>
 800a6d8:	68a1      	ldr	r1, [r4, #8]
 800a6da:	4b09      	ldr	r3, [pc, #36]	@ (800a700 <cleanup_stdio+0x38>)
 800a6dc:	4299      	cmp	r1, r3
 800a6de:	d002      	beq.n	800a6e6 <cleanup_stdio+0x1e>
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f003 f815 	bl	800d710 <_fflush_r>
 800a6e6:	68e1      	ldr	r1, [r4, #12]
 800a6e8:	4b06      	ldr	r3, [pc, #24]	@ (800a704 <cleanup_stdio+0x3c>)
 800a6ea:	4299      	cmp	r1, r3
 800a6ec:	d004      	beq.n	800a6f8 <cleanup_stdio+0x30>
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f4:	f003 b80c 	b.w	800d710 <_fflush_r>
 800a6f8:	bd10      	pop	{r4, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000a00 	.word	0x20000a00
 800a700:	20000a68 	.word	0x20000a68
 800a704:	20000ad0 	.word	0x20000ad0

0800a708 <global_stdio_init.part.0>:
 800a708:	b510      	push	{r4, lr}
 800a70a:	4b0b      	ldr	r3, [pc, #44]	@ (800a738 <global_stdio_init.part.0+0x30>)
 800a70c:	4c0b      	ldr	r4, [pc, #44]	@ (800a73c <global_stdio_init.part.0+0x34>)
 800a70e:	4a0c      	ldr	r2, [pc, #48]	@ (800a740 <global_stdio_init.part.0+0x38>)
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	4620      	mov	r0, r4
 800a714:	2200      	movs	r2, #0
 800a716:	2104      	movs	r1, #4
 800a718:	f7ff ff94 	bl	800a644 <std>
 800a71c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a720:	2201      	movs	r2, #1
 800a722:	2109      	movs	r1, #9
 800a724:	f7ff ff8e 	bl	800a644 <std>
 800a728:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a72c:	2202      	movs	r2, #2
 800a72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a732:	2112      	movs	r1, #18
 800a734:	f7ff bf86 	b.w	800a644 <std>
 800a738:	20000b38 	.word	0x20000b38
 800a73c:	20000a00 	.word	0x20000a00
 800a740:	0800a6b1 	.word	0x0800a6b1

0800a744 <__sfp_lock_acquire>:
 800a744:	4801      	ldr	r0, [pc, #4]	@ (800a74c <__sfp_lock_acquire+0x8>)
 800a746:	f000 ba26 	b.w	800ab96 <__retarget_lock_acquire_recursive>
 800a74a:	bf00      	nop
 800a74c:	20000b41 	.word	0x20000b41

0800a750 <__sfp_lock_release>:
 800a750:	4801      	ldr	r0, [pc, #4]	@ (800a758 <__sfp_lock_release+0x8>)
 800a752:	f000 ba21 	b.w	800ab98 <__retarget_lock_release_recursive>
 800a756:	bf00      	nop
 800a758:	20000b41 	.word	0x20000b41

0800a75c <__sinit>:
 800a75c:	b510      	push	{r4, lr}
 800a75e:	4604      	mov	r4, r0
 800a760:	f7ff fff0 	bl	800a744 <__sfp_lock_acquire>
 800a764:	6a23      	ldr	r3, [r4, #32]
 800a766:	b11b      	cbz	r3, 800a770 <__sinit+0x14>
 800a768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a76c:	f7ff bff0 	b.w	800a750 <__sfp_lock_release>
 800a770:	4b04      	ldr	r3, [pc, #16]	@ (800a784 <__sinit+0x28>)
 800a772:	6223      	str	r3, [r4, #32]
 800a774:	4b04      	ldr	r3, [pc, #16]	@ (800a788 <__sinit+0x2c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1f5      	bne.n	800a768 <__sinit+0xc>
 800a77c:	f7ff ffc4 	bl	800a708 <global_stdio_init.part.0>
 800a780:	e7f2      	b.n	800a768 <__sinit+0xc>
 800a782:	bf00      	nop
 800a784:	0800a6c9 	.word	0x0800a6c9
 800a788:	20000b38 	.word	0x20000b38

0800a78c <_fwalk_sglue>:
 800a78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a790:	4607      	mov	r7, r0
 800a792:	4688      	mov	r8, r1
 800a794:	4614      	mov	r4, r2
 800a796:	2600      	movs	r6, #0
 800a798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a79c:	f1b9 0901 	subs.w	r9, r9, #1
 800a7a0:	d505      	bpl.n	800a7ae <_fwalk_sglue+0x22>
 800a7a2:	6824      	ldr	r4, [r4, #0]
 800a7a4:	2c00      	cmp	r4, #0
 800a7a6:	d1f7      	bne.n	800a798 <_fwalk_sglue+0xc>
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ae:	89ab      	ldrh	r3, [r5, #12]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d907      	bls.n	800a7c4 <_fwalk_sglue+0x38>
 800a7b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	d003      	beq.n	800a7c4 <_fwalk_sglue+0x38>
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4638      	mov	r0, r7
 800a7c0:	47c0      	blx	r8
 800a7c2:	4306      	orrs	r6, r0
 800a7c4:	3568      	adds	r5, #104	@ 0x68
 800a7c6:	e7e9      	b.n	800a79c <_fwalk_sglue+0x10>

0800a7c8 <iprintf>:
 800a7c8:	b40f      	push	{r0, r1, r2, r3}
 800a7ca:	b507      	push	{r0, r1, r2, lr}
 800a7cc:	4906      	ldr	r1, [pc, #24]	@ (800a7e8 <iprintf+0x20>)
 800a7ce:	ab04      	add	r3, sp, #16
 800a7d0:	6808      	ldr	r0, [r1, #0]
 800a7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d6:	6881      	ldr	r1, [r0, #8]
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	f002 fdfd 	bl	800d3d8 <_vfiprintf_r>
 800a7de:	b003      	add	sp, #12
 800a7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7e4:	b004      	add	sp, #16
 800a7e6:	4770      	bx	lr
 800a7e8:	20000018 	.word	0x20000018

0800a7ec <_puts_r>:
 800a7ec:	6a03      	ldr	r3, [r0, #32]
 800a7ee:	b570      	push	{r4, r5, r6, lr}
 800a7f0:	6884      	ldr	r4, [r0, #8]
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	460e      	mov	r6, r1
 800a7f6:	b90b      	cbnz	r3, 800a7fc <_puts_r+0x10>
 800a7f8:	f7ff ffb0 	bl	800a75c <__sinit>
 800a7fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7fe:	07db      	lsls	r3, r3, #31
 800a800:	d405      	bmi.n	800a80e <_puts_r+0x22>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	0598      	lsls	r0, r3, #22
 800a806:	d402      	bmi.n	800a80e <_puts_r+0x22>
 800a808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a80a:	f000 f9c4 	bl	800ab96 <__retarget_lock_acquire_recursive>
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	0719      	lsls	r1, r3, #28
 800a812:	d502      	bpl.n	800a81a <_puts_r+0x2e>
 800a814:	6923      	ldr	r3, [r4, #16]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d135      	bne.n	800a886 <_puts_r+0x9a>
 800a81a:	4621      	mov	r1, r4
 800a81c:	4628      	mov	r0, r5
 800a81e:	f000 f8e7 	bl	800a9f0 <__swsetup_r>
 800a822:	b380      	cbz	r0, 800a886 <_puts_r+0x9a>
 800a824:	f04f 35ff 	mov.w	r5, #4294967295
 800a828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a82a:	07da      	lsls	r2, r3, #31
 800a82c:	d405      	bmi.n	800a83a <_puts_r+0x4e>
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	059b      	lsls	r3, r3, #22
 800a832:	d402      	bmi.n	800a83a <_puts_r+0x4e>
 800a834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a836:	f000 f9af 	bl	800ab98 <__retarget_lock_release_recursive>
 800a83a:	4628      	mov	r0, r5
 800a83c:	bd70      	pop	{r4, r5, r6, pc}
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da04      	bge.n	800a84c <_puts_r+0x60>
 800a842:	69a2      	ldr	r2, [r4, #24]
 800a844:	429a      	cmp	r2, r3
 800a846:	dc17      	bgt.n	800a878 <_puts_r+0x8c>
 800a848:	290a      	cmp	r1, #10
 800a84a:	d015      	beq.n	800a878 <_puts_r+0x8c>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	6022      	str	r2, [r4, #0]
 800a852:	7019      	strb	r1, [r3, #0]
 800a854:	68a3      	ldr	r3, [r4, #8]
 800a856:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a85a:	3b01      	subs	r3, #1
 800a85c:	60a3      	str	r3, [r4, #8]
 800a85e:	2900      	cmp	r1, #0
 800a860:	d1ed      	bne.n	800a83e <_puts_r+0x52>
 800a862:	2b00      	cmp	r3, #0
 800a864:	da11      	bge.n	800a88a <_puts_r+0x9e>
 800a866:	4622      	mov	r2, r4
 800a868:	210a      	movs	r1, #10
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 f881 	bl	800a972 <__swbuf_r>
 800a870:	3001      	adds	r0, #1
 800a872:	d0d7      	beq.n	800a824 <_puts_r+0x38>
 800a874:	250a      	movs	r5, #10
 800a876:	e7d7      	b.n	800a828 <_puts_r+0x3c>
 800a878:	4622      	mov	r2, r4
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f879 	bl	800a972 <__swbuf_r>
 800a880:	3001      	adds	r0, #1
 800a882:	d1e7      	bne.n	800a854 <_puts_r+0x68>
 800a884:	e7ce      	b.n	800a824 <_puts_r+0x38>
 800a886:	3e01      	subs	r6, #1
 800a888:	e7e4      	b.n	800a854 <_puts_r+0x68>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	1c5a      	adds	r2, r3, #1
 800a88e:	6022      	str	r2, [r4, #0]
 800a890:	220a      	movs	r2, #10
 800a892:	701a      	strb	r2, [r3, #0]
 800a894:	e7ee      	b.n	800a874 <_puts_r+0x88>
	...

0800a898 <puts>:
 800a898:	4b02      	ldr	r3, [pc, #8]	@ (800a8a4 <puts+0xc>)
 800a89a:	4601      	mov	r1, r0
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	f7ff bfa5 	b.w	800a7ec <_puts_r>
 800a8a2:	bf00      	nop
 800a8a4:	20000018 	.word	0x20000018

0800a8a8 <siprintf>:
 800a8a8:	b40e      	push	{r1, r2, r3}
 800a8aa:	b510      	push	{r4, lr}
 800a8ac:	b09d      	sub	sp, #116	@ 0x74
 800a8ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a8b0:	9002      	str	r0, [sp, #8]
 800a8b2:	9006      	str	r0, [sp, #24]
 800a8b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a8b8:	480a      	ldr	r0, [pc, #40]	@ (800a8e4 <siprintf+0x3c>)
 800a8ba:	9107      	str	r1, [sp, #28]
 800a8bc:	9104      	str	r1, [sp, #16]
 800a8be:	490a      	ldr	r1, [pc, #40]	@ (800a8e8 <siprintf+0x40>)
 800a8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c4:	9105      	str	r1, [sp, #20]
 800a8c6:	2400      	movs	r4, #0
 800a8c8:	a902      	add	r1, sp, #8
 800a8ca:	6800      	ldr	r0, [r0, #0]
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a8d0:	f002 fc5c 	bl	800d18c <_svfiprintf_r>
 800a8d4:	9b02      	ldr	r3, [sp, #8]
 800a8d6:	701c      	strb	r4, [r3, #0]
 800a8d8:	b01d      	add	sp, #116	@ 0x74
 800a8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8de:	b003      	add	sp, #12
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20000018 	.word	0x20000018
 800a8e8:	ffff0208 	.word	0xffff0208

0800a8ec <__sread>:
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f4:	f000 f900 	bl	800aaf8 <_read_r>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	bfab      	itete	ge
 800a8fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a900:	181b      	addge	r3, r3, r0
 800a902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a906:	bfac      	ite	ge
 800a908:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a90a:	81a3      	strhlt	r3, [r4, #12]
 800a90c:	bd10      	pop	{r4, pc}

0800a90e <__swrite>:
 800a90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a912:	461f      	mov	r7, r3
 800a914:	898b      	ldrh	r3, [r1, #12]
 800a916:	05db      	lsls	r3, r3, #23
 800a918:	4605      	mov	r5, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	4616      	mov	r6, r2
 800a91e:	d505      	bpl.n	800a92c <__swrite+0x1e>
 800a920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a924:	2302      	movs	r3, #2
 800a926:	2200      	movs	r2, #0
 800a928:	f000 f8d4 	bl	800aad4 <_lseek_r>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a936:	81a3      	strh	r3, [r4, #12]
 800a938:	4632      	mov	r2, r6
 800a93a:	463b      	mov	r3, r7
 800a93c:	4628      	mov	r0, r5
 800a93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a942:	f000 b8eb 	b.w	800ab1c <_write_r>

0800a946 <__sseek>:
 800a946:	b510      	push	{r4, lr}
 800a948:	460c      	mov	r4, r1
 800a94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94e:	f000 f8c1 	bl	800aad4 <_lseek_r>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	bf15      	itete	ne
 800a958:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a95a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a95e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a962:	81a3      	strheq	r3, [r4, #12]
 800a964:	bf18      	it	ne
 800a966:	81a3      	strhne	r3, [r4, #12]
 800a968:	bd10      	pop	{r4, pc}

0800a96a <__sclose>:
 800a96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96e:	f000 b8a1 	b.w	800aab4 <_close_r>

0800a972 <__swbuf_r>:
 800a972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a974:	460e      	mov	r6, r1
 800a976:	4614      	mov	r4, r2
 800a978:	4605      	mov	r5, r0
 800a97a:	b118      	cbz	r0, 800a984 <__swbuf_r+0x12>
 800a97c:	6a03      	ldr	r3, [r0, #32]
 800a97e:	b90b      	cbnz	r3, 800a984 <__swbuf_r+0x12>
 800a980:	f7ff feec 	bl	800a75c <__sinit>
 800a984:	69a3      	ldr	r3, [r4, #24]
 800a986:	60a3      	str	r3, [r4, #8]
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	071a      	lsls	r2, r3, #28
 800a98c:	d501      	bpl.n	800a992 <__swbuf_r+0x20>
 800a98e:	6923      	ldr	r3, [r4, #16]
 800a990:	b943      	cbnz	r3, 800a9a4 <__swbuf_r+0x32>
 800a992:	4621      	mov	r1, r4
 800a994:	4628      	mov	r0, r5
 800a996:	f000 f82b 	bl	800a9f0 <__swsetup_r>
 800a99a:	b118      	cbz	r0, 800a9a4 <__swbuf_r+0x32>
 800a99c:	f04f 37ff 	mov.w	r7, #4294967295
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	6922      	ldr	r2, [r4, #16]
 800a9a8:	1a98      	subs	r0, r3, r2
 800a9aa:	6963      	ldr	r3, [r4, #20]
 800a9ac:	b2f6      	uxtb	r6, r6
 800a9ae:	4283      	cmp	r3, r0
 800a9b0:	4637      	mov	r7, r6
 800a9b2:	dc05      	bgt.n	800a9c0 <__swbuf_r+0x4e>
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f002 feaa 	bl	800d710 <_fflush_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d1ed      	bne.n	800a99c <__swbuf_r+0x2a>
 800a9c0:	68a3      	ldr	r3, [r4, #8]
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	60a3      	str	r3, [r4, #8]
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	6022      	str	r2, [r4, #0]
 800a9cc:	701e      	strb	r6, [r3, #0]
 800a9ce:	6962      	ldr	r2, [r4, #20]
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d004      	beq.n	800a9e0 <__swbuf_r+0x6e>
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	07db      	lsls	r3, r3, #31
 800a9da:	d5e1      	bpl.n	800a9a0 <__swbuf_r+0x2e>
 800a9dc:	2e0a      	cmp	r6, #10
 800a9de:	d1df      	bne.n	800a9a0 <__swbuf_r+0x2e>
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f002 fe94 	bl	800d710 <_fflush_r>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d0d9      	beq.n	800a9a0 <__swbuf_r+0x2e>
 800a9ec:	e7d6      	b.n	800a99c <__swbuf_r+0x2a>
	...

0800a9f0 <__swsetup_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4b29      	ldr	r3, [pc, #164]	@ (800aa98 <__swsetup_r+0xa8>)
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	b118      	cbz	r0, 800aa04 <__swsetup_r+0x14>
 800a9fc:	6a03      	ldr	r3, [r0, #32]
 800a9fe:	b90b      	cbnz	r3, 800aa04 <__swsetup_r+0x14>
 800aa00:	f7ff feac 	bl	800a75c <__sinit>
 800aa04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa08:	0719      	lsls	r1, r3, #28
 800aa0a:	d422      	bmi.n	800aa52 <__swsetup_r+0x62>
 800aa0c:	06da      	lsls	r2, r3, #27
 800aa0e:	d407      	bmi.n	800aa20 <__swsetup_r+0x30>
 800aa10:	2209      	movs	r2, #9
 800aa12:	602a      	str	r2, [r5, #0]
 800aa14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1e:	e033      	b.n	800aa88 <__swsetup_r+0x98>
 800aa20:	0758      	lsls	r0, r3, #29
 800aa22:	d512      	bpl.n	800aa4a <__swsetup_r+0x5a>
 800aa24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa26:	b141      	cbz	r1, 800aa3a <__swsetup_r+0x4a>
 800aa28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	d002      	beq.n	800aa36 <__swsetup_r+0x46>
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 ff21 	bl	800b878 <_free_r>
 800aa36:	2300      	movs	r3, #0
 800aa38:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	2300      	movs	r3, #0
 800aa44:	6063      	str	r3, [r4, #4]
 800aa46:	6923      	ldr	r3, [r4, #16]
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	f043 0308 	orr.w	r3, r3, #8
 800aa50:	81a3      	strh	r3, [r4, #12]
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	b94b      	cbnz	r3, 800aa6a <__swsetup_r+0x7a>
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa60:	d003      	beq.n	800aa6a <__swsetup_r+0x7a>
 800aa62:	4621      	mov	r1, r4
 800aa64:	4628      	mov	r0, r5
 800aa66:	f002 fea1 	bl	800d7ac <__smakebuf_r>
 800aa6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6e:	f013 0201 	ands.w	r2, r3, #1
 800aa72:	d00a      	beq.n	800aa8a <__swsetup_r+0x9a>
 800aa74:	2200      	movs	r2, #0
 800aa76:	60a2      	str	r2, [r4, #8]
 800aa78:	6962      	ldr	r2, [r4, #20]
 800aa7a:	4252      	negs	r2, r2
 800aa7c:	61a2      	str	r2, [r4, #24]
 800aa7e:	6922      	ldr	r2, [r4, #16]
 800aa80:	b942      	cbnz	r2, 800aa94 <__swsetup_r+0xa4>
 800aa82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa86:	d1c5      	bne.n	800aa14 <__swsetup_r+0x24>
 800aa88:	bd38      	pop	{r3, r4, r5, pc}
 800aa8a:	0799      	lsls	r1, r3, #30
 800aa8c:	bf58      	it	pl
 800aa8e:	6962      	ldrpl	r2, [r4, #20]
 800aa90:	60a2      	str	r2, [r4, #8]
 800aa92:	e7f4      	b.n	800aa7e <__swsetup_r+0x8e>
 800aa94:	2000      	movs	r0, #0
 800aa96:	e7f7      	b.n	800aa88 <__swsetup_r+0x98>
 800aa98:	20000018 	.word	0x20000018

0800aa9c <memset>:
 800aa9c:	4402      	add	r2, r0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d100      	bne.n	800aaa6 <memset+0xa>
 800aaa4:	4770      	bx	lr
 800aaa6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaaa:	e7f9      	b.n	800aaa0 <memset+0x4>

0800aaac <_localeconv_r>:
 800aaac:	4800      	ldr	r0, [pc, #0]	@ (800aab0 <_localeconv_r+0x4>)
 800aaae:	4770      	bx	lr
 800aab0:	20000158 	.word	0x20000158

0800aab4 <_close_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4d06      	ldr	r5, [pc, #24]	@ (800aad0 <_close_r+0x1c>)
 800aab8:	2300      	movs	r3, #0
 800aaba:	4604      	mov	r4, r0
 800aabc:	4608      	mov	r0, r1
 800aabe:	602b      	str	r3, [r5, #0]
 800aac0:	f7f7 f840 	bl	8001b44 <_close>
 800aac4:	1c43      	adds	r3, r0, #1
 800aac6:	d102      	bne.n	800aace <_close_r+0x1a>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	b103      	cbz	r3, 800aace <_close_r+0x1a>
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	bd38      	pop	{r3, r4, r5, pc}
 800aad0:	20000b3c 	.word	0x20000b3c

0800aad4 <_lseek_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4d07      	ldr	r5, [pc, #28]	@ (800aaf4 <_lseek_r+0x20>)
 800aad8:	4604      	mov	r4, r0
 800aada:	4608      	mov	r0, r1
 800aadc:	4611      	mov	r1, r2
 800aade:	2200      	movs	r2, #0
 800aae0:	602a      	str	r2, [r5, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	f7f7 f855 	bl	8001b92 <_lseek>
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	d102      	bne.n	800aaf2 <_lseek_r+0x1e>
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	b103      	cbz	r3, 800aaf2 <_lseek_r+0x1e>
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}
 800aaf4:	20000b3c 	.word	0x20000b3c

0800aaf8 <_read_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d07      	ldr	r5, [pc, #28]	@ (800ab18 <_read_r+0x20>)
 800aafc:	4604      	mov	r4, r0
 800aafe:	4608      	mov	r0, r1
 800ab00:	4611      	mov	r1, r2
 800ab02:	2200      	movs	r2, #0
 800ab04:	602a      	str	r2, [r5, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	f7f6 ffff 	bl	8001b0a <_read>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_read_r+0x1e>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_read_r+0x1e>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	20000b3c 	.word	0x20000b3c

0800ab1c <_write_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4d07      	ldr	r5, [pc, #28]	@ (800ab3c <_write_r+0x20>)
 800ab20:	4604      	mov	r4, r0
 800ab22:	4608      	mov	r0, r1
 800ab24:	4611      	mov	r1, r2
 800ab26:	2200      	movs	r2, #0
 800ab28:	602a      	str	r2, [r5, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f7f6 fa78 	bl	8001020 <_write>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_write_r+0x1e>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_write_r+0x1e>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	20000b3c 	.word	0x20000b3c

0800ab40 <__errno>:
 800ab40:	4b01      	ldr	r3, [pc, #4]	@ (800ab48 <__errno+0x8>)
 800ab42:	6818      	ldr	r0, [r3, #0]
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	20000018 	.word	0x20000018

0800ab4c <__libc_init_array>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ab84 <__libc_init_array+0x38>)
 800ab50:	4c0d      	ldr	r4, [pc, #52]	@ (800ab88 <__libc_init_array+0x3c>)
 800ab52:	1b64      	subs	r4, r4, r5
 800ab54:	10a4      	asrs	r4, r4, #2
 800ab56:	2600      	movs	r6, #0
 800ab58:	42a6      	cmp	r6, r4
 800ab5a:	d109      	bne.n	800ab70 <__libc_init_array+0x24>
 800ab5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ab8c <__libc_init_array+0x40>)
 800ab5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ab90 <__libc_init_array+0x44>)
 800ab60:	f003 fae4 	bl	800e12c <_init>
 800ab64:	1b64      	subs	r4, r4, r5
 800ab66:	10a4      	asrs	r4, r4, #2
 800ab68:	2600      	movs	r6, #0
 800ab6a:	42a6      	cmp	r6, r4
 800ab6c:	d105      	bne.n	800ab7a <__libc_init_array+0x2e>
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}
 800ab70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab74:	4798      	blx	r3
 800ab76:	3601      	adds	r6, #1
 800ab78:	e7ee      	b.n	800ab58 <__libc_init_array+0xc>
 800ab7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab7e:	4798      	blx	r3
 800ab80:	3601      	adds	r6, #1
 800ab82:	e7f2      	b.n	800ab6a <__libc_init_array+0x1e>
 800ab84:	0800eeec 	.word	0x0800eeec
 800ab88:	0800eeec 	.word	0x0800eeec
 800ab8c:	0800eeec 	.word	0x0800eeec
 800ab90:	0800eef0 	.word	0x0800eef0

0800ab94 <__retarget_lock_init_recursive>:
 800ab94:	4770      	bx	lr

0800ab96 <__retarget_lock_acquire_recursive>:
 800ab96:	4770      	bx	lr

0800ab98 <__retarget_lock_release_recursive>:
 800ab98:	4770      	bx	lr

0800ab9a <memcpy>:
 800ab9a:	440a      	add	r2, r1
 800ab9c:	4291      	cmp	r1, r2
 800ab9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800aba2:	d100      	bne.n	800aba6 <memcpy+0xc>
 800aba4:	4770      	bx	lr
 800aba6:	b510      	push	{r4, lr}
 800aba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abb0:	4291      	cmp	r1, r2
 800abb2:	d1f9      	bne.n	800aba8 <memcpy+0xe>
 800abb4:	bd10      	pop	{r4, pc}
	...

0800abb8 <nanf>:
 800abb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800abc0 <nanf+0x8>
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	7fc00000 	.word	0x7fc00000

0800abc4 <quorem>:
 800abc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc8:	6903      	ldr	r3, [r0, #16]
 800abca:	690c      	ldr	r4, [r1, #16]
 800abcc:	42a3      	cmp	r3, r4
 800abce:	4607      	mov	r7, r0
 800abd0:	db7e      	blt.n	800acd0 <quorem+0x10c>
 800abd2:	3c01      	subs	r4, #1
 800abd4:	f101 0814 	add.w	r8, r1, #20
 800abd8:	00a3      	lsls	r3, r4, #2
 800abda:	f100 0514 	add.w	r5, r0, #20
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abee:	3301      	adds	r3, #1
 800abf0:	429a      	cmp	r2, r3
 800abf2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abf6:	fbb2 f6f3 	udiv	r6, r2, r3
 800abfa:	d32e      	bcc.n	800ac5a <quorem+0x96>
 800abfc:	f04f 0a00 	mov.w	sl, #0
 800ac00:	46c4      	mov	ip, r8
 800ac02:	46ae      	mov	lr, r5
 800ac04:	46d3      	mov	fp, sl
 800ac06:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac0a:	b298      	uxth	r0, r3
 800ac0c:	fb06 a000 	mla	r0, r6, r0, sl
 800ac10:	0c02      	lsrs	r2, r0, #16
 800ac12:	0c1b      	lsrs	r3, r3, #16
 800ac14:	fb06 2303 	mla	r3, r6, r3, r2
 800ac18:	f8de 2000 	ldr.w	r2, [lr]
 800ac1c:	b280      	uxth	r0, r0
 800ac1e:	b292      	uxth	r2, r2
 800ac20:	1a12      	subs	r2, r2, r0
 800ac22:	445a      	add	r2, fp
 800ac24:	f8de 0000 	ldr.w	r0, [lr]
 800ac28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac36:	b292      	uxth	r2, r2
 800ac38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac3c:	45e1      	cmp	r9, ip
 800ac3e:	f84e 2b04 	str.w	r2, [lr], #4
 800ac42:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac46:	d2de      	bcs.n	800ac06 <quorem+0x42>
 800ac48:	9b00      	ldr	r3, [sp, #0]
 800ac4a:	58eb      	ldr	r3, [r5, r3]
 800ac4c:	b92b      	cbnz	r3, 800ac5a <quorem+0x96>
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	3b04      	subs	r3, #4
 800ac52:	429d      	cmp	r5, r3
 800ac54:	461a      	mov	r2, r3
 800ac56:	d32f      	bcc.n	800acb8 <quorem+0xf4>
 800ac58:	613c      	str	r4, [r7, #16]
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	f001 f9c8 	bl	800bff0 <__mcmp>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	db25      	blt.n	800acb0 <quorem+0xec>
 800ac64:	4629      	mov	r1, r5
 800ac66:	2000      	movs	r0, #0
 800ac68:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac6c:	f8d1 c000 	ldr.w	ip, [r1]
 800ac70:	fa1f fe82 	uxth.w	lr, r2
 800ac74:	fa1f f38c 	uxth.w	r3, ip
 800ac78:	eba3 030e 	sub.w	r3, r3, lr
 800ac7c:	4403      	add	r3, r0
 800ac7e:	0c12      	lsrs	r2, r2, #16
 800ac80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac8e:	45c1      	cmp	r9, r8
 800ac90:	f841 3b04 	str.w	r3, [r1], #4
 800ac94:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac98:	d2e6      	bcs.n	800ac68 <quorem+0xa4>
 800ac9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aca2:	b922      	cbnz	r2, 800acae <quorem+0xea>
 800aca4:	3b04      	subs	r3, #4
 800aca6:	429d      	cmp	r5, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	d30b      	bcc.n	800acc4 <quorem+0x100>
 800acac:	613c      	str	r4, [r7, #16]
 800acae:	3601      	adds	r6, #1
 800acb0:	4630      	mov	r0, r6
 800acb2:	b003      	add	sp, #12
 800acb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb8:	6812      	ldr	r2, [r2, #0]
 800acba:	3b04      	subs	r3, #4
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	d1cb      	bne.n	800ac58 <quorem+0x94>
 800acc0:	3c01      	subs	r4, #1
 800acc2:	e7c6      	b.n	800ac52 <quorem+0x8e>
 800acc4:	6812      	ldr	r2, [r2, #0]
 800acc6:	3b04      	subs	r3, #4
 800acc8:	2a00      	cmp	r2, #0
 800acca:	d1ef      	bne.n	800acac <quorem+0xe8>
 800accc:	3c01      	subs	r4, #1
 800acce:	e7ea      	b.n	800aca6 <quorem+0xe2>
 800acd0:	2000      	movs	r0, #0
 800acd2:	e7ee      	b.n	800acb2 <quorem+0xee>
 800acd4:	0000      	movs	r0, r0
	...

0800acd8 <_dtoa_r>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	69c7      	ldr	r7, [r0, #28]
 800acde:	b097      	sub	sp, #92	@ 0x5c
 800ace0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ace4:	ec55 4b10 	vmov	r4, r5, d0
 800ace8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800acea:	9107      	str	r1, [sp, #28]
 800acec:	4681      	mov	r9, r0
 800acee:	920c      	str	r2, [sp, #48]	@ 0x30
 800acf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800acf2:	b97f      	cbnz	r7, 800ad14 <_dtoa_r+0x3c>
 800acf4:	2010      	movs	r0, #16
 800acf6:	f000 fe09 	bl	800b90c <malloc>
 800acfa:	4602      	mov	r2, r0
 800acfc:	f8c9 001c 	str.w	r0, [r9, #28]
 800ad00:	b920      	cbnz	r0, 800ad0c <_dtoa_r+0x34>
 800ad02:	4ba9      	ldr	r3, [pc, #676]	@ (800afa8 <_dtoa_r+0x2d0>)
 800ad04:	21ef      	movs	r1, #239	@ 0xef
 800ad06:	48a9      	ldr	r0, [pc, #676]	@ (800afac <_dtoa_r+0x2d4>)
 800ad08:	f002 fdf2 	bl	800d8f0 <__assert_func>
 800ad0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ad10:	6007      	str	r7, [r0, #0]
 800ad12:	60c7      	str	r7, [r0, #12]
 800ad14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad18:	6819      	ldr	r1, [r3, #0]
 800ad1a:	b159      	cbz	r1, 800ad34 <_dtoa_r+0x5c>
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	604a      	str	r2, [r1, #4]
 800ad20:	2301      	movs	r3, #1
 800ad22:	4093      	lsls	r3, r2
 800ad24:	608b      	str	r3, [r1, #8]
 800ad26:	4648      	mov	r0, r9
 800ad28:	f000 fee6 	bl	800baf8 <_Bfree>
 800ad2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad30:	2200      	movs	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	1e2b      	subs	r3, r5, #0
 800ad36:	bfb9      	ittee	lt
 800ad38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad3c:	9305      	strlt	r3, [sp, #20]
 800ad3e:	2300      	movge	r3, #0
 800ad40:	6033      	strge	r3, [r6, #0]
 800ad42:	9f05      	ldr	r7, [sp, #20]
 800ad44:	4b9a      	ldr	r3, [pc, #616]	@ (800afb0 <_dtoa_r+0x2d8>)
 800ad46:	bfbc      	itt	lt
 800ad48:	2201      	movlt	r2, #1
 800ad4a:	6032      	strlt	r2, [r6, #0]
 800ad4c:	43bb      	bics	r3, r7
 800ad4e:	d112      	bne.n	800ad76 <_dtoa_r+0x9e>
 800ad50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad52:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad56:	6013      	str	r3, [r2, #0]
 800ad58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad5c:	4323      	orrs	r3, r4
 800ad5e:	f000 855a 	beq.w	800b816 <_dtoa_r+0xb3e>
 800ad62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad64:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800afc4 <_dtoa_r+0x2ec>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f000 855c 	beq.w	800b826 <_dtoa_r+0xb4e>
 800ad6e:	f10a 0303 	add.w	r3, sl, #3
 800ad72:	f000 bd56 	b.w	800b822 <_dtoa_r+0xb4a>
 800ad76:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	ec51 0b17 	vmov	r0, r1, d7
 800ad80:	2300      	movs	r3, #0
 800ad82:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ad86:	f7f5 fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	b158      	cbz	r0, 800ada6 <_dtoa_r+0xce>
 800ad8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad90:	2301      	movs	r3, #1
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad96:	b113      	cbz	r3, 800ad9e <_dtoa_r+0xc6>
 800ad98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ad9a:	4b86      	ldr	r3, [pc, #536]	@ (800afb4 <_dtoa_r+0x2dc>)
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800afc8 <_dtoa_r+0x2f0>
 800ada2:	f000 bd40 	b.w	800b826 <_dtoa_r+0xb4e>
 800ada6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800adaa:	aa14      	add	r2, sp, #80	@ 0x50
 800adac:	a915      	add	r1, sp, #84	@ 0x54
 800adae:	4648      	mov	r0, r9
 800adb0:	f001 fa3e 	bl	800c230 <__d2b>
 800adb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800adb8:	9002      	str	r0, [sp, #8]
 800adba:	2e00      	cmp	r6, #0
 800adbc:	d078      	beq.n	800aeb0 <_dtoa_r+0x1d8>
 800adbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adc0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800adc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800add0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800add4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800add8:	4619      	mov	r1, r3
 800adda:	2200      	movs	r2, #0
 800addc:	4b76      	ldr	r3, [pc, #472]	@ (800afb8 <_dtoa_r+0x2e0>)
 800adde:	f7f5 fa53 	bl	8000288 <__aeabi_dsub>
 800ade2:	a36b      	add	r3, pc, #428	@ (adr r3, 800af90 <_dtoa_r+0x2b8>)
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f7f5 fc06 	bl	80005f8 <__aeabi_dmul>
 800adec:	a36a      	add	r3, pc, #424	@ (adr r3, 800af98 <_dtoa_r+0x2c0>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	f7f5 fa4b 	bl	800028c <__adddf3>
 800adf6:	4604      	mov	r4, r0
 800adf8:	4630      	mov	r0, r6
 800adfa:	460d      	mov	r5, r1
 800adfc:	f7f5 fb92 	bl	8000524 <__aeabi_i2d>
 800ae00:	a367      	add	r3, pc, #412	@ (adr r3, 800afa0 <_dtoa_r+0x2c8>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	f7f5 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4620      	mov	r0, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7f5 fa3b 	bl	800028c <__adddf3>
 800ae16:	4604      	mov	r4, r0
 800ae18:	460d      	mov	r5, r1
 800ae1a:	f7f5 fe9d 	bl	8000b58 <__aeabi_d2iz>
 800ae1e:	2200      	movs	r2, #0
 800ae20:	4607      	mov	r7, r0
 800ae22:	2300      	movs	r3, #0
 800ae24:	4620      	mov	r0, r4
 800ae26:	4629      	mov	r1, r5
 800ae28:	f7f5 fe58 	bl	8000adc <__aeabi_dcmplt>
 800ae2c:	b140      	cbz	r0, 800ae40 <_dtoa_r+0x168>
 800ae2e:	4638      	mov	r0, r7
 800ae30:	f7f5 fb78 	bl	8000524 <__aeabi_i2d>
 800ae34:	4622      	mov	r2, r4
 800ae36:	462b      	mov	r3, r5
 800ae38:	f7f5 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae3c:	b900      	cbnz	r0, 800ae40 <_dtoa_r+0x168>
 800ae3e:	3f01      	subs	r7, #1
 800ae40:	2f16      	cmp	r7, #22
 800ae42:	d852      	bhi.n	800aeea <_dtoa_r+0x212>
 800ae44:	4b5d      	ldr	r3, [pc, #372]	@ (800afbc <_dtoa_r+0x2e4>)
 800ae46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae52:	f7f5 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d049      	beq.n	800aeee <_dtoa_r+0x216>
 800ae5a:	3f01      	subs	r7, #1
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae62:	1b9b      	subs	r3, r3, r6
 800ae64:	1e5a      	subs	r2, r3, #1
 800ae66:	bf45      	ittet	mi
 800ae68:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae6c:	9300      	strmi	r3, [sp, #0]
 800ae6e:	2300      	movpl	r3, #0
 800ae70:	2300      	movmi	r3, #0
 800ae72:	9206      	str	r2, [sp, #24]
 800ae74:	bf54      	ite	pl
 800ae76:	9300      	strpl	r3, [sp, #0]
 800ae78:	9306      	strmi	r3, [sp, #24]
 800ae7a:	2f00      	cmp	r7, #0
 800ae7c:	db39      	blt.n	800aef2 <_dtoa_r+0x21a>
 800ae7e:	9b06      	ldr	r3, [sp, #24]
 800ae80:	970d      	str	r7, [sp, #52]	@ 0x34
 800ae82:	443b      	add	r3, r7
 800ae84:	9306      	str	r3, [sp, #24]
 800ae86:	2300      	movs	r3, #0
 800ae88:	9308      	str	r3, [sp, #32]
 800ae8a:	9b07      	ldr	r3, [sp, #28]
 800ae8c:	2b09      	cmp	r3, #9
 800ae8e:	d863      	bhi.n	800af58 <_dtoa_r+0x280>
 800ae90:	2b05      	cmp	r3, #5
 800ae92:	bfc4      	itt	gt
 800ae94:	3b04      	subgt	r3, #4
 800ae96:	9307      	strgt	r3, [sp, #28]
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	f1a3 0302 	sub.w	r3, r3, #2
 800ae9e:	bfcc      	ite	gt
 800aea0:	2400      	movgt	r4, #0
 800aea2:	2401      	movle	r4, #1
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d863      	bhi.n	800af70 <_dtoa_r+0x298>
 800aea8:	e8df f003 	tbb	[pc, r3]
 800aeac:	2b375452 	.word	0x2b375452
 800aeb0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aeb4:	441e      	add	r6, r3
 800aeb6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aeba:	2b20      	cmp	r3, #32
 800aebc:	bfc1      	itttt	gt
 800aebe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aec2:	409f      	lslgt	r7, r3
 800aec4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aec8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aecc:	bfd6      	itet	le
 800aece:	f1c3 0320 	rsble	r3, r3, #32
 800aed2:	ea47 0003 	orrgt.w	r0, r7, r3
 800aed6:	fa04 f003 	lslle.w	r0, r4, r3
 800aeda:	f7f5 fb13 	bl	8000504 <__aeabi_ui2d>
 800aede:	2201      	movs	r2, #1
 800aee0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aee4:	3e01      	subs	r6, #1
 800aee6:	9212      	str	r2, [sp, #72]	@ 0x48
 800aee8:	e776      	b.n	800add8 <_dtoa_r+0x100>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e7b7      	b.n	800ae5e <_dtoa_r+0x186>
 800aeee:	9010      	str	r0, [sp, #64]	@ 0x40
 800aef0:	e7b6      	b.n	800ae60 <_dtoa_r+0x188>
 800aef2:	9b00      	ldr	r3, [sp, #0]
 800aef4:	1bdb      	subs	r3, r3, r7
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	427b      	negs	r3, r7
 800aefa:	9308      	str	r3, [sp, #32]
 800aefc:	2300      	movs	r3, #0
 800aefe:	930d      	str	r3, [sp, #52]	@ 0x34
 800af00:	e7c3      	b.n	800ae8a <_dtoa_r+0x1b2>
 800af02:	2301      	movs	r3, #1
 800af04:	9309      	str	r3, [sp, #36]	@ 0x24
 800af06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af08:	eb07 0b03 	add.w	fp, r7, r3
 800af0c:	f10b 0301 	add.w	r3, fp, #1
 800af10:	2b01      	cmp	r3, #1
 800af12:	9303      	str	r3, [sp, #12]
 800af14:	bfb8      	it	lt
 800af16:	2301      	movlt	r3, #1
 800af18:	e006      	b.n	800af28 <_dtoa_r+0x250>
 800af1a:	2301      	movs	r3, #1
 800af1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd28      	ble.n	800af76 <_dtoa_r+0x29e>
 800af24:	469b      	mov	fp, r3
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800af2c:	2100      	movs	r1, #0
 800af2e:	2204      	movs	r2, #4
 800af30:	f102 0514 	add.w	r5, r2, #20
 800af34:	429d      	cmp	r5, r3
 800af36:	d926      	bls.n	800af86 <_dtoa_r+0x2ae>
 800af38:	6041      	str	r1, [r0, #4]
 800af3a:	4648      	mov	r0, r9
 800af3c:	f000 fd9c 	bl	800ba78 <_Balloc>
 800af40:	4682      	mov	sl, r0
 800af42:	2800      	cmp	r0, #0
 800af44:	d142      	bne.n	800afcc <_dtoa_r+0x2f4>
 800af46:	4b1e      	ldr	r3, [pc, #120]	@ (800afc0 <_dtoa_r+0x2e8>)
 800af48:	4602      	mov	r2, r0
 800af4a:	f240 11af 	movw	r1, #431	@ 0x1af
 800af4e:	e6da      	b.n	800ad06 <_dtoa_r+0x2e>
 800af50:	2300      	movs	r3, #0
 800af52:	e7e3      	b.n	800af1c <_dtoa_r+0x244>
 800af54:	2300      	movs	r3, #0
 800af56:	e7d5      	b.n	800af04 <_dtoa_r+0x22c>
 800af58:	2401      	movs	r4, #1
 800af5a:	2300      	movs	r3, #0
 800af5c:	9307      	str	r3, [sp, #28]
 800af5e:	9409      	str	r4, [sp, #36]	@ 0x24
 800af60:	f04f 3bff 	mov.w	fp, #4294967295
 800af64:	2200      	movs	r2, #0
 800af66:	f8cd b00c 	str.w	fp, [sp, #12]
 800af6a:	2312      	movs	r3, #18
 800af6c:	920c      	str	r2, [sp, #48]	@ 0x30
 800af6e:	e7db      	b.n	800af28 <_dtoa_r+0x250>
 800af70:	2301      	movs	r3, #1
 800af72:	9309      	str	r3, [sp, #36]	@ 0x24
 800af74:	e7f4      	b.n	800af60 <_dtoa_r+0x288>
 800af76:	f04f 0b01 	mov.w	fp, #1
 800af7a:	f8cd b00c 	str.w	fp, [sp, #12]
 800af7e:	465b      	mov	r3, fp
 800af80:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800af84:	e7d0      	b.n	800af28 <_dtoa_r+0x250>
 800af86:	3101      	adds	r1, #1
 800af88:	0052      	lsls	r2, r2, #1
 800af8a:	e7d1      	b.n	800af30 <_dtoa_r+0x258>
 800af8c:	f3af 8000 	nop.w
 800af90:	636f4361 	.word	0x636f4361
 800af94:	3fd287a7 	.word	0x3fd287a7
 800af98:	8b60c8b3 	.word	0x8b60c8b3
 800af9c:	3fc68a28 	.word	0x3fc68a28
 800afa0:	509f79fb 	.word	0x509f79fb
 800afa4:	3fd34413 	.word	0x3fd34413
 800afa8:	0800eaff 	.word	0x0800eaff
 800afac:	0800eb16 	.word	0x0800eb16
 800afb0:	7ff00000 	.word	0x7ff00000
 800afb4:	0800eaca 	.word	0x0800eaca
 800afb8:	3ff80000 	.word	0x3ff80000
 800afbc:	0800ecc8 	.word	0x0800ecc8
 800afc0:	0800eb6e 	.word	0x0800eb6e
 800afc4:	0800eafb 	.word	0x0800eafb
 800afc8:	0800eac9 	.word	0x0800eac9
 800afcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800afd0:	6018      	str	r0, [r3, #0]
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	2b0e      	cmp	r3, #14
 800afd6:	f200 80a1 	bhi.w	800b11c <_dtoa_r+0x444>
 800afda:	2c00      	cmp	r4, #0
 800afdc:	f000 809e 	beq.w	800b11c <_dtoa_r+0x444>
 800afe0:	2f00      	cmp	r7, #0
 800afe2:	dd33      	ble.n	800b04c <_dtoa_r+0x374>
 800afe4:	4b9c      	ldr	r3, [pc, #624]	@ (800b258 <_dtoa_r+0x580>)
 800afe6:	f007 020f 	and.w	r2, r7, #15
 800afea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afee:	ed93 7b00 	vldr	d7, [r3]
 800aff2:	05f8      	lsls	r0, r7, #23
 800aff4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800aff8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800affc:	d516      	bpl.n	800b02c <_dtoa_r+0x354>
 800affe:	4b97      	ldr	r3, [pc, #604]	@ (800b25c <_dtoa_r+0x584>)
 800b000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b004:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b008:	f7f5 fc20 	bl	800084c <__aeabi_ddiv>
 800b00c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b010:	f004 040f 	and.w	r4, r4, #15
 800b014:	2603      	movs	r6, #3
 800b016:	4d91      	ldr	r5, [pc, #580]	@ (800b25c <_dtoa_r+0x584>)
 800b018:	b954      	cbnz	r4, 800b030 <_dtoa_r+0x358>
 800b01a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b01e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b022:	f7f5 fc13 	bl	800084c <__aeabi_ddiv>
 800b026:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b02a:	e028      	b.n	800b07e <_dtoa_r+0x3a6>
 800b02c:	2602      	movs	r6, #2
 800b02e:	e7f2      	b.n	800b016 <_dtoa_r+0x33e>
 800b030:	07e1      	lsls	r1, r4, #31
 800b032:	d508      	bpl.n	800b046 <_dtoa_r+0x36e>
 800b034:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b038:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b03c:	f7f5 fadc 	bl	80005f8 <__aeabi_dmul>
 800b040:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b044:	3601      	adds	r6, #1
 800b046:	1064      	asrs	r4, r4, #1
 800b048:	3508      	adds	r5, #8
 800b04a:	e7e5      	b.n	800b018 <_dtoa_r+0x340>
 800b04c:	f000 80af 	beq.w	800b1ae <_dtoa_r+0x4d6>
 800b050:	427c      	negs	r4, r7
 800b052:	4b81      	ldr	r3, [pc, #516]	@ (800b258 <_dtoa_r+0x580>)
 800b054:	4d81      	ldr	r5, [pc, #516]	@ (800b25c <_dtoa_r+0x584>)
 800b056:	f004 020f 	and.w	r2, r4, #15
 800b05a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b066:	f7f5 fac7 	bl	80005f8 <__aeabi_dmul>
 800b06a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b06e:	1124      	asrs	r4, r4, #4
 800b070:	2300      	movs	r3, #0
 800b072:	2602      	movs	r6, #2
 800b074:	2c00      	cmp	r4, #0
 800b076:	f040 808f 	bne.w	800b198 <_dtoa_r+0x4c0>
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1d3      	bne.n	800b026 <_dtoa_r+0x34e>
 800b07e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b080:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 8094 	beq.w	800b1b2 <_dtoa_r+0x4da>
 800b08a:	4b75      	ldr	r3, [pc, #468]	@ (800b260 <_dtoa_r+0x588>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 fd23 	bl	8000adc <__aeabi_dcmplt>
 800b096:	2800      	cmp	r0, #0
 800b098:	f000 808b 	beq.w	800b1b2 <_dtoa_r+0x4da>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 8087 	beq.w	800b1b2 <_dtoa_r+0x4da>
 800b0a4:	f1bb 0f00 	cmp.w	fp, #0
 800b0a8:	dd34      	ble.n	800b114 <_dtoa_r+0x43c>
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	4b6d      	ldr	r3, [pc, #436]	@ (800b264 <_dtoa_r+0x58c>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	f7f5 faa1 	bl	80005f8 <__aeabi_dmul>
 800b0b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800b0be:	3601      	adds	r6, #1
 800b0c0:	465c      	mov	r4, fp
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f7f5 fa2e 	bl	8000524 <__aeabi_i2d>
 800b0c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0cc:	f7f5 fa94 	bl	80005f8 <__aeabi_dmul>
 800b0d0:	4b65      	ldr	r3, [pc, #404]	@ (800b268 <_dtoa_r+0x590>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f7f5 f8da 	bl	800028c <__adddf3>
 800b0d8:	4605      	mov	r5, r0
 800b0da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b0de:	2c00      	cmp	r4, #0
 800b0e0:	d16a      	bne.n	800b1b8 <_dtoa_r+0x4e0>
 800b0e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0e6:	4b61      	ldr	r3, [pc, #388]	@ (800b26c <_dtoa_r+0x594>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f7f5 f8cd 	bl	8000288 <__aeabi_dsub>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4633      	mov	r3, r6
 800b0fa:	f7f5 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	f040 8298 	bne.w	800b634 <_dtoa_r+0x95c>
 800b104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b108:	462a      	mov	r2, r5
 800b10a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b10e:	f7f5 fce5 	bl	8000adc <__aeabi_dcmplt>
 800b112:	bb38      	cbnz	r0, 800b164 <_dtoa_r+0x48c>
 800b114:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b118:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b11c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f2c0 8157 	blt.w	800b3d2 <_dtoa_r+0x6fa>
 800b124:	2f0e      	cmp	r7, #14
 800b126:	f300 8154 	bgt.w	800b3d2 <_dtoa_r+0x6fa>
 800b12a:	4b4b      	ldr	r3, [pc, #300]	@ (800b258 <_dtoa_r+0x580>)
 800b12c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b130:	ed93 7b00 	vldr	d7, [r3]
 800b134:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b136:	2b00      	cmp	r3, #0
 800b138:	ed8d 7b00 	vstr	d7, [sp]
 800b13c:	f280 80e5 	bge.w	800b30a <_dtoa_r+0x632>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	f300 80e1 	bgt.w	800b30a <_dtoa_r+0x632>
 800b148:	d10c      	bne.n	800b164 <_dtoa_r+0x48c>
 800b14a:	4b48      	ldr	r3, [pc, #288]	@ (800b26c <_dtoa_r+0x594>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	ec51 0b17 	vmov	r0, r1, d7
 800b152:	f7f5 fa51 	bl	80005f8 <__aeabi_dmul>
 800b156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b15a:	f7f5 fcd3 	bl	8000b04 <__aeabi_dcmpge>
 800b15e:	2800      	cmp	r0, #0
 800b160:	f000 8266 	beq.w	800b630 <_dtoa_r+0x958>
 800b164:	2400      	movs	r4, #0
 800b166:	4625      	mov	r5, r4
 800b168:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b16a:	4656      	mov	r6, sl
 800b16c:	ea6f 0803 	mvn.w	r8, r3
 800b170:	2700      	movs	r7, #0
 800b172:	4621      	mov	r1, r4
 800b174:	4648      	mov	r0, r9
 800b176:	f000 fcbf 	bl	800baf8 <_Bfree>
 800b17a:	2d00      	cmp	r5, #0
 800b17c:	f000 80bd 	beq.w	800b2fa <_dtoa_r+0x622>
 800b180:	b12f      	cbz	r7, 800b18e <_dtoa_r+0x4b6>
 800b182:	42af      	cmp	r7, r5
 800b184:	d003      	beq.n	800b18e <_dtoa_r+0x4b6>
 800b186:	4639      	mov	r1, r7
 800b188:	4648      	mov	r0, r9
 800b18a:	f000 fcb5 	bl	800baf8 <_Bfree>
 800b18e:	4629      	mov	r1, r5
 800b190:	4648      	mov	r0, r9
 800b192:	f000 fcb1 	bl	800baf8 <_Bfree>
 800b196:	e0b0      	b.n	800b2fa <_dtoa_r+0x622>
 800b198:	07e2      	lsls	r2, r4, #31
 800b19a:	d505      	bpl.n	800b1a8 <_dtoa_r+0x4d0>
 800b19c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1a0:	f7f5 fa2a 	bl	80005f8 <__aeabi_dmul>
 800b1a4:	3601      	adds	r6, #1
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	1064      	asrs	r4, r4, #1
 800b1aa:	3508      	adds	r5, #8
 800b1ac:	e762      	b.n	800b074 <_dtoa_r+0x39c>
 800b1ae:	2602      	movs	r6, #2
 800b1b0:	e765      	b.n	800b07e <_dtoa_r+0x3a6>
 800b1b2:	9c03      	ldr	r4, [sp, #12]
 800b1b4:	46b8      	mov	r8, r7
 800b1b6:	e784      	b.n	800b0c2 <_dtoa_r+0x3ea>
 800b1b8:	4b27      	ldr	r3, [pc, #156]	@ (800b258 <_dtoa_r+0x580>)
 800b1ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1c4:	4454      	add	r4, sl
 800b1c6:	2900      	cmp	r1, #0
 800b1c8:	d054      	beq.n	800b274 <_dtoa_r+0x59c>
 800b1ca:	4929      	ldr	r1, [pc, #164]	@ (800b270 <_dtoa_r+0x598>)
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	f7f5 fb3d 	bl	800084c <__aeabi_ddiv>
 800b1d2:	4633      	mov	r3, r6
 800b1d4:	462a      	mov	r2, r5
 800b1d6:	f7f5 f857 	bl	8000288 <__aeabi_dsub>
 800b1da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1de:	4656      	mov	r6, sl
 800b1e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1e4:	f7f5 fcb8 	bl	8000b58 <__aeabi_d2iz>
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	f7f5 f99b 	bl	8000524 <__aeabi_i2d>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1f6:	f7f5 f847 	bl	8000288 <__aeabi_dsub>
 800b1fa:	3530      	adds	r5, #48	@ 0x30
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b204:	f806 5b01 	strb.w	r5, [r6], #1
 800b208:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b20c:	f7f5 fc66 	bl	8000adc <__aeabi_dcmplt>
 800b210:	2800      	cmp	r0, #0
 800b212:	d172      	bne.n	800b2fa <_dtoa_r+0x622>
 800b214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b218:	4911      	ldr	r1, [pc, #68]	@ (800b260 <_dtoa_r+0x588>)
 800b21a:	2000      	movs	r0, #0
 800b21c:	f7f5 f834 	bl	8000288 <__aeabi_dsub>
 800b220:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b224:	f7f5 fc5a 	bl	8000adc <__aeabi_dcmplt>
 800b228:	2800      	cmp	r0, #0
 800b22a:	f040 80b4 	bne.w	800b396 <_dtoa_r+0x6be>
 800b22e:	42a6      	cmp	r6, r4
 800b230:	f43f af70 	beq.w	800b114 <_dtoa_r+0x43c>
 800b234:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b238:	4b0a      	ldr	r3, [pc, #40]	@ (800b264 <_dtoa_r+0x58c>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	f7f5 f9dc 	bl	80005f8 <__aeabi_dmul>
 800b240:	4b08      	ldr	r3, [pc, #32]	@ (800b264 <_dtoa_r+0x58c>)
 800b242:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b246:	2200      	movs	r2, #0
 800b248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b24c:	f7f5 f9d4 	bl	80005f8 <__aeabi_dmul>
 800b250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b254:	e7c4      	b.n	800b1e0 <_dtoa_r+0x508>
 800b256:	bf00      	nop
 800b258:	0800ecc8 	.word	0x0800ecc8
 800b25c:	0800eca0 	.word	0x0800eca0
 800b260:	3ff00000 	.word	0x3ff00000
 800b264:	40240000 	.word	0x40240000
 800b268:	401c0000 	.word	0x401c0000
 800b26c:	40140000 	.word	0x40140000
 800b270:	3fe00000 	.word	0x3fe00000
 800b274:	4631      	mov	r1, r6
 800b276:	4628      	mov	r0, r5
 800b278:	f7f5 f9be 	bl	80005f8 <__aeabi_dmul>
 800b27c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b280:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b282:	4656      	mov	r6, sl
 800b284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b288:	f7f5 fc66 	bl	8000b58 <__aeabi_d2iz>
 800b28c:	4605      	mov	r5, r0
 800b28e:	f7f5 f949 	bl	8000524 <__aeabi_i2d>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b29a:	f7f4 fff5 	bl	8000288 <__aeabi_dsub>
 800b29e:	3530      	adds	r5, #48	@ 0x30
 800b2a0:	f806 5b01 	strb.w	r5, [r6], #1
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	42a6      	cmp	r6, r4
 800b2aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2ae:	f04f 0200 	mov.w	r2, #0
 800b2b2:	d124      	bne.n	800b2fe <_dtoa_r+0x626>
 800b2b4:	4baf      	ldr	r3, [pc, #700]	@ (800b574 <_dtoa_r+0x89c>)
 800b2b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b2ba:	f7f4 ffe7 	bl	800028c <__adddf3>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2c6:	f7f5 fc27 	bl	8000b18 <__aeabi_dcmpgt>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d163      	bne.n	800b396 <_dtoa_r+0x6be>
 800b2ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2d2:	49a8      	ldr	r1, [pc, #672]	@ (800b574 <_dtoa_r+0x89c>)
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	f7f4 ffd7 	bl	8000288 <__aeabi_dsub>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	460b      	mov	r3, r1
 800b2de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2e2:	f7f5 fbfb 	bl	8000adc <__aeabi_dcmplt>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f43f af14 	beq.w	800b114 <_dtoa_r+0x43c>
 800b2ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b2ee:	1e73      	subs	r3, r6, #1
 800b2f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2f6:	2b30      	cmp	r3, #48	@ 0x30
 800b2f8:	d0f8      	beq.n	800b2ec <_dtoa_r+0x614>
 800b2fa:	4647      	mov	r7, r8
 800b2fc:	e03b      	b.n	800b376 <_dtoa_r+0x69e>
 800b2fe:	4b9e      	ldr	r3, [pc, #632]	@ (800b578 <_dtoa_r+0x8a0>)
 800b300:	f7f5 f97a 	bl	80005f8 <__aeabi_dmul>
 800b304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b308:	e7bc      	b.n	800b284 <_dtoa_r+0x5ac>
 800b30a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b30e:	4656      	mov	r6, sl
 800b310:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b314:	4620      	mov	r0, r4
 800b316:	4629      	mov	r1, r5
 800b318:	f7f5 fa98 	bl	800084c <__aeabi_ddiv>
 800b31c:	f7f5 fc1c 	bl	8000b58 <__aeabi_d2iz>
 800b320:	4680      	mov	r8, r0
 800b322:	f7f5 f8ff 	bl	8000524 <__aeabi_i2d>
 800b326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b32a:	f7f5 f965 	bl	80005f8 <__aeabi_dmul>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	4620      	mov	r0, r4
 800b334:	4629      	mov	r1, r5
 800b336:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b33a:	f7f4 ffa5 	bl	8000288 <__aeabi_dsub>
 800b33e:	f806 4b01 	strb.w	r4, [r6], #1
 800b342:	9d03      	ldr	r5, [sp, #12]
 800b344:	eba6 040a 	sub.w	r4, r6, sl
 800b348:	42a5      	cmp	r5, r4
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	d133      	bne.n	800b3b8 <_dtoa_r+0x6e0>
 800b350:	f7f4 ff9c 	bl	800028c <__adddf3>
 800b354:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b358:	4604      	mov	r4, r0
 800b35a:	460d      	mov	r5, r1
 800b35c:	f7f5 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 800b360:	b9c0      	cbnz	r0, 800b394 <_dtoa_r+0x6bc>
 800b362:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b366:	4620      	mov	r0, r4
 800b368:	4629      	mov	r1, r5
 800b36a:	f7f5 fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800b36e:	b110      	cbz	r0, 800b376 <_dtoa_r+0x69e>
 800b370:	f018 0f01 	tst.w	r8, #1
 800b374:	d10e      	bne.n	800b394 <_dtoa_r+0x6bc>
 800b376:	9902      	ldr	r1, [sp, #8]
 800b378:	4648      	mov	r0, r9
 800b37a:	f000 fbbd 	bl	800baf8 <_Bfree>
 800b37e:	2300      	movs	r3, #0
 800b380:	7033      	strb	r3, [r6, #0]
 800b382:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b384:	3701      	adds	r7, #1
 800b386:	601f      	str	r7, [r3, #0]
 800b388:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f000 824b 	beq.w	800b826 <_dtoa_r+0xb4e>
 800b390:	601e      	str	r6, [r3, #0]
 800b392:	e248      	b.n	800b826 <_dtoa_r+0xb4e>
 800b394:	46b8      	mov	r8, r7
 800b396:	4633      	mov	r3, r6
 800b398:	461e      	mov	r6, r3
 800b39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b39e:	2a39      	cmp	r2, #57	@ 0x39
 800b3a0:	d106      	bne.n	800b3b0 <_dtoa_r+0x6d8>
 800b3a2:	459a      	cmp	sl, r3
 800b3a4:	d1f8      	bne.n	800b398 <_dtoa_r+0x6c0>
 800b3a6:	2230      	movs	r2, #48	@ 0x30
 800b3a8:	f108 0801 	add.w	r8, r8, #1
 800b3ac:	f88a 2000 	strb.w	r2, [sl]
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	3201      	adds	r2, #1
 800b3b4:	701a      	strb	r2, [r3, #0]
 800b3b6:	e7a0      	b.n	800b2fa <_dtoa_r+0x622>
 800b3b8:	4b6f      	ldr	r3, [pc, #444]	@ (800b578 <_dtoa_r+0x8a0>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f7f5 f91c 	bl	80005f8 <__aeabi_dmul>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	f7f5 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d09f      	beq.n	800b310 <_dtoa_r+0x638>
 800b3d0:	e7d1      	b.n	800b376 <_dtoa_r+0x69e>
 800b3d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3d4:	2a00      	cmp	r2, #0
 800b3d6:	f000 80ea 	beq.w	800b5ae <_dtoa_r+0x8d6>
 800b3da:	9a07      	ldr	r2, [sp, #28]
 800b3dc:	2a01      	cmp	r2, #1
 800b3de:	f300 80cd 	bgt.w	800b57c <_dtoa_r+0x8a4>
 800b3e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b3e4:	2a00      	cmp	r2, #0
 800b3e6:	f000 80c1 	beq.w	800b56c <_dtoa_r+0x894>
 800b3ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b3ee:	9c08      	ldr	r4, [sp, #32]
 800b3f0:	9e00      	ldr	r6, [sp, #0]
 800b3f2:	9a00      	ldr	r2, [sp, #0]
 800b3f4:	441a      	add	r2, r3
 800b3f6:	9200      	str	r2, [sp, #0]
 800b3f8:	9a06      	ldr	r2, [sp, #24]
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	441a      	add	r2, r3
 800b3fe:	4648      	mov	r0, r9
 800b400:	9206      	str	r2, [sp, #24]
 800b402:	f000 fc77 	bl	800bcf4 <__i2b>
 800b406:	4605      	mov	r5, r0
 800b408:	b166      	cbz	r6, 800b424 <_dtoa_r+0x74c>
 800b40a:	9b06      	ldr	r3, [sp, #24]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dd09      	ble.n	800b424 <_dtoa_r+0x74c>
 800b410:	42b3      	cmp	r3, r6
 800b412:	9a00      	ldr	r2, [sp, #0]
 800b414:	bfa8      	it	ge
 800b416:	4633      	movge	r3, r6
 800b418:	1ad2      	subs	r2, r2, r3
 800b41a:	9200      	str	r2, [sp, #0]
 800b41c:	9a06      	ldr	r2, [sp, #24]
 800b41e:	1af6      	subs	r6, r6, r3
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	9306      	str	r3, [sp, #24]
 800b424:	9b08      	ldr	r3, [sp, #32]
 800b426:	b30b      	cbz	r3, 800b46c <_dtoa_r+0x794>
 800b428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 80c6 	beq.w	800b5bc <_dtoa_r+0x8e4>
 800b430:	2c00      	cmp	r4, #0
 800b432:	f000 80c0 	beq.w	800b5b6 <_dtoa_r+0x8de>
 800b436:	4629      	mov	r1, r5
 800b438:	4622      	mov	r2, r4
 800b43a:	4648      	mov	r0, r9
 800b43c:	f000 fd12 	bl	800be64 <__pow5mult>
 800b440:	9a02      	ldr	r2, [sp, #8]
 800b442:	4601      	mov	r1, r0
 800b444:	4605      	mov	r5, r0
 800b446:	4648      	mov	r0, r9
 800b448:	f000 fc6a 	bl	800bd20 <__multiply>
 800b44c:	9902      	ldr	r1, [sp, #8]
 800b44e:	4680      	mov	r8, r0
 800b450:	4648      	mov	r0, r9
 800b452:	f000 fb51 	bl	800baf8 <_Bfree>
 800b456:	9b08      	ldr	r3, [sp, #32]
 800b458:	1b1b      	subs	r3, r3, r4
 800b45a:	9308      	str	r3, [sp, #32]
 800b45c:	f000 80b1 	beq.w	800b5c2 <_dtoa_r+0x8ea>
 800b460:	9a08      	ldr	r2, [sp, #32]
 800b462:	4641      	mov	r1, r8
 800b464:	4648      	mov	r0, r9
 800b466:	f000 fcfd 	bl	800be64 <__pow5mult>
 800b46a:	9002      	str	r0, [sp, #8]
 800b46c:	2101      	movs	r1, #1
 800b46e:	4648      	mov	r0, r9
 800b470:	f000 fc40 	bl	800bcf4 <__i2b>
 800b474:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b476:	4604      	mov	r4, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f000 81d8 	beq.w	800b82e <_dtoa_r+0xb56>
 800b47e:	461a      	mov	r2, r3
 800b480:	4601      	mov	r1, r0
 800b482:	4648      	mov	r0, r9
 800b484:	f000 fcee 	bl	800be64 <__pow5mult>
 800b488:	9b07      	ldr	r3, [sp, #28]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	4604      	mov	r4, r0
 800b48e:	f300 809f 	bgt.w	800b5d0 <_dtoa_r+0x8f8>
 800b492:	9b04      	ldr	r3, [sp, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f040 8097 	bne.w	800b5c8 <_dtoa_r+0x8f0>
 800b49a:	9b05      	ldr	r3, [sp, #20]
 800b49c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f040 8093 	bne.w	800b5cc <_dtoa_r+0x8f4>
 800b4a6:	9b05      	ldr	r3, [sp, #20]
 800b4a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4ac:	0d1b      	lsrs	r3, r3, #20
 800b4ae:	051b      	lsls	r3, r3, #20
 800b4b0:	b133      	cbz	r3, 800b4c0 <_dtoa_r+0x7e8>
 800b4b2:	9b00      	ldr	r3, [sp, #0]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	9b06      	ldr	r3, [sp, #24]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	9306      	str	r3, [sp, #24]
 800b4be:	2301      	movs	r3, #1
 800b4c0:	9308      	str	r3, [sp, #32]
 800b4c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 81b8 	beq.w	800b83a <_dtoa_r+0xb62>
 800b4ca:	6923      	ldr	r3, [r4, #16]
 800b4cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4d0:	6918      	ldr	r0, [r3, #16]
 800b4d2:	f000 fbc3 	bl	800bc5c <__hi0bits>
 800b4d6:	f1c0 0020 	rsb	r0, r0, #32
 800b4da:	9b06      	ldr	r3, [sp, #24]
 800b4dc:	4418      	add	r0, r3
 800b4de:	f010 001f 	ands.w	r0, r0, #31
 800b4e2:	f000 8082 	beq.w	800b5ea <_dtoa_r+0x912>
 800b4e6:	f1c0 0320 	rsb	r3, r0, #32
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	dd73      	ble.n	800b5d6 <_dtoa_r+0x8fe>
 800b4ee:	9b00      	ldr	r3, [sp, #0]
 800b4f0:	f1c0 001c 	rsb	r0, r0, #28
 800b4f4:	4403      	add	r3, r0
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	9b06      	ldr	r3, [sp, #24]
 800b4fa:	4403      	add	r3, r0
 800b4fc:	4406      	add	r6, r0
 800b4fe:	9306      	str	r3, [sp, #24]
 800b500:	9b00      	ldr	r3, [sp, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	dd05      	ble.n	800b512 <_dtoa_r+0x83a>
 800b506:	9902      	ldr	r1, [sp, #8]
 800b508:	461a      	mov	r2, r3
 800b50a:	4648      	mov	r0, r9
 800b50c:	f000 fd04 	bl	800bf18 <__lshift>
 800b510:	9002      	str	r0, [sp, #8]
 800b512:	9b06      	ldr	r3, [sp, #24]
 800b514:	2b00      	cmp	r3, #0
 800b516:	dd05      	ble.n	800b524 <_dtoa_r+0x84c>
 800b518:	4621      	mov	r1, r4
 800b51a:	461a      	mov	r2, r3
 800b51c:	4648      	mov	r0, r9
 800b51e:	f000 fcfb 	bl	800bf18 <__lshift>
 800b522:	4604      	mov	r4, r0
 800b524:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b526:	2b00      	cmp	r3, #0
 800b528:	d061      	beq.n	800b5ee <_dtoa_r+0x916>
 800b52a:	9802      	ldr	r0, [sp, #8]
 800b52c:	4621      	mov	r1, r4
 800b52e:	f000 fd5f 	bl	800bff0 <__mcmp>
 800b532:	2800      	cmp	r0, #0
 800b534:	da5b      	bge.n	800b5ee <_dtoa_r+0x916>
 800b536:	2300      	movs	r3, #0
 800b538:	9902      	ldr	r1, [sp, #8]
 800b53a:	220a      	movs	r2, #10
 800b53c:	4648      	mov	r0, r9
 800b53e:	f000 fafd 	bl	800bb3c <__multadd>
 800b542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b544:	9002      	str	r0, [sp, #8]
 800b546:	f107 38ff 	add.w	r8, r7, #4294967295
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 8177 	beq.w	800b83e <_dtoa_r+0xb66>
 800b550:	4629      	mov	r1, r5
 800b552:	2300      	movs	r3, #0
 800b554:	220a      	movs	r2, #10
 800b556:	4648      	mov	r0, r9
 800b558:	f000 faf0 	bl	800bb3c <__multadd>
 800b55c:	f1bb 0f00 	cmp.w	fp, #0
 800b560:	4605      	mov	r5, r0
 800b562:	dc6f      	bgt.n	800b644 <_dtoa_r+0x96c>
 800b564:	9b07      	ldr	r3, [sp, #28]
 800b566:	2b02      	cmp	r3, #2
 800b568:	dc49      	bgt.n	800b5fe <_dtoa_r+0x926>
 800b56a:	e06b      	b.n	800b644 <_dtoa_r+0x96c>
 800b56c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b56e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b572:	e73c      	b.n	800b3ee <_dtoa_r+0x716>
 800b574:	3fe00000 	.word	0x3fe00000
 800b578:	40240000 	.word	0x40240000
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	1e5c      	subs	r4, r3, #1
 800b580:	9b08      	ldr	r3, [sp, #32]
 800b582:	42a3      	cmp	r3, r4
 800b584:	db09      	blt.n	800b59a <_dtoa_r+0x8c2>
 800b586:	1b1c      	subs	r4, r3, r4
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f6bf af30 	bge.w	800b3f0 <_dtoa_r+0x718>
 800b590:	9b00      	ldr	r3, [sp, #0]
 800b592:	9a03      	ldr	r2, [sp, #12]
 800b594:	1a9e      	subs	r6, r3, r2
 800b596:	2300      	movs	r3, #0
 800b598:	e72b      	b.n	800b3f2 <_dtoa_r+0x71a>
 800b59a:	9b08      	ldr	r3, [sp, #32]
 800b59c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b59e:	9408      	str	r4, [sp, #32]
 800b5a0:	1ae3      	subs	r3, r4, r3
 800b5a2:	441a      	add	r2, r3
 800b5a4:	9e00      	ldr	r6, [sp, #0]
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b5aa:	2400      	movs	r4, #0
 800b5ac:	e721      	b.n	800b3f2 <_dtoa_r+0x71a>
 800b5ae:	9c08      	ldr	r4, [sp, #32]
 800b5b0:	9e00      	ldr	r6, [sp, #0]
 800b5b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b5b4:	e728      	b.n	800b408 <_dtoa_r+0x730>
 800b5b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b5ba:	e751      	b.n	800b460 <_dtoa_r+0x788>
 800b5bc:	9a08      	ldr	r2, [sp, #32]
 800b5be:	9902      	ldr	r1, [sp, #8]
 800b5c0:	e750      	b.n	800b464 <_dtoa_r+0x78c>
 800b5c2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b5c6:	e751      	b.n	800b46c <_dtoa_r+0x794>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	e779      	b.n	800b4c0 <_dtoa_r+0x7e8>
 800b5cc:	9b04      	ldr	r3, [sp, #16]
 800b5ce:	e777      	b.n	800b4c0 <_dtoa_r+0x7e8>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	9308      	str	r3, [sp, #32]
 800b5d4:	e779      	b.n	800b4ca <_dtoa_r+0x7f2>
 800b5d6:	d093      	beq.n	800b500 <_dtoa_r+0x828>
 800b5d8:	9a00      	ldr	r2, [sp, #0]
 800b5da:	331c      	adds	r3, #28
 800b5dc:	441a      	add	r2, r3
 800b5de:	9200      	str	r2, [sp, #0]
 800b5e0:	9a06      	ldr	r2, [sp, #24]
 800b5e2:	441a      	add	r2, r3
 800b5e4:	441e      	add	r6, r3
 800b5e6:	9206      	str	r2, [sp, #24]
 800b5e8:	e78a      	b.n	800b500 <_dtoa_r+0x828>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	e7f4      	b.n	800b5d8 <_dtoa_r+0x900>
 800b5ee:	9b03      	ldr	r3, [sp, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	46b8      	mov	r8, r7
 800b5f4:	dc20      	bgt.n	800b638 <_dtoa_r+0x960>
 800b5f6:	469b      	mov	fp, r3
 800b5f8:	9b07      	ldr	r3, [sp, #28]
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	dd1e      	ble.n	800b63c <_dtoa_r+0x964>
 800b5fe:	f1bb 0f00 	cmp.w	fp, #0
 800b602:	f47f adb1 	bne.w	800b168 <_dtoa_r+0x490>
 800b606:	4621      	mov	r1, r4
 800b608:	465b      	mov	r3, fp
 800b60a:	2205      	movs	r2, #5
 800b60c:	4648      	mov	r0, r9
 800b60e:	f000 fa95 	bl	800bb3c <__multadd>
 800b612:	4601      	mov	r1, r0
 800b614:	4604      	mov	r4, r0
 800b616:	9802      	ldr	r0, [sp, #8]
 800b618:	f000 fcea 	bl	800bff0 <__mcmp>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	f77f ada3 	ble.w	800b168 <_dtoa_r+0x490>
 800b622:	4656      	mov	r6, sl
 800b624:	2331      	movs	r3, #49	@ 0x31
 800b626:	f806 3b01 	strb.w	r3, [r6], #1
 800b62a:	f108 0801 	add.w	r8, r8, #1
 800b62e:	e59f      	b.n	800b170 <_dtoa_r+0x498>
 800b630:	9c03      	ldr	r4, [sp, #12]
 800b632:	46b8      	mov	r8, r7
 800b634:	4625      	mov	r5, r4
 800b636:	e7f4      	b.n	800b622 <_dtoa_r+0x94a>
 800b638:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 8101 	beq.w	800b846 <_dtoa_r+0xb6e>
 800b644:	2e00      	cmp	r6, #0
 800b646:	dd05      	ble.n	800b654 <_dtoa_r+0x97c>
 800b648:	4629      	mov	r1, r5
 800b64a:	4632      	mov	r2, r6
 800b64c:	4648      	mov	r0, r9
 800b64e:	f000 fc63 	bl	800bf18 <__lshift>
 800b652:	4605      	mov	r5, r0
 800b654:	9b08      	ldr	r3, [sp, #32]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d05c      	beq.n	800b714 <_dtoa_r+0xa3c>
 800b65a:	6869      	ldr	r1, [r5, #4]
 800b65c:	4648      	mov	r0, r9
 800b65e:	f000 fa0b 	bl	800ba78 <_Balloc>
 800b662:	4606      	mov	r6, r0
 800b664:	b928      	cbnz	r0, 800b672 <_dtoa_r+0x99a>
 800b666:	4b82      	ldr	r3, [pc, #520]	@ (800b870 <_dtoa_r+0xb98>)
 800b668:	4602      	mov	r2, r0
 800b66a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b66e:	f7ff bb4a 	b.w	800ad06 <_dtoa_r+0x2e>
 800b672:	692a      	ldr	r2, [r5, #16]
 800b674:	3202      	adds	r2, #2
 800b676:	0092      	lsls	r2, r2, #2
 800b678:	f105 010c 	add.w	r1, r5, #12
 800b67c:	300c      	adds	r0, #12
 800b67e:	f7ff fa8c 	bl	800ab9a <memcpy>
 800b682:	2201      	movs	r2, #1
 800b684:	4631      	mov	r1, r6
 800b686:	4648      	mov	r0, r9
 800b688:	f000 fc46 	bl	800bf18 <__lshift>
 800b68c:	f10a 0301 	add.w	r3, sl, #1
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	eb0a 030b 	add.w	r3, sl, fp
 800b696:	9308      	str	r3, [sp, #32]
 800b698:	9b04      	ldr	r3, [sp, #16]
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	462f      	mov	r7, r5
 800b6a0:	9306      	str	r3, [sp, #24]
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	9b00      	ldr	r3, [sp, #0]
 800b6a6:	9802      	ldr	r0, [sp, #8]
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800b6ae:	f7ff fa89 	bl	800abc4 <quorem>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	3330      	adds	r3, #48	@ 0x30
 800b6b6:	9003      	str	r0, [sp, #12]
 800b6b8:	4639      	mov	r1, r7
 800b6ba:	9802      	ldr	r0, [sp, #8]
 800b6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6be:	f000 fc97 	bl	800bff0 <__mcmp>
 800b6c2:	462a      	mov	r2, r5
 800b6c4:	9004      	str	r0, [sp, #16]
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4648      	mov	r0, r9
 800b6ca:	f000 fcad 	bl	800c028 <__mdiff>
 800b6ce:	68c2      	ldr	r2, [r0, #12]
 800b6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	bb02      	cbnz	r2, 800b718 <_dtoa_r+0xa40>
 800b6d6:	4601      	mov	r1, r0
 800b6d8:	9802      	ldr	r0, [sp, #8]
 800b6da:	f000 fc89 	bl	800bff0 <__mcmp>
 800b6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4648      	mov	r0, r9
 800b6e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ea:	f000 fa05 	bl	800baf8 <_Bfree>
 800b6ee:	9b07      	ldr	r3, [sp, #28]
 800b6f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b6f2:	9e00      	ldr	r6, [sp, #0]
 800b6f4:	ea42 0103 	orr.w	r1, r2, r3
 800b6f8:	9b06      	ldr	r3, [sp, #24]
 800b6fa:	4319      	orrs	r1, r3
 800b6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6fe:	d10d      	bne.n	800b71c <_dtoa_r+0xa44>
 800b700:	2b39      	cmp	r3, #57	@ 0x39
 800b702:	d027      	beq.n	800b754 <_dtoa_r+0xa7c>
 800b704:	9a04      	ldr	r2, [sp, #16]
 800b706:	2a00      	cmp	r2, #0
 800b708:	dd01      	ble.n	800b70e <_dtoa_r+0xa36>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	3331      	adds	r3, #49	@ 0x31
 800b70e:	f88b 3000 	strb.w	r3, [fp]
 800b712:	e52e      	b.n	800b172 <_dtoa_r+0x49a>
 800b714:	4628      	mov	r0, r5
 800b716:	e7b9      	b.n	800b68c <_dtoa_r+0x9b4>
 800b718:	2201      	movs	r2, #1
 800b71a:	e7e2      	b.n	800b6e2 <_dtoa_r+0xa0a>
 800b71c:	9904      	ldr	r1, [sp, #16]
 800b71e:	2900      	cmp	r1, #0
 800b720:	db04      	blt.n	800b72c <_dtoa_r+0xa54>
 800b722:	9807      	ldr	r0, [sp, #28]
 800b724:	4301      	orrs	r1, r0
 800b726:	9806      	ldr	r0, [sp, #24]
 800b728:	4301      	orrs	r1, r0
 800b72a:	d120      	bne.n	800b76e <_dtoa_r+0xa96>
 800b72c:	2a00      	cmp	r2, #0
 800b72e:	ddee      	ble.n	800b70e <_dtoa_r+0xa36>
 800b730:	9902      	ldr	r1, [sp, #8]
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	2201      	movs	r2, #1
 800b736:	4648      	mov	r0, r9
 800b738:	f000 fbee 	bl	800bf18 <__lshift>
 800b73c:	4621      	mov	r1, r4
 800b73e:	9002      	str	r0, [sp, #8]
 800b740:	f000 fc56 	bl	800bff0 <__mcmp>
 800b744:	2800      	cmp	r0, #0
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	dc02      	bgt.n	800b750 <_dtoa_r+0xa78>
 800b74a:	d1e0      	bne.n	800b70e <_dtoa_r+0xa36>
 800b74c:	07da      	lsls	r2, r3, #31
 800b74e:	d5de      	bpl.n	800b70e <_dtoa_r+0xa36>
 800b750:	2b39      	cmp	r3, #57	@ 0x39
 800b752:	d1da      	bne.n	800b70a <_dtoa_r+0xa32>
 800b754:	2339      	movs	r3, #57	@ 0x39
 800b756:	f88b 3000 	strb.w	r3, [fp]
 800b75a:	4633      	mov	r3, r6
 800b75c:	461e      	mov	r6, r3
 800b75e:	3b01      	subs	r3, #1
 800b760:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b764:	2a39      	cmp	r2, #57	@ 0x39
 800b766:	d04e      	beq.n	800b806 <_dtoa_r+0xb2e>
 800b768:	3201      	adds	r2, #1
 800b76a:	701a      	strb	r2, [r3, #0]
 800b76c:	e501      	b.n	800b172 <_dtoa_r+0x49a>
 800b76e:	2a00      	cmp	r2, #0
 800b770:	dd03      	ble.n	800b77a <_dtoa_r+0xaa2>
 800b772:	2b39      	cmp	r3, #57	@ 0x39
 800b774:	d0ee      	beq.n	800b754 <_dtoa_r+0xa7c>
 800b776:	3301      	adds	r3, #1
 800b778:	e7c9      	b.n	800b70e <_dtoa_r+0xa36>
 800b77a:	9a00      	ldr	r2, [sp, #0]
 800b77c:	9908      	ldr	r1, [sp, #32]
 800b77e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b782:	428a      	cmp	r2, r1
 800b784:	d028      	beq.n	800b7d8 <_dtoa_r+0xb00>
 800b786:	9902      	ldr	r1, [sp, #8]
 800b788:	2300      	movs	r3, #0
 800b78a:	220a      	movs	r2, #10
 800b78c:	4648      	mov	r0, r9
 800b78e:	f000 f9d5 	bl	800bb3c <__multadd>
 800b792:	42af      	cmp	r7, r5
 800b794:	9002      	str	r0, [sp, #8]
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	f04f 020a 	mov.w	r2, #10
 800b79e:	4639      	mov	r1, r7
 800b7a0:	4648      	mov	r0, r9
 800b7a2:	d107      	bne.n	800b7b4 <_dtoa_r+0xadc>
 800b7a4:	f000 f9ca 	bl	800bb3c <__multadd>
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	9b00      	ldr	r3, [sp, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	e777      	b.n	800b6a4 <_dtoa_r+0x9cc>
 800b7b4:	f000 f9c2 	bl	800bb3c <__multadd>
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	2300      	movs	r3, #0
 800b7be:	220a      	movs	r2, #10
 800b7c0:	4648      	mov	r0, r9
 800b7c2:	f000 f9bb 	bl	800bb3c <__multadd>
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	e7f0      	b.n	800b7ac <_dtoa_r+0xad4>
 800b7ca:	f1bb 0f00 	cmp.w	fp, #0
 800b7ce:	bfcc      	ite	gt
 800b7d0:	465e      	movgt	r6, fp
 800b7d2:	2601      	movle	r6, #1
 800b7d4:	4456      	add	r6, sl
 800b7d6:	2700      	movs	r7, #0
 800b7d8:	9902      	ldr	r1, [sp, #8]
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	4648      	mov	r0, r9
 800b7e0:	f000 fb9a 	bl	800bf18 <__lshift>
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	9002      	str	r0, [sp, #8]
 800b7e8:	f000 fc02 	bl	800bff0 <__mcmp>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	dcb4      	bgt.n	800b75a <_dtoa_r+0xa82>
 800b7f0:	d102      	bne.n	800b7f8 <_dtoa_r+0xb20>
 800b7f2:	9b00      	ldr	r3, [sp, #0]
 800b7f4:	07db      	lsls	r3, r3, #31
 800b7f6:	d4b0      	bmi.n	800b75a <_dtoa_r+0xa82>
 800b7f8:	4633      	mov	r3, r6
 800b7fa:	461e      	mov	r6, r3
 800b7fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b800:	2a30      	cmp	r2, #48	@ 0x30
 800b802:	d0fa      	beq.n	800b7fa <_dtoa_r+0xb22>
 800b804:	e4b5      	b.n	800b172 <_dtoa_r+0x49a>
 800b806:	459a      	cmp	sl, r3
 800b808:	d1a8      	bne.n	800b75c <_dtoa_r+0xa84>
 800b80a:	2331      	movs	r3, #49	@ 0x31
 800b80c:	f108 0801 	add.w	r8, r8, #1
 800b810:	f88a 3000 	strb.w	r3, [sl]
 800b814:	e4ad      	b.n	800b172 <_dtoa_r+0x49a>
 800b816:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b818:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b874 <_dtoa_r+0xb9c>
 800b81c:	b11b      	cbz	r3, 800b826 <_dtoa_r+0xb4e>
 800b81e:	f10a 0308 	add.w	r3, sl, #8
 800b822:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	4650      	mov	r0, sl
 800b828:	b017      	add	sp, #92	@ 0x5c
 800b82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82e:	9b07      	ldr	r3, [sp, #28]
 800b830:	2b01      	cmp	r3, #1
 800b832:	f77f ae2e 	ble.w	800b492 <_dtoa_r+0x7ba>
 800b836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b838:	9308      	str	r3, [sp, #32]
 800b83a:	2001      	movs	r0, #1
 800b83c:	e64d      	b.n	800b4da <_dtoa_r+0x802>
 800b83e:	f1bb 0f00 	cmp.w	fp, #0
 800b842:	f77f aed9 	ble.w	800b5f8 <_dtoa_r+0x920>
 800b846:	4656      	mov	r6, sl
 800b848:	9802      	ldr	r0, [sp, #8]
 800b84a:	4621      	mov	r1, r4
 800b84c:	f7ff f9ba 	bl	800abc4 <quorem>
 800b850:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b854:	f806 3b01 	strb.w	r3, [r6], #1
 800b858:	eba6 020a 	sub.w	r2, r6, sl
 800b85c:	4593      	cmp	fp, r2
 800b85e:	ddb4      	ble.n	800b7ca <_dtoa_r+0xaf2>
 800b860:	9902      	ldr	r1, [sp, #8]
 800b862:	2300      	movs	r3, #0
 800b864:	220a      	movs	r2, #10
 800b866:	4648      	mov	r0, r9
 800b868:	f000 f968 	bl	800bb3c <__multadd>
 800b86c:	9002      	str	r0, [sp, #8]
 800b86e:	e7eb      	b.n	800b848 <_dtoa_r+0xb70>
 800b870:	0800eb6e 	.word	0x0800eb6e
 800b874:	0800eaf2 	.word	0x0800eaf2

0800b878 <_free_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4605      	mov	r5, r0
 800b87c:	2900      	cmp	r1, #0
 800b87e:	d041      	beq.n	800b904 <_free_r+0x8c>
 800b880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b884:	1f0c      	subs	r4, r1, #4
 800b886:	2b00      	cmp	r3, #0
 800b888:	bfb8      	it	lt
 800b88a:	18e4      	addlt	r4, r4, r3
 800b88c:	f000 f8e8 	bl	800ba60 <__malloc_lock>
 800b890:	4a1d      	ldr	r2, [pc, #116]	@ (800b908 <_free_r+0x90>)
 800b892:	6813      	ldr	r3, [r2, #0]
 800b894:	b933      	cbnz	r3, 800b8a4 <_free_r+0x2c>
 800b896:	6063      	str	r3, [r4, #4]
 800b898:	6014      	str	r4, [r2, #0]
 800b89a:	4628      	mov	r0, r5
 800b89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a0:	f000 b8e4 	b.w	800ba6c <__malloc_unlock>
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	d908      	bls.n	800b8ba <_free_r+0x42>
 800b8a8:	6820      	ldr	r0, [r4, #0]
 800b8aa:	1821      	adds	r1, r4, r0
 800b8ac:	428b      	cmp	r3, r1
 800b8ae:	bf01      	itttt	eq
 800b8b0:	6819      	ldreq	r1, [r3, #0]
 800b8b2:	685b      	ldreq	r3, [r3, #4]
 800b8b4:	1809      	addeq	r1, r1, r0
 800b8b6:	6021      	streq	r1, [r4, #0]
 800b8b8:	e7ed      	b.n	800b896 <_free_r+0x1e>
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	b10b      	cbz	r3, 800b8c4 <_free_r+0x4c>
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	d9fa      	bls.n	800b8ba <_free_r+0x42>
 800b8c4:	6811      	ldr	r1, [r2, #0]
 800b8c6:	1850      	adds	r0, r2, r1
 800b8c8:	42a0      	cmp	r0, r4
 800b8ca:	d10b      	bne.n	800b8e4 <_free_r+0x6c>
 800b8cc:	6820      	ldr	r0, [r4, #0]
 800b8ce:	4401      	add	r1, r0
 800b8d0:	1850      	adds	r0, r2, r1
 800b8d2:	4283      	cmp	r3, r0
 800b8d4:	6011      	str	r1, [r2, #0]
 800b8d6:	d1e0      	bne.n	800b89a <_free_r+0x22>
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	6053      	str	r3, [r2, #4]
 800b8de:	4408      	add	r0, r1
 800b8e0:	6010      	str	r0, [r2, #0]
 800b8e2:	e7da      	b.n	800b89a <_free_r+0x22>
 800b8e4:	d902      	bls.n	800b8ec <_free_r+0x74>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	602b      	str	r3, [r5, #0]
 800b8ea:	e7d6      	b.n	800b89a <_free_r+0x22>
 800b8ec:	6820      	ldr	r0, [r4, #0]
 800b8ee:	1821      	adds	r1, r4, r0
 800b8f0:	428b      	cmp	r3, r1
 800b8f2:	bf04      	itt	eq
 800b8f4:	6819      	ldreq	r1, [r3, #0]
 800b8f6:	685b      	ldreq	r3, [r3, #4]
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	bf04      	itt	eq
 800b8fc:	1809      	addeq	r1, r1, r0
 800b8fe:	6021      	streq	r1, [r4, #0]
 800b900:	6054      	str	r4, [r2, #4]
 800b902:	e7ca      	b.n	800b89a <_free_r+0x22>
 800b904:	bd38      	pop	{r3, r4, r5, pc}
 800b906:	bf00      	nop
 800b908:	20000b48 	.word	0x20000b48

0800b90c <malloc>:
 800b90c:	4b02      	ldr	r3, [pc, #8]	@ (800b918 <malloc+0xc>)
 800b90e:	4601      	mov	r1, r0
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	f000 b825 	b.w	800b960 <_malloc_r>
 800b916:	bf00      	nop
 800b918:	20000018 	.word	0x20000018

0800b91c <sbrk_aligned>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	4e0f      	ldr	r6, [pc, #60]	@ (800b95c <sbrk_aligned+0x40>)
 800b920:	460c      	mov	r4, r1
 800b922:	6831      	ldr	r1, [r6, #0]
 800b924:	4605      	mov	r5, r0
 800b926:	b911      	cbnz	r1, 800b92e <sbrk_aligned+0x12>
 800b928:	f001 ffca 	bl	800d8c0 <_sbrk_r>
 800b92c:	6030      	str	r0, [r6, #0]
 800b92e:	4621      	mov	r1, r4
 800b930:	4628      	mov	r0, r5
 800b932:	f001 ffc5 	bl	800d8c0 <_sbrk_r>
 800b936:	1c43      	adds	r3, r0, #1
 800b938:	d103      	bne.n	800b942 <sbrk_aligned+0x26>
 800b93a:	f04f 34ff 	mov.w	r4, #4294967295
 800b93e:	4620      	mov	r0, r4
 800b940:	bd70      	pop	{r4, r5, r6, pc}
 800b942:	1cc4      	adds	r4, r0, #3
 800b944:	f024 0403 	bic.w	r4, r4, #3
 800b948:	42a0      	cmp	r0, r4
 800b94a:	d0f8      	beq.n	800b93e <sbrk_aligned+0x22>
 800b94c:	1a21      	subs	r1, r4, r0
 800b94e:	4628      	mov	r0, r5
 800b950:	f001 ffb6 	bl	800d8c0 <_sbrk_r>
 800b954:	3001      	adds	r0, #1
 800b956:	d1f2      	bne.n	800b93e <sbrk_aligned+0x22>
 800b958:	e7ef      	b.n	800b93a <sbrk_aligned+0x1e>
 800b95a:	bf00      	nop
 800b95c:	20000b44 	.word	0x20000b44

0800b960 <_malloc_r>:
 800b960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b964:	1ccd      	adds	r5, r1, #3
 800b966:	f025 0503 	bic.w	r5, r5, #3
 800b96a:	3508      	adds	r5, #8
 800b96c:	2d0c      	cmp	r5, #12
 800b96e:	bf38      	it	cc
 800b970:	250c      	movcc	r5, #12
 800b972:	2d00      	cmp	r5, #0
 800b974:	4606      	mov	r6, r0
 800b976:	db01      	blt.n	800b97c <_malloc_r+0x1c>
 800b978:	42a9      	cmp	r1, r5
 800b97a:	d904      	bls.n	800b986 <_malloc_r+0x26>
 800b97c:	230c      	movs	r3, #12
 800b97e:	6033      	str	r3, [r6, #0]
 800b980:	2000      	movs	r0, #0
 800b982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba5c <_malloc_r+0xfc>
 800b98a:	f000 f869 	bl	800ba60 <__malloc_lock>
 800b98e:	f8d8 3000 	ldr.w	r3, [r8]
 800b992:	461c      	mov	r4, r3
 800b994:	bb44      	cbnz	r4, 800b9e8 <_malloc_r+0x88>
 800b996:	4629      	mov	r1, r5
 800b998:	4630      	mov	r0, r6
 800b99a:	f7ff ffbf 	bl	800b91c <sbrk_aligned>
 800b99e:	1c43      	adds	r3, r0, #1
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	d158      	bne.n	800ba56 <_malloc_r+0xf6>
 800b9a4:	f8d8 4000 	ldr.w	r4, [r8]
 800b9a8:	4627      	mov	r7, r4
 800b9aa:	2f00      	cmp	r7, #0
 800b9ac:	d143      	bne.n	800ba36 <_malloc_r+0xd6>
 800b9ae:	2c00      	cmp	r4, #0
 800b9b0:	d04b      	beq.n	800ba4a <_malloc_r+0xea>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	eb04 0903 	add.w	r9, r4, r3
 800b9bc:	f001 ff80 	bl	800d8c0 <_sbrk_r>
 800b9c0:	4581      	cmp	r9, r0
 800b9c2:	d142      	bne.n	800ba4a <_malloc_r+0xea>
 800b9c4:	6821      	ldr	r1, [r4, #0]
 800b9c6:	1a6d      	subs	r5, r5, r1
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f7ff ffa6 	bl	800b91c <sbrk_aligned>
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	d03a      	beq.n	800ba4a <_malloc_r+0xea>
 800b9d4:	6823      	ldr	r3, [r4, #0]
 800b9d6:	442b      	add	r3, r5
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	f8d8 3000 	ldr.w	r3, [r8]
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	bb62      	cbnz	r2, 800ba3c <_malloc_r+0xdc>
 800b9e2:	f8c8 7000 	str.w	r7, [r8]
 800b9e6:	e00f      	b.n	800ba08 <_malloc_r+0xa8>
 800b9e8:	6822      	ldr	r2, [r4, #0]
 800b9ea:	1b52      	subs	r2, r2, r5
 800b9ec:	d420      	bmi.n	800ba30 <_malloc_r+0xd0>
 800b9ee:	2a0b      	cmp	r2, #11
 800b9f0:	d917      	bls.n	800ba22 <_malloc_r+0xc2>
 800b9f2:	1961      	adds	r1, r4, r5
 800b9f4:	42a3      	cmp	r3, r4
 800b9f6:	6025      	str	r5, [r4, #0]
 800b9f8:	bf18      	it	ne
 800b9fa:	6059      	strne	r1, [r3, #4]
 800b9fc:	6863      	ldr	r3, [r4, #4]
 800b9fe:	bf08      	it	eq
 800ba00:	f8c8 1000 	streq.w	r1, [r8]
 800ba04:	5162      	str	r2, [r4, r5]
 800ba06:	604b      	str	r3, [r1, #4]
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f000 f82f 	bl	800ba6c <__malloc_unlock>
 800ba0e:	f104 000b 	add.w	r0, r4, #11
 800ba12:	1d23      	adds	r3, r4, #4
 800ba14:	f020 0007 	bic.w	r0, r0, #7
 800ba18:	1ac2      	subs	r2, r0, r3
 800ba1a:	bf1c      	itt	ne
 800ba1c:	1a1b      	subne	r3, r3, r0
 800ba1e:	50a3      	strne	r3, [r4, r2]
 800ba20:	e7af      	b.n	800b982 <_malloc_r+0x22>
 800ba22:	6862      	ldr	r2, [r4, #4]
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	bf0c      	ite	eq
 800ba28:	f8c8 2000 	streq.w	r2, [r8]
 800ba2c:	605a      	strne	r2, [r3, #4]
 800ba2e:	e7eb      	b.n	800ba08 <_malloc_r+0xa8>
 800ba30:	4623      	mov	r3, r4
 800ba32:	6864      	ldr	r4, [r4, #4]
 800ba34:	e7ae      	b.n	800b994 <_malloc_r+0x34>
 800ba36:	463c      	mov	r4, r7
 800ba38:	687f      	ldr	r7, [r7, #4]
 800ba3a:	e7b6      	b.n	800b9aa <_malloc_r+0x4a>
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	d1fb      	bne.n	800ba3c <_malloc_r+0xdc>
 800ba44:	2300      	movs	r3, #0
 800ba46:	6053      	str	r3, [r2, #4]
 800ba48:	e7de      	b.n	800ba08 <_malloc_r+0xa8>
 800ba4a:	230c      	movs	r3, #12
 800ba4c:	6033      	str	r3, [r6, #0]
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f000 f80c 	bl	800ba6c <__malloc_unlock>
 800ba54:	e794      	b.n	800b980 <_malloc_r+0x20>
 800ba56:	6005      	str	r5, [r0, #0]
 800ba58:	e7d6      	b.n	800ba08 <_malloc_r+0xa8>
 800ba5a:	bf00      	nop
 800ba5c:	20000b48 	.word	0x20000b48

0800ba60 <__malloc_lock>:
 800ba60:	4801      	ldr	r0, [pc, #4]	@ (800ba68 <__malloc_lock+0x8>)
 800ba62:	f7ff b898 	b.w	800ab96 <__retarget_lock_acquire_recursive>
 800ba66:	bf00      	nop
 800ba68:	20000b40 	.word	0x20000b40

0800ba6c <__malloc_unlock>:
 800ba6c:	4801      	ldr	r0, [pc, #4]	@ (800ba74 <__malloc_unlock+0x8>)
 800ba6e:	f7ff b893 	b.w	800ab98 <__retarget_lock_release_recursive>
 800ba72:	bf00      	nop
 800ba74:	20000b40 	.word	0x20000b40

0800ba78 <_Balloc>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	69c6      	ldr	r6, [r0, #28]
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	b976      	cbnz	r6, 800baa0 <_Balloc+0x28>
 800ba82:	2010      	movs	r0, #16
 800ba84:	f7ff ff42 	bl	800b90c <malloc>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	61e0      	str	r0, [r4, #28]
 800ba8c:	b920      	cbnz	r0, 800ba98 <_Balloc+0x20>
 800ba8e:	4b18      	ldr	r3, [pc, #96]	@ (800baf0 <_Balloc+0x78>)
 800ba90:	4818      	ldr	r0, [pc, #96]	@ (800baf4 <_Balloc+0x7c>)
 800ba92:	216b      	movs	r1, #107	@ 0x6b
 800ba94:	f001 ff2c 	bl	800d8f0 <__assert_func>
 800ba98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba9c:	6006      	str	r6, [r0, #0]
 800ba9e:	60c6      	str	r6, [r0, #12]
 800baa0:	69e6      	ldr	r6, [r4, #28]
 800baa2:	68f3      	ldr	r3, [r6, #12]
 800baa4:	b183      	cbz	r3, 800bac8 <_Balloc+0x50>
 800baa6:	69e3      	ldr	r3, [r4, #28]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baae:	b9b8      	cbnz	r0, 800bae0 <_Balloc+0x68>
 800bab0:	2101      	movs	r1, #1
 800bab2:	fa01 f605 	lsl.w	r6, r1, r5
 800bab6:	1d72      	adds	r2, r6, #5
 800bab8:	0092      	lsls	r2, r2, #2
 800baba:	4620      	mov	r0, r4
 800babc:	f001 ff36 	bl	800d92c <_calloc_r>
 800bac0:	b160      	cbz	r0, 800badc <_Balloc+0x64>
 800bac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bac6:	e00e      	b.n	800bae6 <_Balloc+0x6e>
 800bac8:	2221      	movs	r2, #33	@ 0x21
 800baca:	2104      	movs	r1, #4
 800bacc:	4620      	mov	r0, r4
 800bace:	f001 ff2d 	bl	800d92c <_calloc_r>
 800bad2:	69e3      	ldr	r3, [r4, #28]
 800bad4:	60f0      	str	r0, [r6, #12]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e4      	bne.n	800baa6 <_Balloc+0x2e>
 800badc:	2000      	movs	r0, #0
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	6802      	ldr	r2, [r0, #0]
 800bae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bae6:	2300      	movs	r3, #0
 800bae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baec:	e7f7      	b.n	800bade <_Balloc+0x66>
 800baee:	bf00      	nop
 800baf0:	0800eaff 	.word	0x0800eaff
 800baf4:	0800eb7f 	.word	0x0800eb7f

0800baf8 <_Bfree>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	69c6      	ldr	r6, [r0, #28]
 800bafc:	4605      	mov	r5, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	b976      	cbnz	r6, 800bb20 <_Bfree+0x28>
 800bb02:	2010      	movs	r0, #16
 800bb04:	f7ff ff02 	bl	800b90c <malloc>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	61e8      	str	r0, [r5, #28]
 800bb0c:	b920      	cbnz	r0, 800bb18 <_Bfree+0x20>
 800bb0e:	4b09      	ldr	r3, [pc, #36]	@ (800bb34 <_Bfree+0x3c>)
 800bb10:	4809      	ldr	r0, [pc, #36]	@ (800bb38 <_Bfree+0x40>)
 800bb12:	218f      	movs	r1, #143	@ 0x8f
 800bb14:	f001 feec 	bl	800d8f0 <__assert_func>
 800bb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb1c:	6006      	str	r6, [r0, #0]
 800bb1e:	60c6      	str	r6, [r0, #12]
 800bb20:	b13c      	cbz	r4, 800bb32 <_Bfree+0x3a>
 800bb22:	69eb      	ldr	r3, [r5, #28]
 800bb24:	6862      	ldr	r2, [r4, #4]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb2c:	6021      	str	r1, [r4, #0]
 800bb2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	0800eaff 	.word	0x0800eaff
 800bb38:	0800eb7f 	.word	0x0800eb7f

0800bb3c <__multadd>:
 800bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	690d      	ldr	r5, [r1, #16]
 800bb42:	4607      	mov	r7, r0
 800bb44:	460c      	mov	r4, r1
 800bb46:	461e      	mov	r6, r3
 800bb48:	f101 0c14 	add.w	ip, r1, #20
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb52:	b299      	uxth	r1, r3
 800bb54:	fb02 6101 	mla	r1, r2, r1, r6
 800bb58:	0c1e      	lsrs	r6, r3, #16
 800bb5a:	0c0b      	lsrs	r3, r1, #16
 800bb5c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb60:	b289      	uxth	r1, r1
 800bb62:	3001      	adds	r0, #1
 800bb64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb68:	4285      	cmp	r5, r0
 800bb6a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb72:	dcec      	bgt.n	800bb4e <__multadd+0x12>
 800bb74:	b30e      	cbz	r6, 800bbba <__multadd+0x7e>
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	dc19      	bgt.n	800bbb0 <__multadd+0x74>
 800bb7c:	6861      	ldr	r1, [r4, #4]
 800bb7e:	4638      	mov	r0, r7
 800bb80:	3101      	adds	r1, #1
 800bb82:	f7ff ff79 	bl	800ba78 <_Balloc>
 800bb86:	4680      	mov	r8, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <__multadd+0x5a>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc0 <__multadd+0x84>)
 800bb8e:	480d      	ldr	r0, [pc, #52]	@ (800bbc4 <__multadd+0x88>)
 800bb90:	21ba      	movs	r1, #186	@ 0xba
 800bb92:	f001 fead 	bl	800d8f0 <__assert_func>
 800bb96:	6922      	ldr	r2, [r4, #16]
 800bb98:	3202      	adds	r2, #2
 800bb9a:	f104 010c 	add.w	r1, r4, #12
 800bb9e:	0092      	lsls	r2, r2, #2
 800bba0:	300c      	adds	r0, #12
 800bba2:	f7fe fffa 	bl	800ab9a <memcpy>
 800bba6:	4621      	mov	r1, r4
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff ffa5 	bl	800baf8 <_Bfree>
 800bbae:	4644      	mov	r4, r8
 800bbb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	615e      	str	r6, [r3, #20]
 800bbb8:	6125      	str	r5, [r4, #16]
 800bbba:	4620      	mov	r0, r4
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	0800eb6e 	.word	0x0800eb6e
 800bbc4:	0800eb7f 	.word	0x0800eb7f

0800bbc8 <__s2b>:
 800bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	460c      	mov	r4, r1
 800bbce:	4615      	mov	r5, r2
 800bbd0:	461f      	mov	r7, r3
 800bbd2:	2209      	movs	r2, #9
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbdc:	2100      	movs	r1, #0
 800bbde:	2201      	movs	r2, #1
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	db09      	blt.n	800bbf8 <__s2b+0x30>
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7ff ff47 	bl	800ba78 <_Balloc>
 800bbea:	b940      	cbnz	r0, 800bbfe <__s2b+0x36>
 800bbec:	4602      	mov	r2, r0
 800bbee:	4b19      	ldr	r3, [pc, #100]	@ (800bc54 <__s2b+0x8c>)
 800bbf0:	4819      	ldr	r0, [pc, #100]	@ (800bc58 <__s2b+0x90>)
 800bbf2:	21d3      	movs	r1, #211	@ 0xd3
 800bbf4:	f001 fe7c 	bl	800d8f0 <__assert_func>
 800bbf8:	0052      	lsls	r2, r2, #1
 800bbfa:	3101      	adds	r1, #1
 800bbfc:	e7f0      	b.n	800bbe0 <__s2b+0x18>
 800bbfe:	9b08      	ldr	r3, [sp, #32]
 800bc00:	6143      	str	r3, [r0, #20]
 800bc02:	2d09      	cmp	r5, #9
 800bc04:	f04f 0301 	mov.w	r3, #1
 800bc08:	6103      	str	r3, [r0, #16]
 800bc0a:	dd16      	ble.n	800bc3a <__s2b+0x72>
 800bc0c:	f104 0909 	add.w	r9, r4, #9
 800bc10:	46c8      	mov	r8, r9
 800bc12:	442c      	add	r4, r5
 800bc14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc18:	4601      	mov	r1, r0
 800bc1a:	3b30      	subs	r3, #48	@ 0x30
 800bc1c:	220a      	movs	r2, #10
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f7ff ff8c 	bl	800bb3c <__multadd>
 800bc24:	45a0      	cmp	r8, r4
 800bc26:	d1f5      	bne.n	800bc14 <__s2b+0x4c>
 800bc28:	f1a5 0408 	sub.w	r4, r5, #8
 800bc2c:	444c      	add	r4, r9
 800bc2e:	1b2d      	subs	r5, r5, r4
 800bc30:	1963      	adds	r3, r4, r5
 800bc32:	42bb      	cmp	r3, r7
 800bc34:	db04      	blt.n	800bc40 <__s2b+0x78>
 800bc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	340a      	adds	r4, #10
 800bc3c:	2509      	movs	r5, #9
 800bc3e:	e7f6      	b.n	800bc2e <__s2b+0x66>
 800bc40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc44:	4601      	mov	r1, r0
 800bc46:	3b30      	subs	r3, #48	@ 0x30
 800bc48:	220a      	movs	r2, #10
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff ff76 	bl	800bb3c <__multadd>
 800bc50:	e7ee      	b.n	800bc30 <__s2b+0x68>
 800bc52:	bf00      	nop
 800bc54:	0800eb6e 	.word	0x0800eb6e
 800bc58:	0800eb7f 	.word	0x0800eb7f

0800bc5c <__hi0bits>:
 800bc5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bc60:	4603      	mov	r3, r0
 800bc62:	bf36      	itet	cc
 800bc64:	0403      	lslcc	r3, r0, #16
 800bc66:	2000      	movcs	r0, #0
 800bc68:	2010      	movcc	r0, #16
 800bc6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc6e:	bf3c      	itt	cc
 800bc70:	021b      	lslcc	r3, r3, #8
 800bc72:	3008      	addcc	r0, #8
 800bc74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc78:	bf3c      	itt	cc
 800bc7a:	011b      	lslcc	r3, r3, #4
 800bc7c:	3004      	addcc	r0, #4
 800bc7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc82:	bf3c      	itt	cc
 800bc84:	009b      	lslcc	r3, r3, #2
 800bc86:	3002      	addcc	r0, #2
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	db05      	blt.n	800bc98 <__hi0bits+0x3c>
 800bc8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc90:	f100 0001 	add.w	r0, r0, #1
 800bc94:	bf08      	it	eq
 800bc96:	2020      	moveq	r0, #32
 800bc98:	4770      	bx	lr

0800bc9a <__lo0bits>:
 800bc9a:	6803      	ldr	r3, [r0, #0]
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	f013 0007 	ands.w	r0, r3, #7
 800bca2:	d00b      	beq.n	800bcbc <__lo0bits+0x22>
 800bca4:	07d9      	lsls	r1, r3, #31
 800bca6:	d421      	bmi.n	800bcec <__lo0bits+0x52>
 800bca8:	0798      	lsls	r0, r3, #30
 800bcaa:	bf49      	itett	mi
 800bcac:	085b      	lsrmi	r3, r3, #1
 800bcae:	089b      	lsrpl	r3, r3, #2
 800bcb0:	2001      	movmi	r0, #1
 800bcb2:	6013      	strmi	r3, [r2, #0]
 800bcb4:	bf5c      	itt	pl
 800bcb6:	6013      	strpl	r3, [r2, #0]
 800bcb8:	2002      	movpl	r0, #2
 800bcba:	4770      	bx	lr
 800bcbc:	b299      	uxth	r1, r3
 800bcbe:	b909      	cbnz	r1, 800bcc4 <__lo0bits+0x2a>
 800bcc0:	0c1b      	lsrs	r3, r3, #16
 800bcc2:	2010      	movs	r0, #16
 800bcc4:	b2d9      	uxtb	r1, r3
 800bcc6:	b909      	cbnz	r1, 800bccc <__lo0bits+0x32>
 800bcc8:	3008      	adds	r0, #8
 800bcca:	0a1b      	lsrs	r3, r3, #8
 800bccc:	0719      	lsls	r1, r3, #28
 800bcce:	bf04      	itt	eq
 800bcd0:	091b      	lsreq	r3, r3, #4
 800bcd2:	3004      	addeq	r0, #4
 800bcd4:	0799      	lsls	r1, r3, #30
 800bcd6:	bf04      	itt	eq
 800bcd8:	089b      	lsreq	r3, r3, #2
 800bcda:	3002      	addeq	r0, #2
 800bcdc:	07d9      	lsls	r1, r3, #31
 800bcde:	d403      	bmi.n	800bce8 <__lo0bits+0x4e>
 800bce0:	085b      	lsrs	r3, r3, #1
 800bce2:	f100 0001 	add.w	r0, r0, #1
 800bce6:	d003      	beq.n	800bcf0 <__lo0bits+0x56>
 800bce8:	6013      	str	r3, [r2, #0]
 800bcea:	4770      	bx	lr
 800bcec:	2000      	movs	r0, #0
 800bcee:	4770      	bx	lr
 800bcf0:	2020      	movs	r0, #32
 800bcf2:	4770      	bx	lr

0800bcf4 <__i2b>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	f7ff febd 	bl	800ba78 <_Balloc>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	b928      	cbnz	r0, 800bd0e <__i2b+0x1a>
 800bd02:	4b05      	ldr	r3, [pc, #20]	@ (800bd18 <__i2b+0x24>)
 800bd04:	4805      	ldr	r0, [pc, #20]	@ (800bd1c <__i2b+0x28>)
 800bd06:	f240 1145 	movw	r1, #325	@ 0x145
 800bd0a:	f001 fdf1 	bl	800d8f0 <__assert_func>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	6144      	str	r4, [r0, #20]
 800bd12:	6103      	str	r3, [r0, #16]
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	bf00      	nop
 800bd18:	0800eb6e 	.word	0x0800eb6e
 800bd1c:	0800eb7f 	.word	0x0800eb7f

0800bd20 <__multiply>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	4617      	mov	r7, r2
 800bd26:	690a      	ldr	r2, [r1, #16]
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	bfa8      	it	ge
 800bd2e:	463b      	movge	r3, r7
 800bd30:	4689      	mov	r9, r1
 800bd32:	bfa4      	itt	ge
 800bd34:	460f      	movge	r7, r1
 800bd36:	4699      	movge	r9, r3
 800bd38:	693d      	ldr	r5, [r7, #16]
 800bd3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	eb05 060a 	add.w	r6, r5, sl
 800bd46:	42b3      	cmp	r3, r6
 800bd48:	b085      	sub	sp, #20
 800bd4a:	bfb8      	it	lt
 800bd4c:	3101      	addlt	r1, #1
 800bd4e:	f7ff fe93 	bl	800ba78 <_Balloc>
 800bd52:	b930      	cbnz	r0, 800bd62 <__multiply+0x42>
 800bd54:	4602      	mov	r2, r0
 800bd56:	4b41      	ldr	r3, [pc, #260]	@ (800be5c <__multiply+0x13c>)
 800bd58:	4841      	ldr	r0, [pc, #260]	@ (800be60 <__multiply+0x140>)
 800bd5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bd5e:	f001 fdc7 	bl	800d8f0 <__assert_func>
 800bd62:	f100 0414 	add.w	r4, r0, #20
 800bd66:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bd6a:	4623      	mov	r3, r4
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	4573      	cmp	r3, lr
 800bd70:	d320      	bcc.n	800bdb4 <__multiply+0x94>
 800bd72:	f107 0814 	add.w	r8, r7, #20
 800bd76:	f109 0114 	add.w	r1, r9, #20
 800bd7a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bd7e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bd82:	9302      	str	r3, [sp, #8]
 800bd84:	1beb      	subs	r3, r5, r7
 800bd86:	3b15      	subs	r3, #21
 800bd88:	f023 0303 	bic.w	r3, r3, #3
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	3715      	adds	r7, #21
 800bd90:	42bd      	cmp	r5, r7
 800bd92:	bf38      	it	cc
 800bd94:	2304      	movcc	r3, #4
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	9b02      	ldr	r3, [sp, #8]
 800bd9a:	9103      	str	r1, [sp, #12]
 800bd9c:	428b      	cmp	r3, r1
 800bd9e:	d80c      	bhi.n	800bdba <__multiply+0x9a>
 800bda0:	2e00      	cmp	r6, #0
 800bda2:	dd03      	ble.n	800bdac <__multiply+0x8c>
 800bda4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d055      	beq.n	800be58 <__multiply+0x138>
 800bdac:	6106      	str	r6, [r0, #16]
 800bdae:	b005      	add	sp, #20
 800bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb4:	f843 2b04 	str.w	r2, [r3], #4
 800bdb8:	e7d9      	b.n	800bd6e <__multiply+0x4e>
 800bdba:	f8b1 a000 	ldrh.w	sl, [r1]
 800bdbe:	f1ba 0f00 	cmp.w	sl, #0
 800bdc2:	d01f      	beq.n	800be04 <__multiply+0xe4>
 800bdc4:	46c4      	mov	ip, r8
 800bdc6:	46a1      	mov	r9, r4
 800bdc8:	2700      	movs	r7, #0
 800bdca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdce:	f8d9 3000 	ldr.w	r3, [r9]
 800bdd2:	fa1f fb82 	uxth.w	fp, r2
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	fb0a 330b 	mla	r3, sl, fp, r3
 800bddc:	443b      	add	r3, r7
 800bdde:	f8d9 7000 	ldr.w	r7, [r9]
 800bde2:	0c12      	lsrs	r2, r2, #16
 800bde4:	0c3f      	lsrs	r7, r7, #16
 800bde6:	fb0a 7202 	mla	r2, sl, r2, r7
 800bdea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdf4:	4565      	cmp	r5, ip
 800bdf6:	f849 3b04 	str.w	r3, [r9], #4
 800bdfa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bdfe:	d8e4      	bhi.n	800bdca <__multiply+0xaa>
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	50e7      	str	r7, [r4, r3]
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800be0a:	3104      	adds	r1, #4
 800be0c:	f1b9 0f00 	cmp.w	r9, #0
 800be10:	d020      	beq.n	800be54 <__multiply+0x134>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	4647      	mov	r7, r8
 800be16:	46a4      	mov	ip, r4
 800be18:	f04f 0a00 	mov.w	sl, #0
 800be1c:	f8b7 b000 	ldrh.w	fp, [r7]
 800be20:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800be24:	fb09 220b 	mla	r2, r9, fp, r2
 800be28:	4452      	add	r2, sl
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be30:	f84c 3b04 	str.w	r3, [ip], #4
 800be34:	f857 3b04 	ldr.w	r3, [r7], #4
 800be38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be3c:	f8bc 3000 	ldrh.w	r3, [ip]
 800be40:	fb09 330a 	mla	r3, r9, sl, r3
 800be44:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800be48:	42bd      	cmp	r5, r7
 800be4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be4e:	d8e5      	bhi.n	800be1c <__multiply+0xfc>
 800be50:	9a01      	ldr	r2, [sp, #4]
 800be52:	50a3      	str	r3, [r4, r2]
 800be54:	3404      	adds	r4, #4
 800be56:	e79f      	b.n	800bd98 <__multiply+0x78>
 800be58:	3e01      	subs	r6, #1
 800be5a:	e7a1      	b.n	800bda0 <__multiply+0x80>
 800be5c:	0800eb6e 	.word	0x0800eb6e
 800be60:	0800eb7f 	.word	0x0800eb7f

0800be64 <__pow5mult>:
 800be64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be68:	4615      	mov	r5, r2
 800be6a:	f012 0203 	ands.w	r2, r2, #3
 800be6e:	4607      	mov	r7, r0
 800be70:	460e      	mov	r6, r1
 800be72:	d007      	beq.n	800be84 <__pow5mult+0x20>
 800be74:	4c25      	ldr	r4, [pc, #148]	@ (800bf0c <__pow5mult+0xa8>)
 800be76:	3a01      	subs	r2, #1
 800be78:	2300      	movs	r3, #0
 800be7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be7e:	f7ff fe5d 	bl	800bb3c <__multadd>
 800be82:	4606      	mov	r6, r0
 800be84:	10ad      	asrs	r5, r5, #2
 800be86:	d03d      	beq.n	800bf04 <__pow5mult+0xa0>
 800be88:	69fc      	ldr	r4, [r7, #28]
 800be8a:	b97c      	cbnz	r4, 800beac <__pow5mult+0x48>
 800be8c:	2010      	movs	r0, #16
 800be8e:	f7ff fd3d 	bl	800b90c <malloc>
 800be92:	4602      	mov	r2, r0
 800be94:	61f8      	str	r0, [r7, #28]
 800be96:	b928      	cbnz	r0, 800bea4 <__pow5mult+0x40>
 800be98:	4b1d      	ldr	r3, [pc, #116]	@ (800bf10 <__pow5mult+0xac>)
 800be9a:	481e      	ldr	r0, [pc, #120]	@ (800bf14 <__pow5mult+0xb0>)
 800be9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bea0:	f001 fd26 	bl	800d8f0 <__assert_func>
 800bea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bea8:	6004      	str	r4, [r0, #0]
 800beaa:	60c4      	str	r4, [r0, #12]
 800beac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800beb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800beb4:	b94c      	cbnz	r4, 800beca <__pow5mult+0x66>
 800beb6:	f240 2171 	movw	r1, #625	@ 0x271
 800beba:	4638      	mov	r0, r7
 800bebc:	f7ff ff1a 	bl	800bcf4 <__i2b>
 800bec0:	2300      	movs	r3, #0
 800bec2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bec6:	4604      	mov	r4, r0
 800bec8:	6003      	str	r3, [r0, #0]
 800beca:	f04f 0900 	mov.w	r9, #0
 800bece:	07eb      	lsls	r3, r5, #31
 800bed0:	d50a      	bpl.n	800bee8 <__pow5mult+0x84>
 800bed2:	4631      	mov	r1, r6
 800bed4:	4622      	mov	r2, r4
 800bed6:	4638      	mov	r0, r7
 800bed8:	f7ff ff22 	bl	800bd20 <__multiply>
 800bedc:	4631      	mov	r1, r6
 800bede:	4680      	mov	r8, r0
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff fe09 	bl	800baf8 <_Bfree>
 800bee6:	4646      	mov	r6, r8
 800bee8:	106d      	asrs	r5, r5, #1
 800beea:	d00b      	beq.n	800bf04 <__pow5mult+0xa0>
 800beec:	6820      	ldr	r0, [r4, #0]
 800beee:	b938      	cbnz	r0, 800bf00 <__pow5mult+0x9c>
 800bef0:	4622      	mov	r2, r4
 800bef2:	4621      	mov	r1, r4
 800bef4:	4638      	mov	r0, r7
 800bef6:	f7ff ff13 	bl	800bd20 <__multiply>
 800befa:	6020      	str	r0, [r4, #0]
 800befc:	f8c0 9000 	str.w	r9, [r0]
 800bf00:	4604      	mov	r4, r0
 800bf02:	e7e4      	b.n	800bece <__pow5mult+0x6a>
 800bf04:	4630      	mov	r0, r6
 800bf06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf0a:	bf00      	nop
 800bf0c:	0800ec90 	.word	0x0800ec90
 800bf10:	0800eaff 	.word	0x0800eaff
 800bf14:	0800eb7f 	.word	0x0800eb7f

0800bf18 <__lshift>:
 800bf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	6849      	ldr	r1, [r1, #4]
 800bf20:	6923      	ldr	r3, [r4, #16]
 800bf22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf26:	68a3      	ldr	r3, [r4, #8]
 800bf28:	4607      	mov	r7, r0
 800bf2a:	4691      	mov	r9, r2
 800bf2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf30:	f108 0601 	add.w	r6, r8, #1
 800bf34:	42b3      	cmp	r3, r6
 800bf36:	db0b      	blt.n	800bf50 <__lshift+0x38>
 800bf38:	4638      	mov	r0, r7
 800bf3a:	f7ff fd9d 	bl	800ba78 <_Balloc>
 800bf3e:	4605      	mov	r5, r0
 800bf40:	b948      	cbnz	r0, 800bf56 <__lshift+0x3e>
 800bf42:	4602      	mov	r2, r0
 800bf44:	4b28      	ldr	r3, [pc, #160]	@ (800bfe8 <__lshift+0xd0>)
 800bf46:	4829      	ldr	r0, [pc, #164]	@ (800bfec <__lshift+0xd4>)
 800bf48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bf4c:	f001 fcd0 	bl	800d8f0 <__assert_func>
 800bf50:	3101      	adds	r1, #1
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	e7ee      	b.n	800bf34 <__lshift+0x1c>
 800bf56:	2300      	movs	r3, #0
 800bf58:	f100 0114 	add.w	r1, r0, #20
 800bf5c:	f100 0210 	add.w	r2, r0, #16
 800bf60:	4618      	mov	r0, r3
 800bf62:	4553      	cmp	r3, sl
 800bf64:	db33      	blt.n	800bfce <__lshift+0xb6>
 800bf66:	6920      	ldr	r0, [r4, #16]
 800bf68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf6c:	f104 0314 	add.w	r3, r4, #20
 800bf70:	f019 091f 	ands.w	r9, r9, #31
 800bf74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf7c:	d02b      	beq.n	800bfd6 <__lshift+0xbe>
 800bf7e:	f1c9 0e20 	rsb	lr, r9, #32
 800bf82:	468a      	mov	sl, r1
 800bf84:	2200      	movs	r2, #0
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	fa00 f009 	lsl.w	r0, r0, r9
 800bf8c:	4310      	orrs	r0, r2
 800bf8e:	f84a 0b04 	str.w	r0, [sl], #4
 800bf92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf96:	459c      	cmp	ip, r3
 800bf98:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf9c:	d8f3      	bhi.n	800bf86 <__lshift+0x6e>
 800bf9e:	ebac 0304 	sub.w	r3, ip, r4
 800bfa2:	3b15      	subs	r3, #21
 800bfa4:	f023 0303 	bic.w	r3, r3, #3
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	f104 0015 	add.w	r0, r4, #21
 800bfae:	4560      	cmp	r0, ip
 800bfb0:	bf88      	it	hi
 800bfb2:	2304      	movhi	r3, #4
 800bfb4:	50ca      	str	r2, [r1, r3]
 800bfb6:	b10a      	cbz	r2, 800bfbc <__lshift+0xa4>
 800bfb8:	f108 0602 	add.w	r6, r8, #2
 800bfbc:	3e01      	subs	r6, #1
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	612e      	str	r6, [r5, #16]
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	f7ff fd98 	bl	800baf8 <_Bfree>
 800bfc8:	4628      	mov	r0, r5
 800bfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfce:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	e7c5      	b.n	800bf62 <__lshift+0x4a>
 800bfd6:	3904      	subs	r1, #4
 800bfd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfe0:	459c      	cmp	ip, r3
 800bfe2:	d8f9      	bhi.n	800bfd8 <__lshift+0xc0>
 800bfe4:	e7ea      	b.n	800bfbc <__lshift+0xa4>
 800bfe6:	bf00      	nop
 800bfe8:	0800eb6e 	.word	0x0800eb6e
 800bfec:	0800eb7f 	.word	0x0800eb7f

0800bff0 <__mcmp>:
 800bff0:	690a      	ldr	r2, [r1, #16]
 800bff2:	4603      	mov	r3, r0
 800bff4:	6900      	ldr	r0, [r0, #16]
 800bff6:	1a80      	subs	r0, r0, r2
 800bff8:	b530      	push	{r4, r5, lr}
 800bffa:	d10e      	bne.n	800c01a <__mcmp+0x2a>
 800bffc:	3314      	adds	r3, #20
 800bffe:	3114      	adds	r1, #20
 800c000:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c004:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c008:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c00c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c010:	4295      	cmp	r5, r2
 800c012:	d003      	beq.n	800c01c <__mcmp+0x2c>
 800c014:	d205      	bcs.n	800c022 <__mcmp+0x32>
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	bd30      	pop	{r4, r5, pc}
 800c01c:	42a3      	cmp	r3, r4
 800c01e:	d3f3      	bcc.n	800c008 <__mcmp+0x18>
 800c020:	e7fb      	b.n	800c01a <__mcmp+0x2a>
 800c022:	2001      	movs	r0, #1
 800c024:	e7f9      	b.n	800c01a <__mcmp+0x2a>
	...

0800c028 <__mdiff>:
 800c028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02c:	4689      	mov	r9, r1
 800c02e:	4606      	mov	r6, r0
 800c030:	4611      	mov	r1, r2
 800c032:	4648      	mov	r0, r9
 800c034:	4614      	mov	r4, r2
 800c036:	f7ff ffdb 	bl	800bff0 <__mcmp>
 800c03a:	1e05      	subs	r5, r0, #0
 800c03c:	d112      	bne.n	800c064 <__mdiff+0x3c>
 800c03e:	4629      	mov	r1, r5
 800c040:	4630      	mov	r0, r6
 800c042:	f7ff fd19 	bl	800ba78 <_Balloc>
 800c046:	4602      	mov	r2, r0
 800c048:	b928      	cbnz	r0, 800c056 <__mdiff+0x2e>
 800c04a:	4b3f      	ldr	r3, [pc, #252]	@ (800c148 <__mdiff+0x120>)
 800c04c:	f240 2137 	movw	r1, #567	@ 0x237
 800c050:	483e      	ldr	r0, [pc, #248]	@ (800c14c <__mdiff+0x124>)
 800c052:	f001 fc4d 	bl	800d8f0 <__assert_func>
 800c056:	2301      	movs	r3, #1
 800c058:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c05c:	4610      	mov	r0, r2
 800c05e:	b003      	add	sp, #12
 800c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c064:	bfbc      	itt	lt
 800c066:	464b      	movlt	r3, r9
 800c068:	46a1      	movlt	r9, r4
 800c06a:	4630      	mov	r0, r6
 800c06c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c070:	bfba      	itte	lt
 800c072:	461c      	movlt	r4, r3
 800c074:	2501      	movlt	r5, #1
 800c076:	2500      	movge	r5, #0
 800c078:	f7ff fcfe 	bl	800ba78 <_Balloc>
 800c07c:	4602      	mov	r2, r0
 800c07e:	b918      	cbnz	r0, 800c088 <__mdiff+0x60>
 800c080:	4b31      	ldr	r3, [pc, #196]	@ (800c148 <__mdiff+0x120>)
 800c082:	f240 2145 	movw	r1, #581	@ 0x245
 800c086:	e7e3      	b.n	800c050 <__mdiff+0x28>
 800c088:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c08c:	6926      	ldr	r6, [r4, #16]
 800c08e:	60c5      	str	r5, [r0, #12]
 800c090:	f109 0310 	add.w	r3, r9, #16
 800c094:	f109 0514 	add.w	r5, r9, #20
 800c098:	f104 0e14 	add.w	lr, r4, #20
 800c09c:	f100 0b14 	add.w	fp, r0, #20
 800c0a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c0a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c0a8:	9301      	str	r3, [sp, #4]
 800c0aa:	46d9      	mov	r9, fp
 800c0ac:	f04f 0c00 	mov.w	ip, #0
 800c0b0:	9b01      	ldr	r3, [sp, #4]
 800c0b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c0b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	fa1f f38a 	uxth.w	r3, sl
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	b283      	uxth	r3, r0
 800c0c4:	1acb      	subs	r3, r1, r3
 800c0c6:	0c00      	lsrs	r0, r0, #16
 800c0c8:	4463      	add	r3, ip
 800c0ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c0ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c0d8:	4576      	cmp	r6, lr
 800c0da:	f849 3b04 	str.w	r3, [r9], #4
 800c0de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0e2:	d8e5      	bhi.n	800c0b0 <__mdiff+0x88>
 800c0e4:	1b33      	subs	r3, r6, r4
 800c0e6:	3b15      	subs	r3, #21
 800c0e8:	f023 0303 	bic.w	r3, r3, #3
 800c0ec:	3415      	adds	r4, #21
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	42a6      	cmp	r6, r4
 800c0f2:	bf38      	it	cc
 800c0f4:	2304      	movcc	r3, #4
 800c0f6:	441d      	add	r5, r3
 800c0f8:	445b      	add	r3, fp
 800c0fa:	461e      	mov	r6, r3
 800c0fc:	462c      	mov	r4, r5
 800c0fe:	4544      	cmp	r4, r8
 800c100:	d30e      	bcc.n	800c120 <__mdiff+0xf8>
 800c102:	f108 0103 	add.w	r1, r8, #3
 800c106:	1b49      	subs	r1, r1, r5
 800c108:	f021 0103 	bic.w	r1, r1, #3
 800c10c:	3d03      	subs	r5, #3
 800c10e:	45a8      	cmp	r8, r5
 800c110:	bf38      	it	cc
 800c112:	2100      	movcc	r1, #0
 800c114:	440b      	add	r3, r1
 800c116:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c11a:	b191      	cbz	r1, 800c142 <__mdiff+0x11a>
 800c11c:	6117      	str	r7, [r2, #16]
 800c11e:	e79d      	b.n	800c05c <__mdiff+0x34>
 800c120:	f854 1b04 	ldr.w	r1, [r4], #4
 800c124:	46e6      	mov	lr, ip
 800c126:	0c08      	lsrs	r0, r1, #16
 800c128:	fa1c fc81 	uxtah	ip, ip, r1
 800c12c:	4471      	add	r1, lr
 800c12e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c132:	b289      	uxth	r1, r1
 800c134:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c138:	f846 1b04 	str.w	r1, [r6], #4
 800c13c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c140:	e7dd      	b.n	800c0fe <__mdiff+0xd6>
 800c142:	3f01      	subs	r7, #1
 800c144:	e7e7      	b.n	800c116 <__mdiff+0xee>
 800c146:	bf00      	nop
 800c148:	0800eb6e 	.word	0x0800eb6e
 800c14c:	0800eb7f 	.word	0x0800eb7f

0800c150 <__ulp>:
 800c150:	b082      	sub	sp, #8
 800c152:	ed8d 0b00 	vstr	d0, [sp]
 800c156:	9a01      	ldr	r2, [sp, #4]
 800c158:	4b0f      	ldr	r3, [pc, #60]	@ (800c198 <__ulp+0x48>)
 800c15a:	4013      	ands	r3, r2
 800c15c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c160:	2b00      	cmp	r3, #0
 800c162:	dc08      	bgt.n	800c176 <__ulp+0x26>
 800c164:	425b      	negs	r3, r3
 800c166:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c16a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c16e:	da04      	bge.n	800c17a <__ulp+0x2a>
 800c170:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c174:	4113      	asrs	r3, r2
 800c176:	2200      	movs	r2, #0
 800c178:	e008      	b.n	800c18c <__ulp+0x3c>
 800c17a:	f1a2 0314 	sub.w	r3, r2, #20
 800c17e:	2b1e      	cmp	r3, #30
 800c180:	bfda      	itte	le
 800c182:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c186:	40da      	lsrle	r2, r3
 800c188:	2201      	movgt	r2, #1
 800c18a:	2300      	movs	r3, #0
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	ec41 0b10 	vmov	d0, r0, r1
 800c194:	b002      	add	sp, #8
 800c196:	4770      	bx	lr
 800c198:	7ff00000 	.word	0x7ff00000

0800c19c <__b2d>:
 800c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a0:	6906      	ldr	r6, [r0, #16]
 800c1a2:	f100 0814 	add.w	r8, r0, #20
 800c1a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c1aa:	1f37      	subs	r7, r6, #4
 800c1ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7ff fd53 	bl	800bc5c <__hi0bits>
 800c1b6:	f1c0 0320 	rsb	r3, r0, #32
 800c1ba:	280a      	cmp	r0, #10
 800c1bc:	600b      	str	r3, [r1, #0]
 800c1be:	491b      	ldr	r1, [pc, #108]	@ (800c22c <__b2d+0x90>)
 800c1c0:	dc15      	bgt.n	800c1ee <__b2d+0x52>
 800c1c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c1c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c1ca:	45b8      	cmp	r8, r7
 800c1cc:	ea43 0501 	orr.w	r5, r3, r1
 800c1d0:	bf34      	ite	cc
 800c1d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1d6:	2300      	movcs	r3, #0
 800c1d8:	3015      	adds	r0, #21
 800c1da:	fa02 f000 	lsl.w	r0, r2, r0
 800c1de:	fa23 f30c 	lsr.w	r3, r3, ip
 800c1e2:	4303      	orrs	r3, r0
 800c1e4:	461c      	mov	r4, r3
 800c1e6:	ec45 4b10 	vmov	d0, r4, r5
 800c1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ee:	45b8      	cmp	r8, r7
 800c1f0:	bf3a      	itte	cc
 800c1f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c1fa:	2300      	movcs	r3, #0
 800c1fc:	380b      	subs	r0, #11
 800c1fe:	d012      	beq.n	800c226 <__b2d+0x8a>
 800c200:	f1c0 0120 	rsb	r1, r0, #32
 800c204:	fa23 f401 	lsr.w	r4, r3, r1
 800c208:	4082      	lsls	r2, r0
 800c20a:	4322      	orrs	r2, r4
 800c20c:	4547      	cmp	r7, r8
 800c20e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c212:	bf8c      	ite	hi
 800c214:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c218:	2200      	movls	r2, #0
 800c21a:	4083      	lsls	r3, r0
 800c21c:	40ca      	lsrs	r2, r1
 800c21e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c222:	4313      	orrs	r3, r2
 800c224:	e7de      	b.n	800c1e4 <__b2d+0x48>
 800c226:	ea42 0501 	orr.w	r5, r2, r1
 800c22a:	e7db      	b.n	800c1e4 <__b2d+0x48>
 800c22c:	3ff00000 	.word	0x3ff00000

0800c230 <__d2b>:
 800c230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c234:	460f      	mov	r7, r1
 800c236:	2101      	movs	r1, #1
 800c238:	ec59 8b10 	vmov	r8, r9, d0
 800c23c:	4616      	mov	r6, r2
 800c23e:	f7ff fc1b 	bl	800ba78 <_Balloc>
 800c242:	4604      	mov	r4, r0
 800c244:	b930      	cbnz	r0, 800c254 <__d2b+0x24>
 800c246:	4602      	mov	r2, r0
 800c248:	4b23      	ldr	r3, [pc, #140]	@ (800c2d8 <__d2b+0xa8>)
 800c24a:	4824      	ldr	r0, [pc, #144]	@ (800c2dc <__d2b+0xac>)
 800c24c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c250:	f001 fb4e 	bl	800d8f0 <__assert_func>
 800c254:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c25c:	b10d      	cbz	r5, 800c262 <__d2b+0x32>
 800c25e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c262:	9301      	str	r3, [sp, #4]
 800c264:	f1b8 0300 	subs.w	r3, r8, #0
 800c268:	d023      	beq.n	800c2b2 <__d2b+0x82>
 800c26a:	4668      	mov	r0, sp
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	f7ff fd14 	bl	800bc9a <__lo0bits>
 800c272:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c276:	b1d0      	cbz	r0, 800c2ae <__d2b+0x7e>
 800c278:	f1c0 0320 	rsb	r3, r0, #32
 800c27c:	fa02 f303 	lsl.w	r3, r2, r3
 800c280:	430b      	orrs	r3, r1
 800c282:	40c2      	lsrs	r2, r0
 800c284:	6163      	str	r3, [r4, #20]
 800c286:	9201      	str	r2, [sp, #4]
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	61a3      	str	r3, [r4, #24]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	bf0c      	ite	eq
 800c290:	2201      	moveq	r2, #1
 800c292:	2202      	movne	r2, #2
 800c294:	6122      	str	r2, [r4, #16]
 800c296:	b1a5      	cbz	r5, 800c2c2 <__d2b+0x92>
 800c298:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c29c:	4405      	add	r5, r0
 800c29e:	603d      	str	r5, [r7, #0]
 800c2a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c2a4:	6030      	str	r0, [r6, #0]
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	b003      	add	sp, #12
 800c2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2ae:	6161      	str	r1, [r4, #20]
 800c2b0:	e7ea      	b.n	800c288 <__d2b+0x58>
 800c2b2:	a801      	add	r0, sp, #4
 800c2b4:	f7ff fcf1 	bl	800bc9a <__lo0bits>
 800c2b8:	9b01      	ldr	r3, [sp, #4]
 800c2ba:	6163      	str	r3, [r4, #20]
 800c2bc:	3020      	adds	r0, #32
 800c2be:	2201      	movs	r2, #1
 800c2c0:	e7e8      	b.n	800c294 <__d2b+0x64>
 800c2c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c2ca:	6038      	str	r0, [r7, #0]
 800c2cc:	6918      	ldr	r0, [r3, #16]
 800c2ce:	f7ff fcc5 	bl	800bc5c <__hi0bits>
 800c2d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2d6:	e7e5      	b.n	800c2a4 <__d2b+0x74>
 800c2d8:	0800eb6e 	.word	0x0800eb6e
 800c2dc:	0800eb7f 	.word	0x0800eb7f

0800c2e0 <__ratio>:
 800c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e4:	b085      	sub	sp, #20
 800c2e6:	e9cd 1000 	strd	r1, r0, [sp]
 800c2ea:	a902      	add	r1, sp, #8
 800c2ec:	f7ff ff56 	bl	800c19c <__b2d>
 800c2f0:	9800      	ldr	r0, [sp, #0]
 800c2f2:	a903      	add	r1, sp, #12
 800c2f4:	ec55 4b10 	vmov	r4, r5, d0
 800c2f8:	f7ff ff50 	bl	800c19c <__b2d>
 800c2fc:	9b01      	ldr	r3, [sp, #4]
 800c2fe:	6919      	ldr	r1, [r3, #16]
 800c300:	9b00      	ldr	r3, [sp, #0]
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	1ac9      	subs	r1, r1, r3
 800c306:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c30a:	1a9b      	subs	r3, r3, r2
 800c30c:	ec5b ab10 	vmov	sl, fp, d0
 800c310:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfce      	itee	gt
 800c318:	462a      	movgt	r2, r5
 800c31a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c31e:	465a      	movle	r2, fp
 800c320:	462f      	mov	r7, r5
 800c322:	46d9      	mov	r9, fp
 800c324:	bfcc      	ite	gt
 800c326:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c32a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c32e:	464b      	mov	r3, r9
 800c330:	4652      	mov	r2, sl
 800c332:	4620      	mov	r0, r4
 800c334:	4639      	mov	r1, r7
 800c336:	f7f4 fa89 	bl	800084c <__aeabi_ddiv>
 800c33a:	ec41 0b10 	vmov	d0, r0, r1
 800c33e:	b005      	add	sp, #20
 800c340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c344 <__copybits>:
 800c344:	3901      	subs	r1, #1
 800c346:	b570      	push	{r4, r5, r6, lr}
 800c348:	1149      	asrs	r1, r1, #5
 800c34a:	6914      	ldr	r4, [r2, #16]
 800c34c:	3101      	adds	r1, #1
 800c34e:	f102 0314 	add.w	r3, r2, #20
 800c352:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c356:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c35a:	1f05      	subs	r5, r0, #4
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	d30c      	bcc.n	800c37a <__copybits+0x36>
 800c360:	1aa3      	subs	r3, r4, r2
 800c362:	3b11      	subs	r3, #17
 800c364:	f023 0303 	bic.w	r3, r3, #3
 800c368:	3211      	adds	r2, #17
 800c36a:	42a2      	cmp	r2, r4
 800c36c:	bf88      	it	hi
 800c36e:	2300      	movhi	r3, #0
 800c370:	4418      	add	r0, r3
 800c372:	2300      	movs	r3, #0
 800c374:	4288      	cmp	r0, r1
 800c376:	d305      	bcc.n	800c384 <__copybits+0x40>
 800c378:	bd70      	pop	{r4, r5, r6, pc}
 800c37a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c37e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c382:	e7eb      	b.n	800c35c <__copybits+0x18>
 800c384:	f840 3b04 	str.w	r3, [r0], #4
 800c388:	e7f4      	b.n	800c374 <__copybits+0x30>

0800c38a <__any_on>:
 800c38a:	f100 0214 	add.w	r2, r0, #20
 800c38e:	6900      	ldr	r0, [r0, #16]
 800c390:	114b      	asrs	r3, r1, #5
 800c392:	4298      	cmp	r0, r3
 800c394:	b510      	push	{r4, lr}
 800c396:	db11      	blt.n	800c3bc <__any_on+0x32>
 800c398:	dd0a      	ble.n	800c3b0 <__any_on+0x26>
 800c39a:	f011 011f 	ands.w	r1, r1, #31
 800c39e:	d007      	beq.n	800c3b0 <__any_on+0x26>
 800c3a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3a4:	fa24 f001 	lsr.w	r0, r4, r1
 800c3a8:	fa00 f101 	lsl.w	r1, r0, r1
 800c3ac:	428c      	cmp	r4, r1
 800c3ae:	d10b      	bne.n	800c3c8 <__any_on+0x3e>
 800c3b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d803      	bhi.n	800c3c0 <__any_on+0x36>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	bd10      	pop	{r4, pc}
 800c3bc:	4603      	mov	r3, r0
 800c3be:	e7f7      	b.n	800c3b0 <__any_on+0x26>
 800c3c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3c4:	2900      	cmp	r1, #0
 800c3c6:	d0f5      	beq.n	800c3b4 <__any_on+0x2a>
 800c3c8:	2001      	movs	r0, #1
 800c3ca:	e7f6      	b.n	800c3ba <__any_on+0x30>

0800c3cc <sulp>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	ec45 4b10 	vmov	d0, r4, r5
 800c3d6:	4616      	mov	r6, r2
 800c3d8:	f7ff feba 	bl	800c150 <__ulp>
 800c3dc:	ec51 0b10 	vmov	r0, r1, d0
 800c3e0:	b17e      	cbz	r6, 800c402 <sulp+0x36>
 800c3e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c3e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	dd09      	ble.n	800c402 <sulp+0x36>
 800c3ee:	051b      	lsls	r3, r3, #20
 800c3f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c3f4:	2400      	movs	r4, #0
 800c3f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	462b      	mov	r3, r5
 800c3fe:	f7f4 f8fb 	bl	80005f8 <__aeabi_dmul>
 800c402:	ec41 0b10 	vmov	d0, r0, r1
 800c406:	bd70      	pop	{r4, r5, r6, pc}

0800c408 <_strtod_l>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	b09f      	sub	sp, #124	@ 0x7c
 800c40e:	460c      	mov	r4, r1
 800c410:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c412:	2200      	movs	r2, #0
 800c414:	921a      	str	r2, [sp, #104]	@ 0x68
 800c416:	9005      	str	r0, [sp, #20]
 800c418:	f04f 0a00 	mov.w	sl, #0
 800c41c:	f04f 0b00 	mov.w	fp, #0
 800c420:	460a      	mov	r2, r1
 800c422:	9219      	str	r2, [sp, #100]	@ 0x64
 800c424:	7811      	ldrb	r1, [r2, #0]
 800c426:	292b      	cmp	r1, #43	@ 0x2b
 800c428:	d04a      	beq.n	800c4c0 <_strtod_l+0xb8>
 800c42a:	d838      	bhi.n	800c49e <_strtod_l+0x96>
 800c42c:	290d      	cmp	r1, #13
 800c42e:	d832      	bhi.n	800c496 <_strtod_l+0x8e>
 800c430:	2908      	cmp	r1, #8
 800c432:	d832      	bhi.n	800c49a <_strtod_l+0x92>
 800c434:	2900      	cmp	r1, #0
 800c436:	d03b      	beq.n	800c4b0 <_strtod_l+0xa8>
 800c438:	2200      	movs	r2, #0
 800c43a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c43c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c43e:	782a      	ldrb	r2, [r5, #0]
 800c440:	2a30      	cmp	r2, #48	@ 0x30
 800c442:	f040 80b2 	bne.w	800c5aa <_strtod_l+0x1a2>
 800c446:	786a      	ldrb	r2, [r5, #1]
 800c448:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c44c:	2a58      	cmp	r2, #88	@ 0x58
 800c44e:	d16e      	bne.n	800c52e <_strtod_l+0x126>
 800c450:	9302      	str	r3, [sp, #8]
 800c452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	ab1a      	add	r3, sp, #104	@ 0x68
 800c458:	9300      	str	r3, [sp, #0]
 800c45a:	4a8f      	ldr	r2, [pc, #572]	@ (800c698 <_strtod_l+0x290>)
 800c45c:	9805      	ldr	r0, [sp, #20]
 800c45e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c460:	a919      	add	r1, sp, #100	@ 0x64
 800c462:	f001 fadf 	bl	800da24 <__gethex>
 800c466:	f010 060f 	ands.w	r6, r0, #15
 800c46a:	4604      	mov	r4, r0
 800c46c:	d005      	beq.n	800c47a <_strtod_l+0x72>
 800c46e:	2e06      	cmp	r6, #6
 800c470:	d128      	bne.n	800c4c4 <_strtod_l+0xbc>
 800c472:	3501      	adds	r5, #1
 800c474:	2300      	movs	r3, #0
 800c476:	9519      	str	r5, [sp, #100]	@ 0x64
 800c478:	930e      	str	r3, [sp, #56]	@ 0x38
 800c47a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f040 858e 	bne.w	800cf9e <_strtod_l+0xb96>
 800c482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c484:	b1cb      	cbz	r3, 800c4ba <_strtod_l+0xb2>
 800c486:	4652      	mov	r2, sl
 800c488:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c48c:	ec43 2b10 	vmov	d0, r2, r3
 800c490:	b01f      	add	sp, #124	@ 0x7c
 800c492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c496:	2920      	cmp	r1, #32
 800c498:	d1ce      	bne.n	800c438 <_strtod_l+0x30>
 800c49a:	3201      	adds	r2, #1
 800c49c:	e7c1      	b.n	800c422 <_strtod_l+0x1a>
 800c49e:	292d      	cmp	r1, #45	@ 0x2d
 800c4a0:	d1ca      	bne.n	800c438 <_strtod_l+0x30>
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	910e      	str	r1, [sp, #56]	@ 0x38
 800c4a6:	1c51      	adds	r1, r2, #1
 800c4a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4aa:	7852      	ldrb	r2, [r2, #1]
 800c4ac:	2a00      	cmp	r2, #0
 800c4ae:	d1c5      	bne.n	800c43c <_strtod_l+0x34>
 800c4b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f040 8570 	bne.w	800cf9a <_strtod_l+0xb92>
 800c4ba:	4652      	mov	r2, sl
 800c4bc:	465b      	mov	r3, fp
 800c4be:	e7e5      	b.n	800c48c <_strtod_l+0x84>
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	e7ef      	b.n	800c4a4 <_strtod_l+0x9c>
 800c4c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c4c6:	b13a      	cbz	r2, 800c4d8 <_strtod_l+0xd0>
 800c4c8:	2135      	movs	r1, #53	@ 0x35
 800c4ca:	a81c      	add	r0, sp, #112	@ 0x70
 800c4cc:	f7ff ff3a 	bl	800c344 <__copybits>
 800c4d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4d2:	9805      	ldr	r0, [sp, #20]
 800c4d4:	f7ff fb10 	bl	800baf8 <_Bfree>
 800c4d8:	3e01      	subs	r6, #1
 800c4da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c4dc:	2e04      	cmp	r6, #4
 800c4de:	d806      	bhi.n	800c4ee <_strtod_l+0xe6>
 800c4e0:	e8df f006 	tbb	[pc, r6]
 800c4e4:	201d0314 	.word	0x201d0314
 800c4e8:	14          	.byte	0x14
 800c4e9:	00          	.byte	0x00
 800c4ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c4ee:	05e1      	lsls	r1, r4, #23
 800c4f0:	bf48      	it	mi
 800c4f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c4f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c4fa:	0d1b      	lsrs	r3, r3, #20
 800c4fc:	051b      	lsls	r3, r3, #20
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1bb      	bne.n	800c47a <_strtod_l+0x72>
 800c502:	f7fe fb1d 	bl	800ab40 <__errno>
 800c506:	2322      	movs	r3, #34	@ 0x22
 800c508:	6003      	str	r3, [r0, #0]
 800c50a:	e7b6      	b.n	800c47a <_strtod_l+0x72>
 800c50c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c510:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c514:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c518:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c51c:	e7e7      	b.n	800c4ee <_strtod_l+0xe6>
 800c51e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c6a0 <_strtod_l+0x298>
 800c522:	e7e4      	b.n	800c4ee <_strtod_l+0xe6>
 800c524:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c528:	f04f 3aff 	mov.w	sl, #4294967295
 800c52c:	e7df      	b.n	800c4ee <_strtod_l+0xe6>
 800c52e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	9219      	str	r2, [sp, #100]	@ 0x64
 800c534:	785b      	ldrb	r3, [r3, #1]
 800c536:	2b30      	cmp	r3, #48	@ 0x30
 800c538:	d0f9      	beq.n	800c52e <_strtod_l+0x126>
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d09d      	beq.n	800c47a <_strtod_l+0x72>
 800c53e:	2301      	movs	r3, #1
 800c540:	2700      	movs	r7, #0
 800c542:	9308      	str	r3, [sp, #32]
 800c544:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c546:	930c      	str	r3, [sp, #48]	@ 0x30
 800c548:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c54a:	46b9      	mov	r9, r7
 800c54c:	220a      	movs	r2, #10
 800c54e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c550:	7805      	ldrb	r5, [r0, #0]
 800c552:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c556:	b2d9      	uxtb	r1, r3
 800c558:	2909      	cmp	r1, #9
 800c55a:	d928      	bls.n	800c5ae <_strtod_l+0x1a6>
 800c55c:	494f      	ldr	r1, [pc, #316]	@ (800c69c <_strtod_l+0x294>)
 800c55e:	2201      	movs	r2, #1
 800c560:	f001 f97a 	bl	800d858 <strncmp>
 800c564:	2800      	cmp	r0, #0
 800c566:	d032      	beq.n	800c5ce <_strtod_l+0x1c6>
 800c568:	2000      	movs	r0, #0
 800c56a:	462a      	mov	r2, r5
 800c56c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c56e:	464d      	mov	r5, r9
 800c570:	4603      	mov	r3, r0
 800c572:	2a65      	cmp	r2, #101	@ 0x65
 800c574:	d001      	beq.n	800c57a <_strtod_l+0x172>
 800c576:	2a45      	cmp	r2, #69	@ 0x45
 800c578:	d114      	bne.n	800c5a4 <_strtod_l+0x19c>
 800c57a:	b91d      	cbnz	r5, 800c584 <_strtod_l+0x17c>
 800c57c:	9a08      	ldr	r2, [sp, #32]
 800c57e:	4302      	orrs	r2, r0
 800c580:	d096      	beq.n	800c4b0 <_strtod_l+0xa8>
 800c582:	2500      	movs	r5, #0
 800c584:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c586:	1c62      	adds	r2, r4, #1
 800c588:	9219      	str	r2, [sp, #100]	@ 0x64
 800c58a:	7862      	ldrb	r2, [r4, #1]
 800c58c:	2a2b      	cmp	r2, #43	@ 0x2b
 800c58e:	d07a      	beq.n	800c686 <_strtod_l+0x27e>
 800c590:	2a2d      	cmp	r2, #45	@ 0x2d
 800c592:	d07e      	beq.n	800c692 <_strtod_l+0x28a>
 800c594:	f04f 0c00 	mov.w	ip, #0
 800c598:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c59c:	2909      	cmp	r1, #9
 800c59e:	f240 8085 	bls.w	800c6ac <_strtod_l+0x2a4>
 800c5a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c5a4:	f04f 0800 	mov.w	r8, #0
 800c5a8:	e0a5      	b.n	800c6f6 <_strtod_l+0x2ee>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e7c8      	b.n	800c540 <_strtod_l+0x138>
 800c5ae:	f1b9 0f08 	cmp.w	r9, #8
 800c5b2:	bfd8      	it	le
 800c5b4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c5b6:	f100 0001 	add.w	r0, r0, #1
 800c5ba:	bfda      	itte	le
 800c5bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c5c0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c5c2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c5c6:	f109 0901 	add.w	r9, r9, #1
 800c5ca:	9019      	str	r0, [sp, #100]	@ 0x64
 800c5cc:	e7bf      	b.n	800c54e <_strtod_l+0x146>
 800c5ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5d4:	785a      	ldrb	r2, [r3, #1]
 800c5d6:	f1b9 0f00 	cmp.w	r9, #0
 800c5da:	d03b      	beq.n	800c654 <_strtod_l+0x24c>
 800c5dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c5de:	464d      	mov	r5, r9
 800c5e0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c5e4:	2b09      	cmp	r3, #9
 800c5e6:	d912      	bls.n	800c60e <_strtod_l+0x206>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e7c2      	b.n	800c572 <_strtod_l+0x16a>
 800c5ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5ee:	1c5a      	adds	r2, r3, #1
 800c5f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5f2:	785a      	ldrb	r2, [r3, #1]
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	2a30      	cmp	r2, #48	@ 0x30
 800c5f8:	d0f8      	beq.n	800c5ec <_strtod_l+0x1e4>
 800c5fa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c5fe:	2b08      	cmp	r3, #8
 800c600:	f200 84d2 	bhi.w	800cfa8 <_strtod_l+0xba0>
 800c604:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c606:	900a      	str	r0, [sp, #40]	@ 0x28
 800c608:	2000      	movs	r0, #0
 800c60a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c60c:	4605      	mov	r5, r0
 800c60e:	3a30      	subs	r2, #48	@ 0x30
 800c610:	f100 0301 	add.w	r3, r0, #1
 800c614:	d018      	beq.n	800c648 <_strtod_l+0x240>
 800c616:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c618:	4419      	add	r1, r3
 800c61a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c61c:	462e      	mov	r6, r5
 800c61e:	f04f 0e0a 	mov.w	lr, #10
 800c622:	1c71      	adds	r1, r6, #1
 800c624:	eba1 0c05 	sub.w	ip, r1, r5
 800c628:	4563      	cmp	r3, ip
 800c62a:	dc15      	bgt.n	800c658 <_strtod_l+0x250>
 800c62c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c630:	182b      	adds	r3, r5, r0
 800c632:	2b08      	cmp	r3, #8
 800c634:	f105 0501 	add.w	r5, r5, #1
 800c638:	4405      	add	r5, r0
 800c63a:	dc1a      	bgt.n	800c672 <_strtod_l+0x26a>
 800c63c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c63e:	230a      	movs	r3, #10
 800c640:	fb03 2301 	mla	r3, r3, r1, r2
 800c644:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c646:	2300      	movs	r3, #0
 800c648:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c64a:	1c51      	adds	r1, r2, #1
 800c64c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c64e:	7852      	ldrb	r2, [r2, #1]
 800c650:	4618      	mov	r0, r3
 800c652:	e7c5      	b.n	800c5e0 <_strtod_l+0x1d8>
 800c654:	4648      	mov	r0, r9
 800c656:	e7ce      	b.n	800c5f6 <_strtod_l+0x1ee>
 800c658:	2e08      	cmp	r6, #8
 800c65a:	dc05      	bgt.n	800c668 <_strtod_l+0x260>
 800c65c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c65e:	fb0e f606 	mul.w	r6, lr, r6
 800c662:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c664:	460e      	mov	r6, r1
 800c666:	e7dc      	b.n	800c622 <_strtod_l+0x21a>
 800c668:	2910      	cmp	r1, #16
 800c66a:	bfd8      	it	le
 800c66c:	fb0e f707 	mulle.w	r7, lr, r7
 800c670:	e7f8      	b.n	800c664 <_strtod_l+0x25c>
 800c672:	2b0f      	cmp	r3, #15
 800c674:	bfdc      	itt	le
 800c676:	230a      	movle	r3, #10
 800c678:	fb03 2707 	mlale	r7, r3, r7, r2
 800c67c:	e7e3      	b.n	800c646 <_strtod_l+0x23e>
 800c67e:	2300      	movs	r3, #0
 800c680:	930a      	str	r3, [sp, #40]	@ 0x28
 800c682:	2301      	movs	r3, #1
 800c684:	e77a      	b.n	800c57c <_strtod_l+0x174>
 800c686:	f04f 0c00 	mov.w	ip, #0
 800c68a:	1ca2      	adds	r2, r4, #2
 800c68c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c68e:	78a2      	ldrb	r2, [r4, #2]
 800c690:	e782      	b.n	800c598 <_strtod_l+0x190>
 800c692:	f04f 0c01 	mov.w	ip, #1
 800c696:	e7f8      	b.n	800c68a <_strtod_l+0x282>
 800c698:	0800eda4 	.word	0x0800eda4
 800c69c:	0800ebd8 	.word	0x0800ebd8
 800c6a0:	7ff00000 	.word	0x7ff00000
 800c6a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6a6:	1c51      	adds	r1, r2, #1
 800c6a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c6aa:	7852      	ldrb	r2, [r2, #1]
 800c6ac:	2a30      	cmp	r2, #48	@ 0x30
 800c6ae:	d0f9      	beq.n	800c6a4 <_strtod_l+0x29c>
 800c6b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c6b4:	2908      	cmp	r1, #8
 800c6b6:	f63f af75 	bhi.w	800c5a4 <_strtod_l+0x19c>
 800c6ba:	3a30      	subs	r2, #48	@ 0x30
 800c6bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c6c2:	f04f 080a 	mov.w	r8, #10
 800c6c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6c8:	1c56      	adds	r6, r2, #1
 800c6ca:	9619      	str	r6, [sp, #100]	@ 0x64
 800c6cc:	7852      	ldrb	r2, [r2, #1]
 800c6ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c6d2:	f1be 0f09 	cmp.w	lr, #9
 800c6d6:	d939      	bls.n	800c74c <_strtod_l+0x344>
 800c6d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c6da:	1a76      	subs	r6, r6, r1
 800c6dc:	2e08      	cmp	r6, #8
 800c6de:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c6e2:	dc03      	bgt.n	800c6ec <_strtod_l+0x2e4>
 800c6e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6e6:	4588      	cmp	r8, r1
 800c6e8:	bfa8      	it	ge
 800c6ea:	4688      	movge	r8, r1
 800c6ec:	f1bc 0f00 	cmp.w	ip, #0
 800c6f0:	d001      	beq.n	800c6f6 <_strtod_l+0x2ee>
 800c6f2:	f1c8 0800 	rsb	r8, r8, #0
 800c6f6:	2d00      	cmp	r5, #0
 800c6f8:	d14e      	bne.n	800c798 <_strtod_l+0x390>
 800c6fa:	9908      	ldr	r1, [sp, #32]
 800c6fc:	4308      	orrs	r0, r1
 800c6fe:	f47f aebc 	bne.w	800c47a <_strtod_l+0x72>
 800c702:	2b00      	cmp	r3, #0
 800c704:	f47f aed4 	bne.w	800c4b0 <_strtod_l+0xa8>
 800c708:	2a69      	cmp	r2, #105	@ 0x69
 800c70a:	d028      	beq.n	800c75e <_strtod_l+0x356>
 800c70c:	dc25      	bgt.n	800c75a <_strtod_l+0x352>
 800c70e:	2a49      	cmp	r2, #73	@ 0x49
 800c710:	d025      	beq.n	800c75e <_strtod_l+0x356>
 800c712:	2a4e      	cmp	r2, #78	@ 0x4e
 800c714:	f47f aecc 	bne.w	800c4b0 <_strtod_l+0xa8>
 800c718:	499a      	ldr	r1, [pc, #616]	@ (800c984 <_strtod_l+0x57c>)
 800c71a:	a819      	add	r0, sp, #100	@ 0x64
 800c71c:	f001 fba4 	bl	800de68 <__match>
 800c720:	2800      	cmp	r0, #0
 800c722:	f43f aec5 	beq.w	800c4b0 <_strtod_l+0xa8>
 800c726:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	2b28      	cmp	r3, #40	@ 0x28
 800c72c:	d12e      	bne.n	800c78c <_strtod_l+0x384>
 800c72e:	4996      	ldr	r1, [pc, #600]	@ (800c988 <_strtod_l+0x580>)
 800c730:	aa1c      	add	r2, sp, #112	@ 0x70
 800c732:	a819      	add	r0, sp, #100	@ 0x64
 800c734:	f001 fbac 	bl	800de90 <__hexnan>
 800c738:	2805      	cmp	r0, #5
 800c73a:	d127      	bne.n	800c78c <_strtod_l+0x384>
 800c73c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c73e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c742:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c746:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c74a:	e696      	b.n	800c47a <_strtod_l+0x72>
 800c74c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c74e:	fb08 2101 	mla	r1, r8, r1, r2
 800c752:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c756:	9209      	str	r2, [sp, #36]	@ 0x24
 800c758:	e7b5      	b.n	800c6c6 <_strtod_l+0x2be>
 800c75a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c75c:	e7da      	b.n	800c714 <_strtod_l+0x30c>
 800c75e:	498b      	ldr	r1, [pc, #556]	@ (800c98c <_strtod_l+0x584>)
 800c760:	a819      	add	r0, sp, #100	@ 0x64
 800c762:	f001 fb81 	bl	800de68 <__match>
 800c766:	2800      	cmp	r0, #0
 800c768:	f43f aea2 	beq.w	800c4b0 <_strtod_l+0xa8>
 800c76c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c76e:	4988      	ldr	r1, [pc, #544]	@ (800c990 <_strtod_l+0x588>)
 800c770:	3b01      	subs	r3, #1
 800c772:	a819      	add	r0, sp, #100	@ 0x64
 800c774:	9319      	str	r3, [sp, #100]	@ 0x64
 800c776:	f001 fb77 	bl	800de68 <__match>
 800c77a:	b910      	cbnz	r0, 800c782 <_strtod_l+0x37a>
 800c77c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c77e:	3301      	adds	r3, #1
 800c780:	9319      	str	r3, [sp, #100]	@ 0x64
 800c782:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c9a0 <_strtod_l+0x598>
 800c786:	f04f 0a00 	mov.w	sl, #0
 800c78a:	e676      	b.n	800c47a <_strtod_l+0x72>
 800c78c:	4881      	ldr	r0, [pc, #516]	@ (800c994 <_strtod_l+0x58c>)
 800c78e:	f001 f8a7 	bl	800d8e0 <nan>
 800c792:	ec5b ab10 	vmov	sl, fp, d0
 800c796:	e670      	b.n	800c47a <_strtod_l+0x72>
 800c798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c79a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c79c:	eba8 0303 	sub.w	r3, r8, r3
 800c7a0:	f1b9 0f00 	cmp.w	r9, #0
 800c7a4:	bf08      	it	eq
 800c7a6:	46a9      	moveq	r9, r5
 800c7a8:	2d10      	cmp	r5, #16
 800c7aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ac:	462c      	mov	r4, r5
 800c7ae:	bfa8      	it	ge
 800c7b0:	2410      	movge	r4, #16
 800c7b2:	f7f3 fea7 	bl	8000504 <__aeabi_ui2d>
 800c7b6:	2d09      	cmp	r5, #9
 800c7b8:	4682      	mov	sl, r0
 800c7ba:	468b      	mov	fp, r1
 800c7bc:	dc13      	bgt.n	800c7e6 <_strtod_l+0x3de>
 800c7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f43f ae5a 	beq.w	800c47a <_strtod_l+0x72>
 800c7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7c8:	dd78      	ble.n	800c8bc <_strtod_l+0x4b4>
 800c7ca:	2b16      	cmp	r3, #22
 800c7cc:	dc5f      	bgt.n	800c88e <_strtod_l+0x486>
 800c7ce:	4972      	ldr	r1, [pc, #456]	@ (800c998 <_strtod_l+0x590>)
 800c7d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7d8:	4652      	mov	r2, sl
 800c7da:	465b      	mov	r3, fp
 800c7dc:	f7f3 ff0c 	bl	80005f8 <__aeabi_dmul>
 800c7e0:	4682      	mov	sl, r0
 800c7e2:	468b      	mov	fp, r1
 800c7e4:	e649      	b.n	800c47a <_strtod_l+0x72>
 800c7e6:	4b6c      	ldr	r3, [pc, #432]	@ (800c998 <_strtod_l+0x590>)
 800c7e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c7f0:	f7f3 ff02 	bl	80005f8 <__aeabi_dmul>
 800c7f4:	4682      	mov	sl, r0
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	468b      	mov	fp, r1
 800c7fa:	f7f3 fe83 	bl	8000504 <__aeabi_ui2d>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4650      	mov	r0, sl
 800c804:	4659      	mov	r1, fp
 800c806:	f7f3 fd41 	bl	800028c <__adddf3>
 800c80a:	2d0f      	cmp	r5, #15
 800c80c:	4682      	mov	sl, r0
 800c80e:	468b      	mov	fp, r1
 800c810:	ddd5      	ble.n	800c7be <_strtod_l+0x3b6>
 800c812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c814:	1b2c      	subs	r4, r5, r4
 800c816:	441c      	add	r4, r3
 800c818:	2c00      	cmp	r4, #0
 800c81a:	f340 8093 	ble.w	800c944 <_strtod_l+0x53c>
 800c81e:	f014 030f 	ands.w	r3, r4, #15
 800c822:	d00a      	beq.n	800c83a <_strtod_l+0x432>
 800c824:	495c      	ldr	r1, [pc, #368]	@ (800c998 <_strtod_l+0x590>)
 800c826:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c82a:	4652      	mov	r2, sl
 800c82c:	465b      	mov	r3, fp
 800c82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c832:	f7f3 fee1 	bl	80005f8 <__aeabi_dmul>
 800c836:	4682      	mov	sl, r0
 800c838:	468b      	mov	fp, r1
 800c83a:	f034 040f 	bics.w	r4, r4, #15
 800c83e:	d073      	beq.n	800c928 <_strtod_l+0x520>
 800c840:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c844:	dd49      	ble.n	800c8da <_strtod_l+0x4d2>
 800c846:	2400      	movs	r4, #0
 800c848:	46a0      	mov	r8, r4
 800c84a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c84c:	46a1      	mov	r9, r4
 800c84e:	9a05      	ldr	r2, [sp, #20]
 800c850:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c9a0 <_strtod_l+0x598>
 800c854:	2322      	movs	r3, #34	@ 0x22
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	f04f 0a00 	mov.w	sl, #0
 800c85c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f43f ae0b 	beq.w	800c47a <_strtod_l+0x72>
 800c864:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c866:	9805      	ldr	r0, [sp, #20]
 800c868:	f7ff f946 	bl	800baf8 <_Bfree>
 800c86c:	9805      	ldr	r0, [sp, #20]
 800c86e:	4649      	mov	r1, r9
 800c870:	f7ff f942 	bl	800baf8 <_Bfree>
 800c874:	9805      	ldr	r0, [sp, #20]
 800c876:	4641      	mov	r1, r8
 800c878:	f7ff f93e 	bl	800baf8 <_Bfree>
 800c87c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c87e:	9805      	ldr	r0, [sp, #20]
 800c880:	f7ff f93a 	bl	800baf8 <_Bfree>
 800c884:	9805      	ldr	r0, [sp, #20]
 800c886:	4621      	mov	r1, r4
 800c888:	f7ff f936 	bl	800baf8 <_Bfree>
 800c88c:	e5f5      	b.n	800c47a <_strtod_l+0x72>
 800c88e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c890:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c894:	4293      	cmp	r3, r2
 800c896:	dbbc      	blt.n	800c812 <_strtod_l+0x40a>
 800c898:	4c3f      	ldr	r4, [pc, #252]	@ (800c998 <_strtod_l+0x590>)
 800c89a:	f1c5 050f 	rsb	r5, r5, #15
 800c89e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c8a2:	4652      	mov	r2, sl
 800c8a4:	465b      	mov	r3, fp
 800c8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8aa:	f7f3 fea5 	bl	80005f8 <__aeabi_dmul>
 800c8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b0:	1b5d      	subs	r5, r3, r5
 800c8b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c8b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c8ba:	e78f      	b.n	800c7dc <_strtod_l+0x3d4>
 800c8bc:	3316      	adds	r3, #22
 800c8be:	dba8      	blt.n	800c812 <_strtod_l+0x40a>
 800c8c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8c2:	eba3 0808 	sub.w	r8, r3, r8
 800c8c6:	4b34      	ldr	r3, [pc, #208]	@ (800c998 <_strtod_l+0x590>)
 800c8c8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c8cc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c8d0:	4650      	mov	r0, sl
 800c8d2:	4659      	mov	r1, fp
 800c8d4:	f7f3 ffba 	bl	800084c <__aeabi_ddiv>
 800c8d8:	e782      	b.n	800c7e0 <_strtod_l+0x3d8>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	4f2f      	ldr	r7, [pc, #188]	@ (800c99c <_strtod_l+0x594>)
 800c8de:	1124      	asrs	r4, r4, #4
 800c8e0:	4650      	mov	r0, sl
 800c8e2:	4659      	mov	r1, fp
 800c8e4:	461e      	mov	r6, r3
 800c8e6:	2c01      	cmp	r4, #1
 800c8e8:	dc21      	bgt.n	800c92e <_strtod_l+0x526>
 800c8ea:	b10b      	cbz	r3, 800c8f0 <_strtod_l+0x4e8>
 800c8ec:	4682      	mov	sl, r0
 800c8ee:	468b      	mov	fp, r1
 800c8f0:	492a      	ldr	r1, [pc, #168]	@ (800c99c <_strtod_l+0x594>)
 800c8f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c8f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c8fa:	4652      	mov	r2, sl
 800c8fc:	465b      	mov	r3, fp
 800c8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c902:	f7f3 fe79 	bl	80005f8 <__aeabi_dmul>
 800c906:	4b26      	ldr	r3, [pc, #152]	@ (800c9a0 <_strtod_l+0x598>)
 800c908:	460a      	mov	r2, r1
 800c90a:	400b      	ands	r3, r1
 800c90c:	4925      	ldr	r1, [pc, #148]	@ (800c9a4 <_strtod_l+0x59c>)
 800c90e:	428b      	cmp	r3, r1
 800c910:	4682      	mov	sl, r0
 800c912:	d898      	bhi.n	800c846 <_strtod_l+0x43e>
 800c914:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c918:	428b      	cmp	r3, r1
 800c91a:	bf86      	itte	hi
 800c91c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c9a8 <_strtod_l+0x5a0>
 800c920:	f04f 3aff 	movhi.w	sl, #4294967295
 800c924:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c928:	2300      	movs	r3, #0
 800c92a:	9308      	str	r3, [sp, #32]
 800c92c:	e076      	b.n	800ca1c <_strtod_l+0x614>
 800c92e:	07e2      	lsls	r2, r4, #31
 800c930:	d504      	bpl.n	800c93c <_strtod_l+0x534>
 800c932:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c936:	f7f3 fe5f 	bl	80005f8 <__aeabi_dmul>
 800c93a:	2301      	movs	r3, #1
 800c93c:	3601      	adds	r6, #1
 800c93e:	1064      	asrs	r4, r4, #1
 800c940:	3708      	adds	r7, #8
 800c942:	e7d0      	b.n	800c8e6 <_strtod_l+0x4de>
 800c944:	d0f0      	beq.n	800c928 <_strtod_l+0x520>
 800c946:	4264      	negs	r4, r4
 800c948:	f014 020f 	ands.w	r2, r4, #15
 800c94c:	d00a      	beq.n	800c964 <_strtod_l+0x55c>
 800c94e:	4b12      	ldr	r3, [pc, #72]	@ (800c998 <_strtod_l+0x590>)
 800c950:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c954:	4650      	mov	r0, sl
 800c956:	4659      	mov	r1, fp
 800c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95c:	f7f3 ff76 	bl	800084c <__aeabi_ddiv>
 800c960:	4682      	mov	sl, r0
 800c962:	468b      	mov	fp, r1
 800c964:	1124      	asrs	r4, r4, #4
 800c966:	d0df      	beq.n	800c928 <_strtod_l+0x520>
 800c968:	2c1f      	cmp	r4, #31
 800c96a:	dd1f      	ble.n	800c9ac <_strtod_l+0x5a4>
 800c96c:	2400      	movs	r4, #0
 800c96e:	46a0      	mov	r8, r4
 800c970:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c972:	46a1      	mov	r9, r4
 800c974:	9a05      	ldr	r2, [sp, #20]
 800c976:	2322      	movs	r3, #34	@ 0x22
 800c978:	f04f 0a00 	mov.w	sl, #0
 800c97c:	f04f 0b00 	mov.w	fp, #0
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	e76b      	b.n	800c85c <_strtod_l+0x454>
 800c984:	0800eac6 	.word	0x0800eac6
 800c988:	0800ed90 	.word	0x0800ed90
 800c98c:	0800eabe 	.word	0x0800eabe
 800c990:	0800eaf5 	.word	0x0800eaf5
 800c994:	0800ec2e 	.word	0x0800ec2e
 800c998:	0800ecc8 	.word	0x0800ecc8
 800c99c:	0800eca0 	.word	0x0800eca0
 800c9a0:	7ff00000 	.word	0x7ff00000
 800c9a4:	7ca00000 	.word	0x7ca00000
 800c9a8:	7fefffff 	.word	0x7fefffff
 800c9ac:	f014 0310 	ands.w	r3, r4, #16
 800c9b0:	bf18      	it	ne
 800c9b2:	236a      	movne	r3, #106	@ 0x6a
 800c9b4:	4ea9      	ldr	r6, [pc, #676]	@ (800cc5c <_strtod_l+0x854>)
 800c9b6:	9308      	str	r3, [sp, #32]
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	4659      	mov	r1, fp
 800c9bc:	2300      	movs	r3, #0
 800c9be:	07e7      	lsls	r7, r4, #31
 800c9c0:	d504      	bpl.n	800c9cc <_strtod_l+0x5c4>
 800c9c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9c6:	f7f3 fe17 	bl	80005f8 <__aeabi_dmul>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	1064      	asrs	r4, r4, #1
 800c9ce:	f106 0608 	add.w	r6, r6, #8
 800c9d2:	d1f4      	bne.n	800c9be <_strtod_l+0x5b6>
 800c9d4:	b10b      	cbz	r3, 800c9da <_strtod_l+0x5d2>
 800c9d6:	4682      	mov	sl, r0
 800c9d8:	468b      	mov	fp, r1
 800c9da:	9b08      	ldr	r3, [sp, #32]
 800c9dc:	b1b3      	cbz	r3, 800ca0c <_strtod_l+0x604>
 800c9de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c9e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	4659      	mov	r1, fp
 800c9ea:	dd0f      	ble.n	800ca0c <_strtod_l+0x604>
 800c9ec:	2b1f      	cmp	r3, #31
 800c9ee:	dd56      	ble.n	800ca9e <_strtod_l+0x696>
 800c9f0:	2b34      	cmp	r3, #52	@ 0x34
 800c9f2:	bfde      	ittt	le
 800c9f4:	f04f 33ff 	movle.w	r3, #4294967295
 800c9f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c9fc:	4093      	lslle	r3, r2
 800c9fe:	f04f 0a00 	mov.w	sl, #0
 800ca02:	bfcc      	ite	gt
 800ca04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ca08:	ea03 0b01 	andle.w	fp, r3, r1
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	2300      	movs	r3, #0
 800ca10:	4650      	mov	r0, sl
 800ca12:	4659      	mov	r1, fp
 800ca14:	f7f4 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d1a7      	bne.n	800c96c <_strtod_l+0x564>
 800ca1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ca22:	9805      	ldr	r0, [sp, #20]
 800ca24:	462b      	mov	r3, r5
 800ca26:	464a      	mov	r2, r9
 800ca28:	f7ff f8ce 	bl	800bbc8 <__s2b>
 800ca2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	f43f af09 	beq.w	800c846 <_strtod_l+0x43e>
 800ca34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	eba3 0308 	sub.w	r3, r3, r8
 800ca3e:	bfa8      	it	ge
 800ca40:	2300      	movge	r3, #0
 800ca42:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca44:	2400      	movs	r4, #0
 800ca46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ca4a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ca4c:	46a0      	mov	r8, r4
 800ca4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca50:	9805      	ldr	r0, [sp, #20]
 800ca52:	6859      	ldr	r1, [r3, #4]
 800ca54:	f7ff f810 	bl	800ba78 <_Balloc>
 800ca58:	4681      	mov	r9, r0
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	f43f aef7 	beq.w	800c84e <_strtod_l+0x446>
 800ca60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca62:	691a      	ldr	r2, [r3, #16]
 800ca64:	3202      	adds	r2, #2
 800ca66:	f103 010c 	add.w	r1, r3, #12
 800ca6a:	0092      	lsls	r2, r2, #2
 800ca6c:	300c      	adds	r0, #12
 800ca6e:	f7fe f894 	bl	800ab9a <memcpy>
 800ca72:	ec4b ab10 	vmov	d0, sl, fp
 800ca76:	9805      	ldr	r0, [sp, #20]
 800ca78:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca7a:	a91b      	add	r1, sp, #108	@ 0x6c
 800ca7c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ca80:	f7ff fbd6 	bl	800c230 <__d2b>
 800ca84:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca86:	2800      	cmp	r0, #0
 800ca88:	f43f aee1 	beq.w	800c84e <_strtod_l+0x446>
 800ca8c:	9805      	ldr	r0, [sp, #20]
 800ca8e:	2101      	movs	r1, #1
 800ca90:	f7ff f930 	bl	800bcf4 <__i2b>
 800ca94:	4680      	mov	r8, r0
 800ca96:	b948      	cbnz	r0, 800caac <_strtod_l+0x6a4>
 800ca98:	f04f 0800 	mov.w	r8, #0
 800ca9c:	e6d7      	b.n	800c84e <_strtod_l+0x446>
 800ca9e:	f04f 32ff 	mov.w	r2, #4294967295
 800caa2:	fa02 f303 	lsl.w	r3, r2, r3
 800caa6:	ea03 0a0a 	and.w	sl, r3, sl
 800caaa:	e7af      	b.n	800ca0c <_strtod_l+0x604>
 800caac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800caae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cab0:	2d00      	cmp	r5, #0
 800cab2:	bfab      	itete	ge
 800cab4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cab6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cab8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800caba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cabc:	bfac      	ite	ge
 800cabe:	18ef      	addge	r7, r5, r3
 800cac0:	1b5e      	sublt	r6, r3, r5
 800cac2:	9b08      	ldr	r3, [sp, #32]
 800cac4:	1aed      	subs	r5, r5, r3
 800cac6:	4415      	add	r5, r2
 800cac8:	4b65      	ldr	r3, [pc, #404]	@ (800cc60 <_strtod_l+0x858>)
 800caca:	3d01      	subs	r5, #1
 800cacc:	429d      	cmp	r5, r3
 800cace:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cad2:	da50      	bge.n	800cb76 <_strtod_l+0x76e>
 800cad4:	1b5b      	subs	r3, r3, r5
 800cad6:	2b1f      	cmp	r3, #31
 800cad8:	eba2 0203 	sub.w	r2, r2, r3
 800cadc:	f04f 0101 	mov.w	r1, #1
 800cae0:	dc3d      	bgt.n	800cb5e <_strtod_l+0x756>
 800cae2:	fa01 f303 	lsl.w	r3, r1, r3
 800cae6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cae8:	2300      	movs	r3, #0
 800caea:	9310      	str	r3, [sp, #64]	@ 0x40
 800caec:	18bd      	adds	r5, r7, r2
 800caee:	9b08      	ldr	r3, [sp, #32]
 800caf0:	42af      	cmp	r7, r5
 800caf2:	4416      	add	r6, r2
 800caf4:	441e      	add	r6, r3
 800caf6:	463b      	mov	r3, r7
 800caf8:	bfa8      	it	ge
 800cafa:	462b      	movge	r3, r5
 800cafc:	42b3      	cmp	r3, r6
 800cafe:	bfa8      	it	ge
 800cb00:	4633      	movge	r3, r6
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	bfc2      	ittt	gt
 800cb06:	1aed      	subgt	r5, r5, r3
 800cb08:	1af6      	subgt	r6, r6, r3
 800cb0a:	1aff      	subgt	r7, r7, r3
 800cb0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	dd16      	ble.n	800cb40 <_strtod_l+0x738>
 800cb12:	4641      	mov	r1, r8
 800cb14:	9805      	ldr	r0, [sp, #20]
 800cb16:	461a      	mov	r2, r3
 800cb18:	f7ff f9a4 	bl	800be64 <__pow5mult>
 800cb1c:	4680      	mov	r8, r0
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d0ba      	beq.n	800ca98 <_strtod_l+0x690>
 800cb22:	4601      	mov	r1, r0
 800cb24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb26:	9805      	ldr	r0, [sp, #20]
 800cb28:	f7ff f8fa 	bl	800bd20 <__multiply>
 800cb2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	f43f ae8d 	beq.w	800c84e <_strtod_l+0x446>
 800cb34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb36:	9805      	ldr	r0, [sp, #20]
 800cb38:	f7fe ffde 	bl	800baf8 <_Bfree>
 800cb3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	dc1d      	bgt.n	800cb80 <_strtod_l+0x778>
 800cb44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dd23      	ble.n	800cb92 <_strtod_l+0x78a>
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cb4e:	9805      	ldr	r0, [sp, #20]
 800cb50:	f7ff f988 	bl	800be64 <__pow5mult>
 800cb54:	4681      	mov	r9, r0
 800cb56:	b9e0      	cbnz	r0, 800cb92 <_strtod_l+0x78a>
 800cb58:	f04f 0900 	mov.w	r9, #0
 800cb5c:	e677      	b.n	800c84e <_strtod_l+0x446>
 800cb5e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cb62:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cb66:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cb6a:	35e2      	adds	r5, #226	@ 0xe2
 800cb6c:	fa01 f305 	lsl.w	r3, r1, r5
 800cb70:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb72:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cb74:	e7ba      	b.n	800caec <_strtod_l+0x6e4>
 800cb76:	2300      	movs	r3, #0
 800cb78:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb7e:	e7b5      	b.n	800caec <_strtod_l+0x6e4>
 800cb80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb82:	9805      	ldr	r0, [sp, #20]
 800cb84:	462a      	mov	r2, r5
 800cb86:	f7ff f9c7 	bl	800bf18 <__lshift>
 800cb8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d1d9      	bne.n	800cb44 <_strtod_l+0x73c>
 800cb90:	e65d      	b.n	800c84e <_strtod_l+0x446>
 800cb92:	2e00      	cmp	r6, #0
 800cb94:	dd07      	ble.n	800cba6 <_strtod_l+0x79e>
 800cb96:	4649      	mov	r1, r9
 800cb98:	9805      	ldr	r0, [sp, #20]
 800cb9a:	4632      	mov	r2, r6
 800cb9c:	f7ff f9bc 	bl	800bf18 <__lshift>
 800cba0:	4681      	mov	r9, r0
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d0d8      	beq.n	800cb58 <_strtod_l+0x750>
 800cba6:	2f00      	cmp	r7, #0
 800cba8:	dd08      	ble.n	800cbbc <_strtod_l+0x7b4>
 800cbaa:	4641      	mov	r1, r8
 800cbac:	9805      	ldr	r0, [sp, #20]
 800cbae:	463a      	mov	r2, r7
 800cbb0:	f7ff f9b2 	bl	800bf18 <__lshift>
 800cbb4:	4680      	mov	r8, r0
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	f43f ae49 	beq.w	800c84e <_strtod_l+0x446>
 800cbbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbbe:	9805      	ldr	r0, [sp, #20]
 800cbc0:	464a      	mov	r2, r9
 800cbc2:	f7ff fa31 	bl	800c028 <__mdiff>
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	f43f ae40 	beq.w	800c84e <_strtod_l+0x446>
 800cbce:	68c3      	ldr	r3, [r0, #12]
 800cbd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	60c3      	str	r3, [r0, #12]
 800cbd6:	4641      	mov	r1, r8
 800cbd8:	f7ff fa0a 	bl	800bff0 <__mcmp>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	da45      	bge.n	800cc6c <_strtod_l+0x864>
 800cbe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbe2:	ea53 030a 	orrs.w	r3, r3, sl
 800cbe6:	d16b      	bne.n	800ccc0 <_strtod_l+0x8b8>
 800cbe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d167      	bne.n	800ccc0 <_strtod_l+0x8b8>
 800cbf0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cbf4:	0d1b      	lsrs	r3, r3, #20
 800cbf6:	051b      	lsls	r3, r3, #20
 800cbf8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cbfc:	d960      	bls.n	800ccc0 <_strtod_l+0x8b8>
 800cbfe:	6963      	ldr	r3, [r4, #20]
 800cc00:	b913      	cbnz	r3, 800cc08 <_strtod_l+0x800>
 800cc02:	6923      	ldr	r3, [r4, #16]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	dd5b      	ble.n	800ccc0 <_strtod_l+0x8b8>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	9805      	ldr	r0, [sp, #20]
 800cc0e:	f7ff f983 	bl	800bf18 <__lshift>
 800cc12:	4641      	mov	r1, r8
 800cc14:	4604      	mov	r4, r0
 800cc16:	f7ff f9eb 	bl	800bff0 <__mcmp>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	dd50      	ble.n	800ccc0 <_strtod_l+0x8b8>
 800cc1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc22:	9a08      	ldr	r2, [sp, #32]
 800cc24:	0d1b      	lsrs	r3, r3, #20
 800cc26:	051b      	lsls	r3, r3, #20
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	d06a      	beq.n	800cd02 <_strtod_l+0x8fa>
 800cc2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc30:	d867      	bhi.n	800cd02 <_strtod_l+0x8fa>
 800cc32:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cc36:	f67f ae9d 	bls.w	800c974 <_strtod_l+0x56c>
 800cc3a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc64 <_strtod_l+0x85c>)
 800cc3c:	4650      	mov	r0, sl
 800cc3e:	4659      	mov	r1, fp
 800cc40:	2200      	movs	r2, #0
 800cc42:	f7f3 fcd9 	bl	80005f8 <__aeabi_dmul>
 800cc46:	4b08      	ldr	r3, [pc, #32]	@ (800cc68 <_strtod_l+0x860>)
 800cc48:	400b      	ands	r3, r1
 800cc4a:	4682      	mov	sl, r0
 800cc4c:	468b      	mov	fp, r1
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f47f ae08 	bne.w	800c864 <_strtod_l+0x45c>
 800cc54:	9a05      	ldr	r2, [sp, #20]
 800cc56:	2322      	movs	r3, #34	@ 0x22
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	e603      	b.n	800c864 <_strtod_l+0x45c>
 800cc5c:	0800edb8 	.word	0x0800edb8
 800cc60:	fffffc02 	.word	0xfffffc02
 800cc64:	39500000 	.word	0x39500000
 800cc68:	7ff00000 	.word	0x7ff00000
 800cc6c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cc70:	d165      	bne.n	800cd3e <_strtod_l+0x936>
 800cc72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc78:	b35a      	cbz	r2, 800ccd2 <_strtod_l+0x8ca>
 800cc7a:	4a9f      	ldr	r2, [pc, #636]	@ (800cef8 <_strtod_l+0xaf0>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d12b      	bne.n	800ccd8 <_strtod_l+0x8d0>
 800cc80:	9b08      	ldr	r3, [sp, #32]
 800cc82:	4651      	mov	r1, sl
 800cc84:	b303      	cbz	r3, 800ccc8 <_strtod_l+0x8c0>
 800cc86:	4b9d      	ldr	r3, [pc, #628]	@ (800cefc <_strtod_l+0xaf4>)
 800cc88:	465a      	mov	r2, fp
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cc90:	f04f 32ff 	mov.w	r2, #4294967295
 800cc94:	d81b      	bhi.n	800ccce <_strtod_l+0x8c6>
 800cc96:	0d1b      	lsrs	r3, r3, #20
 800cc98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cca0:	4299      	cmp	r1, r3
 800cca2:	d119      	bne.n	800ccd8 <_strtod_l+0x8d0>
 800cca4:	4b96      	ldr	r3, [pc, #600]	@ (800cf00 <_strtod_l+0xaf8>)
 800cca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d102      	bne.n	800ccb2 <_strtod_l+0x8aa>
 800ccac:	3101      	adds	r1, #1
 800ccae:	f43f adce 	beq.w	800c84e <_strtod_l+0x446>
 800ccb2:	4b92      	ldr	r3, [pc, #584]	@ (800cefc <_strtod_l+0xaf4>)
 800ccb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccb6:	401a      	ands	r2, r3
 800ccb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ccbc:	f04f 0a00 	mov.w	sl, #0
 800ccc0:	9b08      	ldr	r3, [sp, #32]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1b9      	bne.n	800cc3a <_strtod_l+0x832>
 800ccc6:	e5cd      	b.n	800c864 <_strtod_l+0x45c>
 800ccc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cccc:	e7e8      	b.n	800cca0 <_strtod_l+0x898>
 800ccce:	4613      	mov	r3, r2
 800ccd0:	e7e6      	b.n	800cca0 <_strtod_l+0x898>
 800ccd2:	ea53 030a 	orrs.w	r3, r3, sl
 800ccd6:	d0a2      	beq.n	800cc1e <_strtod_l+0x816>
 800ccd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ccda:	b1db      	cbz	r3, 800cd14 <_strtod_l+0x90c>
 800ccdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccde:	4213      	tst	r3, r2
 800cce0:	d0ee      	beq.n	800ccc0 <_strtod_l+0x8b8>
 800cce2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cce4:	9a08      	ldr	r2, [sp, #32]
 800cce6:	4650      	mov	r0, sl
 800cce8:	4659      	mov	r1, fp
 800ccea:	b1bb      	cbz	r3, 800cd1c <_strtod_l+0x914>
 800ccec:	f7ff fb6e 	bl	800c3cc <sulp>
 800ccf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccf4:	ec53 2b10 	vmov	r2, r3, d0
 800ccf8:	f7f3 fac8 	bl	800028c <__adddf3>
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	468b      	mov	fp, r1
 800cd00:	e7de      	b.n	800ccc0 <_strtod_l+0x8b8>
 800cd02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cd06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cd0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cd0e:	f04f 3aff 	mov.w	sl, #4294967295
 800cd12:	e7d5      	b.n	800ccc0 <_strtod_l+0x8b8>
 800cd14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd16:	ea13 0f0a 	tst.w	r3, sl
 800cd1a:	e7e1      	b.n	800cce0 <_strtod_l+0x8d8>
 800cd1c:	f7ff fb56 	bl	800c3cc <sulp>
 800cd20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd24:	ec53 2b10 	vmov	r2, r3, d0
 800cd28:	f7f3 faae 	bl	8000288 <__aeabi_dsub>
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2300      	movs	r3, #0
 800cd30:	4682      	mov	sl, r0
 800cd32:	468b      	mov	fp, r1
 800cd34:	f7f3 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d0c1      	beq.n	800ccc0 <_strtod_l+0x8b8>
 800cd3c:	e61a      	b.n	800c974 <_strtod_l+0x56c>
 800cd3e:	4641      	mov	r1, r8
 800cd40:	4620      	mov	r0, r4
 800cd42:	f7ff facd 	bl	800c2e0 <__ratio>
 800cd46:	ec57 6b10 	vmov	r6, r7, d0
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cd50:	4630      	mov	r0, r6
 800cd52:	4639      	mov	r1, r7
 800cd54:	f7f3 fecc 	bl	8000af0 <__aeabi_dcmple>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d06f      	beq.n	800ce3c <_strtod_l+0xa34>
 800cd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d17a      	bne.n	800ce58 <_strtod_l+0xa50>
 800cd62:	f1ba 0f00 	cmp.w	sl, #0
 800cd66:	d158      	bne.n	800ce1a <_strtod_l+0xa12>
 800cd68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d15a      	bne.n	800ce28 <_strtod_l+0xa20>
 800cd72:	4b64      	ldr	r3, [pc, #400]	@ (800cf04 <_strtod_l+0xafc>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	4630      	mov	r0, r6
 800cd78:	4639      	mov	r1, r7
 800cd7a:	f7f3 feaf 	bl	8000adc <__aeabi_dcmplt>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d159      	bne.n	800ce36 <_strtod_l+0xa2e>
 800cd82:	4630      	mov	r0, r6
 800cd84:	4639      	mov	r1, r7
 800cd86:	4b60      	ldr	r3, [pc, #384]	@ (800cf08 <_strtod_l+0xb00>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f7f3 fc35 	bl	80005f8 <__aeabi_dmul>
 800cd8e:	4606      	mov	r6, r0
 800cd90:	460f      	mov	r7, r1
 800cd92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cd96:	9606      	str	r6, [sp, #24]
 800cd98:	9307      	str	r3, [sp, #28]
 800cd9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd9e:	4d57      	ldr	r5, [pc, #348]	@ (800cefc <_strtod_l+0xaf4>)
 800cda0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cda4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cda6:	401d      	ands	r5, r3
 800cda8:	4b58      	ldr	r3, [pc, #352]	@ (800cf0c <_strtod_l+0xb04>)
 800cdaa:	429d      	cmp	r5, r3
 800cdac:	f040 80b2 	bne.w	800cf14 <_strtod_l+0xb0c>
 800cdb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cdb6:	ec4b ab10 	vmov	d0, sl, fp
 800cdba:	f7ff f9c9 	bl	800c150 <__ulp>
 800cdbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdc2:	ec51 0b10 	vmov	r0, r1, d0
 800cdc6:	f7f3 fc17 	bl	80005f8 <__aeabi_dmul>
 800cdca:	4652      	mov	r2, sl
 800cdcc:	465b      	mov	r3, fp
 800cdce:	f7f3 fa5d 	bl	800028c <__adddf3>
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	4949      	ldr	r1, [pc, #292]	@ (800cefc <_strtod_l+0xaf4>)
 800cdd6:	4a4e      	ldr	r2, [pc, #312]	@ (800cf10 <_strtod_l+0xb08>)
 800cdd8:	4019      	ands	r1, r3
 800cdda:	4291      	cmp	r1, r2
 800cddc:	4682      	mov	sl, r0
 800cdde:	d942      	bls.n	800ce66 <_strtod_l+0xa5e>
 800cde0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cde2:	4b47      	ldr	r3, [pc, #284]	@ (800cf00 <_strtod_l+0xaf8>)
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d103      	bne.n	800cdf0 <_strtod_l+0x9e8>
 800cde8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdea:	3301      	adds	r3, #1
 800cdec:	f43f ad2f 	beq.w	800c84e <_strtod_l+0x446>
 800cdf0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cf00 <_strtod_l+0xaf8>
 800cdf4:	f04f 3aff 	mov.w	sl, #4294967295
 800cdf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdfa:	9805      	ldr	r0, [sp, #20]
 800cdfc:	f7fe fe7c 	bl	800baf8 <_Bfree>
 800ce00:	9805      	ldr	r0, [sp, #20]
 800ce02:	4649      	mov	r1, r9
 800ce04:	f7fe fe78 	bl	800baf8 <_Bfree>
 800ce08:	9805      	ldr	r0, [sp, #20]
 800ce0a:	4641      	mov	r1, r8
 800ce0c:	f7fe fe74 	bl	800baf8 <_Bfree>
 800ce10:	9805      	ldr	r0, [sp, #20]
 800ce12:	4621      	mov	r1, r4
 800ce14:	f7fe fe70 	bl	800baf8 <_Bfree>
 800ce18:	e619      	b.n	800ca4e <_strtod_l+0x646>
 800ce1a:	f1ba 0f01 	cmp.w	sl, #1
 800ce1e:	d103      	bne.n	800ce28 <_strtod_l+0xa20>
 800ce20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f43f ada6 	beq.w	800c974 <_strtod_l+0x56c>
 800ce28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ced8 <_strtod_l+0xad0>
 800ce2c:	4f35      	ldr	r7, [pc, #212]	@ (800cf04 <_strtod_l+0xafc>)
 800ce2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce32:	2600      	movs	r6, #0
 800ce34:	e7b1      	b.n	800cd9a <_strtod_l+0x992>
 800ce36:	4f34      	ldr	r7, [pc, #208]	@ (800cf08 <_strtod_l+0xb00>)
 800ce38:	2600      	movs	r6, #0
 800ce3a:	e7aa      	b.n	800cd92 <_strtod_l+0x98a>
 800ce3c:	4b32      	ldr	r3, [pc, #200]	@ (800cf08 <_strtod_l+0xb00>)
 800ce3e:	4630      	mov	r0, r6
 800ce40:	4639      	mov	r1, r7
 800ce42:	2200      	movs	r2, #0
 800ce44:	f7f3 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ce48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460f      	mov	r7, r1
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d09f      	beq.n	800cd92 <_strtod_l+0x98a>
 800ce52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ce56:	e7a0      	b.n	800cd9a <_strtod_l+0x992>
 800ce58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cee0 <_strtod_l+0xad8>
 800ce5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce60:	ec57 6b17 	vmov	r6, r7, d7
 800ce64:	e799      	b.n	800cd9a <_strtod_l+0x992>
 800ce66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ce6a:	9b08      	ldr	r3, [sp, #32]
 800ce6c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1c1      	bne.n	800cdf8 <_strtod_l+0x9f0>
 800ce74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce78:	0d1b      	lsrs	r3, r3, #20
 800ce7a:	051b      	lsls	r3, r3, #20
 800ce7c:	429d      	cmp	r5, r3
 800ce7e:	d1bb      	bne.n	800cdf8 <_strtod_l+0x9f0>
 800ce80:	4630      	mov	r0, r6
 800ce82:	4639      	mov	r1, r7
 800ce84:	f7f3 ff18 	bl	8000cb8 <__aeabi_d2lz>
 800ce88:	f7f3 fb88 	bl	800059c <__aeabi_l2d>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	4630      	mov	r0, r6
 800ce92:	4639      	mov	r1, r7
 800ce94:	f7f3 f9f8 	bl	8000288 <__aeabi_dsub>
 800ce98:	460b      	mov	r3, r1
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cea0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cea6:	ea46 060a 	orr.w	r6, r6, sl
 800ceaa:	431e      	orrs	r6, r3
 800ceac:	d06f      	beq.n	800cf8e <_strtod_l+0xb86>
 800ceae:	a30e      	add	r3, pc, #56	@ (adr r3, 800cee8 <_strtod_l+0xae0>)
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	f7f3 fe12 	bl	8000adc <__aeabi_dcmplt>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	f47f acd3 	bne.w	800c864 <_strtod_l+0x45c>
 800cebe:	a30c      	add	r3, pc, #48	@ (adr r3, 800cef0 <_strtod_l+0xae8>)
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cec8:	f7f3 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 800cecc:	2800      	cmp	r0, #0
 800cece:	d093      	beq.n	800cdf8 <_strtod_l+0x9f0>
 800ced0:	e4c8      	b.n	800c864 <_strtod_l+0x45c>
 800ced2:	bf00      	nop
 800ced4:	f3af 8000 	nop.w
 800ced8:	00000000 	.word	0x00000000
 800cedc:	bff00000 	.word	0xbff00000
 800cee0:	00000000 	.word	0x00000000
 800cee4:	3ff00000 	.word	0x3ff00000
 800cee8:	94a03595 	.word	0x94a03595
 800ceec:	3fdfffff 	.word	0x3fdfffff
 800cef0:	35afe535 	.word	0x35afe535
 800cef4:	3fe00000 	.word	0x3fe00000
 800cef8:	000fffff 	.word	0x000fffff
 800cefc:	7ff00000 	.word	0x7ff00000
 800cf00:	7fefffff 	.word	0x7fefffff
 800cf04:	3ff00000 	.word	0x3ff00000
 800cf08:	3fe00000 	.word	0x3fe00000
 800cf0c:	7fe00000 	.word	0x7fe00000
 800cf10:	7c9fffff 	.word	0x7c9fffff
 800cf14:	9b08      	ldr	r3, [sp, #32]
 800cf16:	b323      	cbz	r3, 800cf62 <_strtod_l+0xb5a>
 800cf18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cf1c:	d821      	bhi.n	800cf62 <_strtod_l+0xb5a>
 800cf1e:	a328      	add	r3, pc, #160	@ (adr r3, 800cfc0 <_strtod_l+0xbb8>)
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	4630      	mov	r0, r6
 800cf26:	4639      	mov	r1, r7
 800cf28:	f7f3 fde2 	bl	8000af0 <__aeabi_dcmple>
 800cf2c:	b1a0      	cbz	r0, 800cf58 <_strtod_l+0xb50>
 800cf2e:	4639      	mov	r1, r7
 800cf30:	4630      	mov	r0, r6
 800cf32:	f7f3 fe39 	bl	8000ba8 <__aeabi_d2uiz>
 800cf36:	2801      	cmp	r0, #1
 800cf38:	bf38      	it	cc
 800cf3a:	2001      	movcc	r0, #1
 800cf3c:	f7f3 fae2 	bl	8000504 <__aeabi_ui2d>
 800cf40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf42:	4606      	mov	r6, r0
 800cf44:	460f      	mov	r7, r1
 800cf46:	b9fb      	cbnz	r3, 800cf88 <_strtod_l+0xb80>
 800cf48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf4c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cf4e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cf54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cf58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cf5e:	1b5b      	subs	r3, r3, r5
 800cf60:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cf66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cf6a:	f7ff f8f1 	bl	800c150 <__ulp>
 800cf6e:	4650      	mov	r0, sl
 800cf70:	ec53 2b10 	vmov	r2, r3, d0
 800cf74:	4659      	mov	r1, fp
 800cf76:	f7f3 fb3f 	bl	80005f8 <__aeabi_dmul>
 800cf7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cf7e:	f7f3 f985 	bl	800028c <__adddf3>
 800cf82:	4682      	mov	sl, r0
 800cf84:	468b      	mov	fp, r1
 800cf86:	e770      	b.n	800ce6a <_strtod_l+0xa62>
 800cf88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cf8c:	e7e0      	b.n	800cf50 <_strtod_l+0xb48>
 800cf8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cfc8 <_strtod_l+0xbc0>)
 800cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf94:	f7f3 fda2 	bl	8000adc <__aeabi_dcmplt>
 800cf98:	e798      	b.n	800cecc <_strtod_l+0xac4>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	930e      	str	r3, [sp, #56]	@ 0x38
 800cf9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cfa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	f7ff ba6d 	b.w	800c482 <_strtod_l+0x7a>
 800cfa8:	2a65      	cmp	r2, #101	@ 0x65
 800cfaa:	f43f ab68 	beq.w	800c67e <_strtod_l+0x276>
 800cfae:	2a45      	cmp	r2, #69	@ 0x45
 800cfb0:	f43f ab65 	beq.w	800c67e <_strtod_l+0x276>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	f7ff bba0 	b.w	800c6fa <_strtod_l+0x2f2>
 800cfba:	bf00      	nop
 800cfbc:	f3af 8000 	nop.w
 800cfc0:	ffc00000 	.word	0xffc00000
 800cfc4:	41dfffff 	.word	0x41dfffff
 800cfc8:	94a03595 	.word	0x94a03595
 800cfcc:	3fcfffff 	.word	0x3fcfffff

0800cfd0 <_strtod_r>:
 800cfd0:	4b01      	ldr	r3, [pc, #4]	@ (800cfd8 <_strtod_r+0x8>)
 800cfd2:	f7ff ba19 	b.w	800c408 <_strtod_l>
 800cfd6:	bf00      	nop
 800cfd8:	20000068 	.word	0x20000068

0800cfdc <_strtol_l.isra.0>:
 800cfdc:	2b24      	cmp	r3, #36	@ 0x24
 800cfde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe2:	4686      	mov	lr, r0
 800cfe4:	4690      	mov	r8, r2
 800cfe6:	d801      	bhi.n	800cfec <_strtol_l.isra.0+0x10>
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d106      	bne.n	800cffa <_strtol_l.isra.0+0x1e>
 800cfec:	f7fd fda8 	bl	800ab40 <__errno>
 800cff0:	2316      	movs	r3, #22
 800cff2:	6003      	str	r3, [r0, #0]
 800cff4:	2000      	movs	r0, #0
 800cff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cffa:	4834      	ldr	r0, [pc, #208]	@ (800d0cc <_strtol_l.isra.0+0xf0>)
 800cffc:	460d      	mov	r5, r1
 800cffe:	462a      	mov	r2, r5
 800d000:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d004:	5d06      	ldrb	r6, [r0, r4]
 800d006:	f016 0608 	ands.w	r6, r6, #8
 800d00a:	d1f8      	bne.n	800cffe <_strtol_l.isra.0+0x22>
 800d00c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d00e:	d110      	bne.n	800d032 <_strtol_l.isra.0+0x56>
 800d010:	782c      	ldrb	r4, [r5, #0]
 800d012:	2601      	movs	r6, #1
 800d014:	1c95      	adds	r5, r2, #2
 800d016:	f033 0210 	bics.w	r2, r3, #16
 800d01a:	d115      	bne.n	800d048 <_strtol_l.isra.0+0x6c>
 800d01c:	2c30      	cmp	r4, #48	@ 0x30
 800d01e:	d10d      	bne.n	800d03c <_strtol_l.isra.0+0x60>
 800d020:	782a      	ldrb	r2, [r5, #0]
 800d022:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d026:	2a58      	cmp	r2, #88	@ 0x58
 800d028:	d108      	bne.n	800d03c <_strtol_l.isra.0+0x60>
 800d02a:	786c      	ldrb	r4, [r5, #1]
 800d02c:	3502      	adds	r5, #2
 800d02e:	2310      	movs	r3, #16
 800d030:	e00a      	b.n	800d048 <_strtol_l.isra.0+0x6c>
 800d032:	2c2b      	cmp	r4, #43	@ 0x2b
 800d034:	bf04      	itt	eq
 800d036:	782c      	ldrbeq	r4, [r5, #0]
 800d038:	1c95      	addeq	r5, r2, #2
 800d03a:	e7ec      	b.n	800d016 <_strtol_l.isra.0+0x3a>
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1f6      	bne.n	800d02e <_strtol_l.isra.0+0x52>
 800d040:	2c30      	cmp	r4, #48	@ 0x30
 800d042:	bf14      	ite	ne
 800d044:	230a      	movne	r3, #10
 800d046:	2308      	moveq	r3, #8
 800d048:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d04c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d050:	2200      	movs	r2, #0
 800d052:	fbbc f9f3 	udiv	r9, ip, r3
 800d056:	4610      	mov	r0, r2
 800d058:	fb03 ca19 	mls	sl, r3, r9, ip
 800d05c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d060:	2f09      	cmp	r7, #9
 800d062:	d80f      	bhi.n	800d084 <_strtol_l.isra.0+0xa8>
 800d064:	463c      	mov	r4, r7
 800d066:	42a3      	cmp	r3, r4
 800d068:	dd1b      	ble.n	800d0a2 <_strtol_l.isra.0+0xc6>
 800d06a:	1c57      	adds	r7, r2, #1
 800d06c:	d007      	beq.n	800d07e <_strtol_l.isra.0+0xa2>
 800d06e:	4581      	cmp	r9, r0
 800d070:	d314      	bcc.n	800d09c <_strtol_l.isra.0+0xc0>
 800d072:	d101      	bne.n	800d078 <_strtol_l.isra.0+0x9c>
 800d074:	45a2      	cmp	sl, r4
 800d076:	db11      	blt.n	800d09c <_strtol_l.isra.0+0xc0>
 800d078:	fb00 4003 	mla	r0, r0, r3, r4
 800d07c:	2201      	movs	r2, #1
 800d07e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d082:	e7eb      	b.n	800d05c <_strtol_l.isra.0+0x80>
 800d084:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d088:	2f19      	cmp	r7, #25
 800d08a:	d801      	bhi.n	800d090 <_strtol_l.isra.0+0xb4>
 800d08c:	3c37      	subs	r4, #55	@ 0x37
 800d08e:	e7ea      	b.n	800d066 <_strtol_l.isra.0+0x8a>
 800d090:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d094:	2f19      	cmp	r7, #25
 800d096:	d804      	bhi.n	800d0a2 <_strtol_l.isra.0+0xc6>
 800d098:	3c57      	subs	r4, #87	@ 0x57
 800d09a:	e7e4      	b.n	800d066 <_strtol_l.isra.0+0x8a>
 800d09c:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a0:	e7ed      	b.n	800d07e <_strtol_l.isra.0+0xa2>
 800d0a2:	1c53      	adds	r3, r2, #1
 800d0a4:	d108      	bne.n	800d0b8 <_strtol_l.isra.0+0xdc>
 800d0a6:	2322      	movs	r3, #34	@ 0x22
 800d0a8:	f8ce 3000 	str.w	r3, [lr]
 800d0ac:	4660      	mov	r0, ip
 800d0ae:	f1b8 0f00 	cmp.w	r8, #0
 800d0b2:	d0a0      	beq.n	800cff6 <_strtol_l.isra.0+0x1a>
 800d0b4:	1e69      	subs	r1, r5, #1
 800d0b6:	e006      	b.n	800d0c6 <_strtol_l.isra.0+0xea>
 800d0b8:	b106      	cbz	r6, 800d0bc <_strtol_l.isra.0+0xe0>
 800d0ba:	4240      	negs	r0, r0
 800d0bc:	f1b8 0f00 	cmp.w	r8, #0
 800d0c0:	d099      	beq.n	800cff6 <_strtol_l.isra.0+0x1a>
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	d1f6      	bne.n	800d0b4 <_strtol_l.isra.0+0xd8>
 800d0c6:	f8c8 1000 	str.w	r1, [r8]
 800d0ca:	e794      	b.n	800cff6 <_strtol_l.isra.0+0x1a>
 800d0cc:	0800ede1 	.word	0x0800ede1

0800d0d0 <_strtol_r>:
 800d0d0:	f7ff bf84 	b.w	800cfdc <_strtol_l.isra.0>

0800d0d4 <__ssputs_r>:
 800d0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d8:	688e      	ldr	r6, [r1, #8]
 800d0da:	461f      	mov	r7, r3
 800d0dc:	42be      	cmp	r6, r7
 800d0de:	680b      	ldr	r3, [r1, #0]
 800d0e0:	4682      	mov	sl, r0
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	4690      	mov	r8, r2
 800d0e6:	d82d      	bhi.n	800d144 <__ssputs_r+0x70>
 800d0e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d0f0:	d026      	beq.n	800d140 <__ssputs_r+0x6c>
 800d0f2:	6965      	ldr	r5, [r4, #20]
 800d0f4:	6909      	ldr	r1, [r1, #16]
 800d0f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0fa:	eba3 0901 	sub.w	r9, r3, r1
 800d0fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d102:	1c7b      	adds	r3, r7, #1
 800d104:	444b      	add	r3, r9
 800d106:	106d      	asrs	r5, r5, #1
 800d108:	429d      	cmp	r5, r3
 800d10a:	bf38      	it	cc
 800d10c:	461d      	movcc	r5, r3
 800d10e:	0553      	lsls	r3, r2, #21
 800d110:	d527      	bpl.n	800d162 <__ssputs_r+0x8e>
 800d112:	4629      	mov	r1, r5
 800d114:	f7fe fc24 	bl	800b960 <_malloc_r>
 800d118:	4606      	mov	r6, r0
 800d11a:	b360      	cbz	r0, 800d176 <__ssputs_r+0xa2>
 800d11c:	6921      	ldr	r1, [r4, #16]
 800d11e:	464a      	mov	r2, r9
 800d120:	f7fd fd3b 	bl	800ab9a <memcpy>
 800d124:	89a3      	ldrh	r3, [r4, #12]
 800d126:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d12e:	81a3      	strh	r3, [r4, #12]
 800d130:	6126      	str	r6, [r4, #16]
 800d132:	6165      	str	r5, [r4, #20]
 800d134:	444e      	add	r6, r9
 800d136:	eba5 0509 	sub.w	r5, r5, r9
 800d13a:	6026      	str	r6, [r4, #0]
 800d13c:	60a5      	str	r5, [r4, #8]
 800d13e:	463e      	mov	r6, r7
 800d140:	42be      	cmp	r6, r7
 800d142:	d900      	bls.n	800d146 <__ssputs_r+0x72>
 800d144:	463e      	mov	r6, r7
 800d146:	6820      	ldr	r0, [r4, #0]
 800d148:	4632      	mov	r2, r6
 800d14a:	4641      	mov	r1, r8
 800d14c:	f000 fb6a 	bl	800d824 <memmove>
 800d150:	68a3      	ldr	r3, [r4, #8]
 800d152:	1b9b      	subs	r3, r3, r6
 800d154:	60a3      	str	r3, [r4, #8]
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	4433      	add	r3, r6
 800d15a:	6023      	str	r3, [r4, #0]
 800d15c:	2000      	movs	r0, #0
 800d15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d162:	462a      	mov	r2, r5
 800d164:	f000 ff41 	bl	800dfea <_realloc_r>
 800d168:	4606      	mov	r6, r0
 800d16a:	2800      	cmp	r0, #0
 800d16c:	d1e0      	bne.n	800d130 <__ssputs_r+0x5c>
 800d16e:	6921      	ldr	r1, [r4, #16]
 800d170:	4650      	mov	r0, sl
 800d172:	f7fe fb81 	bl	800b878 <_free_r>
 800d176:	230c      	movs	r3, #12
 800d178:	f8ca 3000 	str.w	r3, [sl]
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d182:	81a3      	strh	r3, [r4, #12]
 800d184:	f04f 30ff 	mov.w	r0, #4294967295
 800d188:	e7e9      	b.n	800d15e <__ssputs_r+0x8a>
	...

0800d18c <_svfiprintf_r>:
 800d18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d190:	4698      	mov	r8, r3
 800d192:	898b      	ldrh	r3, [r1, #12]
 800d194:	061b      	lsls	r3, r3, #24
 800d196:	b09d      	sub	sp, #116	@ 0x74
 800d198:	4607      	mov	r7, r0
 800d19a:	460d      	mov	r5, r1
 800d19c:	4614      	mov	r4, r2
 800d19e:	d510      	bpl.n	800d1c2 <_svfiprintf_r+0x36>
 800d1a0:	690b      	ldr	r3, [r1, #16]
 800d1a2:	b973      	cbnz	r3, 800d1c2 <_svfiprintf_r+0x36>
 800d1a4:	2140      	movs	r1, #64	@ 0x40
 800d1a6:	f7fe fbdb 	bl	800b960 <_malloc_r>
 800d1aa:	6028      	str	r0, [r5, #0]
 800d1ac:	6128      	str	r0, [r5, #16]
 800d1ae:	b930      	cbnz	r0, 800d1be <_svfiprintf_r+0x32>
 800d1b0:	230c      	movs	r3, #12
 800d1b2:	603b      	str	r3, [r7, #0]
 800d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b8:	b01d      	add	sp, #116	@ 0x74
 800d1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1be:	2340      	movs	r3, #64	@ 0x40
 800d1c0:	616b      	str	r3, [r5, #20]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1c6:	2320      	movs	r3, #32
 800d1c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1d0:	2330      	movs	r3, #48	@ 0x30
 800d1d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d370 <_svfiprintf_r+0x1e4>
 800d1d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1da:	f04f 0901 	mov.w	r9, #1
 800d1de:	4623      	mov	r3, r4
 800d1e0:	469a      	mov	sl, r3
 800d1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1e6:	b10a      	cbz	r2, 800d1ec <_svfiprintf_r+0x60>
 800d1e8:	2a25      	cmp	r2, #37	@ 0x25
 800d1ea:	d1f9      	bne.n	800d1e0 <_svfiprintf_r+0x54>
 800d1ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d1f0:	d00b      	beq.n	800d20a <_svfiprintf_r+0x7e>
 800d1f2:	465b      	mov	r3, fp
 800d1f4:	4622      	mov	r2, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	f7ff ff6b 	bl	800d0d4 <__ssputs_r>
 800d1fe:	3001      	adds	r0, #1
 800d200:	f000 80a7 	beq.w	800d352 <_svfiprintf_r+0x1c6>
 800d204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d206:	445a      	add	r2, fp
 800d208:	9209      	str	r2, [sp, #36]	@ 0x24
 800d20a:	f89a 3000 	ldrb.w	r3, [sl]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f000 809f 	beq.w	800d352 <_svfiprintf_r+0x1c6>
 800d214:	2300      	movs	r3, #0
 800d216:	f04f 32ff 	mov.w	r2, #4294967295
 800d21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d21e:	f10a 0a01 	add.w	sl, sl, #1
 800d222:	9304      	str	r3, [sp, #16]
 800d224:	9307      	str	r3, [sp, #28]
 800d226:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d22a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d22c:	4654      	mov	r4, sl
 800d22e:	2205      	movs	r2, #5
 800d230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d234:	484e      	ldr	r0, [pc, #312]	@ (800d370 <_svfiprintf_r+0x1e4>)
 800d236:	f7f2 ffcb 	bl	80001d0 <memchr>
 800d23a:	9a04      	ldr	r2, [sp, #16]
 800d23c:	b9d8      	cbnz	r0, 800d276 <_svfiprintf_r+0xea>
 800d23e:	06d0      	lsls	r0, r2, #27
 800d240:	bf44      	itt	mi
 800d242:	2320      	movmi	r3, #32
 800d244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d248:	0711      	lsls	r1, r2, #28
 800d24a:	bf44      	itt	mi
 800d24c:	232b      	movmi	r3, #43	@ 0x2b
 800d24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d252:	f89a 3000 	ldrb.w	r3, [sl]
 800d256:	2b2a      	cmp	r3, #42	@ 0x2a
 800d258:	d015      	beq.n	800d286 <_svfiprintf_r+0xfa>
 800d25a:	9a07      	ldr	r2, [sp, #28]
 800d25c:	4654      	mov	r4, sl
 800d25e:	2000      	movs	r0, #0
 800d260:	f04f 0c0a 	mov.w	ip, #10
 800d264:	4621      	mov	r1, r4
 800d266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d26a:	3b30      	subs	r3, #48	@ 0x30
 800d26c:	2b09      	cmp	r3, #9
 800d26e:	d94b      	bls.n	800d308 <_svfiprintf_r+0x17c>
 800d270:	b1b0      	cbz	r0, 800d2a0 <_svfiprintf_r+0x114>
 800d272:	9207      	str	r2, [sp, #28]
 800d274:	e014      	b.n	800d2a0 <_svfiprintf_r+0x114>
 800d276:	eba0 0308 	sub.w	r3, r0, r8
 800d27a:	fa09 f303 	lsl.w	r3, r9, r3
 800d27e:	4313      	orrs	r3, r2
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	46a2      	mov	sl, r4
 800d284:	e7d2      	b.n	800d22c <_svfiprintf_r+0xa0>
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	1d19      	adds	r1, r3, #4
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	9103      	str	r1, [sp, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bfbb      	ittet	lt
 800d292:	425b      	neglt	r3, r3
 800d294:	f042 0202 	orrlt.w	r2, r2, #2
 800d298:	9307      	strge	r3, [sp, #28]
 800d29a:	9307      	strlt	r3, [sp, #28]
 800d29c:	bfb8      	it	lt
 800d29e:	9204      	strlt	r2, [sp, #16]
 800d2a0:	7823      	ldrb	r3, [r4, #0]
 800d2a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2a4:	d10a      	bne.n	800d2bc <_svfiprintf_r+0x130>
 800d2a6:	7863      	ldrb	r3, [r4, #1]
 800d2a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2aa:	d132      	bne.n	800d312 <_svfiprintf_r+0x186>
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	1d1a      	adds	r2, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	9203      	str	r2, [sp, #12]
 800d2b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2b8:	3402      	adds	r4, #2
 800d2ba:	9305      	str	r3, [sp, #20]
 800d2bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d380 <_svfiprintf_r+0x1f4>
 800d2c0:	7821      	ldrb	r1, [r4, #0]
 800d2c2:	2203      	movs	r2, #3
 800d2c4:	4650      	mov	r0, sl
 800d2c6:	f7f2 ff83 	bl	80001d0 <memchr>
 800d2ca:	b138      	cbz	r0, 800d2dc <_svfiprintf_r+0x150>
 800d2cc:	9b04      	ldr	r3, [sp, #16]
 800d2ce:	eba0 000a 	sub.w	r0, r0, sl
 800d2d2:	2240      	movs	r2, #64	@ 0x40
 800d2d4:	4082      	lsls	r2, r0
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	3401      	adds	r4, #1
 800d2da:	9304      	str	r3, [sp, #16]
 800d2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e0:	4824      	ldr	r0, [pc, #144]	@ (800d374 <_svfiprintf_r+0x1e8>)
 800d2e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2e6:	2206      	movs	r2, #6
 800d2e8:	f7f2 ff72 	bl	80001d0 <memchr>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d036      	beq.n	800d35e <_svfiprintf_r+0x1d2>
 800d2f0:	4b21      	ldr	r3, [pc, #132]	@ (800d378 <_svfiprintf_r+0x1ec>)
 800d2f2:	bb1b      	cbnz	r3, 800d33c <_svfiprintf_r+0x1b0>
 800d2f4:	9b03      	ldr	r3, [sp, #12]
 800d2f6:	3307      	adds	r3, #7
 800d2f8:	f023 0307 	bic.w	r3, r3, #7
 800d2fc:	3308      	adds	r3, #8
 800d2fe:	9303      	str	r3, [sp, #12]
 800d300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d302:	4433      	add	r3, r6
 800d304:	9309      	str	r3, [sp, #36]	@ 0x24
 800d306:	e76a      	b.n	800d1de <_svfiprintf_r+0x52>
 800d308:	fb0c 3202 	mla	r2, ip, r2, r3
 800d30c:	460c      	mov	r4, r1
 800d30e:	2001      	movs	r0, #1
 800d310:	e7a8      	b.n	800d264 <_svfiprintf_r+0xd8>
 800d312:	2300      	movs	r3, #0
 800d314:	3401      	adds	r4, #1
 800d316:	9305      	str	r3, [sp, #20]
 800d318:	4619      	mov	r1, r3
 800d31a:	f04f 0c0a 	mov.w	ip, #10
 800d31e:	4620      	mov	r0, r4
 800d320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d324:	3a30      	subs	r2, #48	@ 0x30
 800d326:	2a09      	cmp	r2, #9
 800d328:	d903      	bls.n	800d332 <_svfiprintf_r+0x1a6>
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d0c6      	beq.n	800d2bc <_svfiprintf_r+0x130>
 800d32e:	9105      	str	r1, [sp, #20]
 800d330:	e7c4      	b.n	800d2bc <_svfiprintf_r+0x130>
 800d332:	fb0c 2101 	mla	r1, ip, r1, r2
 800d336:	4604      	mov	r4, r0
 800d338:	2301      	movs	r3, #1
 800d33a:	e7f0      	b.n	800d31e <_svfiprintf_r+0x192>
 800d33c:	ab03      	add	r3, sp, #12
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	462a      	mov	r2, r5
 800d342:	4b0e      	ldr	r3, [pc, #56]	@ (800d37c <_svfiprintf_r+0x1f0>)
 800d344:	a904      	add	r1, sp, #16
 800d346:	4638      	mov	r0, r7
 800d348:	f7fc fbb8 	bl	8009abc <_printf_float>
 800d34c:	1c42      	adds	r2, r0, #1
 800d34e:	4606      	mov	r6, r0
 800d350:	d1d6      	bne.n	800d300 <_svfiprintf_r+0x174>
 800d352:	89ab      	ldrh	r3, [r5, #12]
 800d354:	065b      	lsls	r3, r3, #25
 800d356:	f53f af2d 	bmi.w	800d1b4 <_svfiprintf_r+0x28>
 800d35a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d35c:	e72c      	b.n	800d1b8 <_svfiprintf_r+0x2c>
 800d35e:	ab03      	add	r3, sp, #12
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	462a      	mov	r2, r5
 800d364:	4b05      	ldr	r3, [pc, #20]	@ (800d37c <_svfiprintf_r+0x1f0>)
 800d366:	a904      	add	r1, sp, #16
 800d368:	4638      	mov	r0, r7
 800d36a:	f7fc fe3f 	bl	8009fec <_printf_i>
 800d36e:	e7ed      	b.n	800d34c <_svfiprintf_r+0x1c0>
 800d370:	0800ebda 	.word	0x0800ebda
 800d374:	0800ebe4 	.word	0x0800ebe4
 800d378:	08009abd 	.word	0x08009abd
 800d37c:	0800d0d5 	.word	0x0800d0d5
 800d380:	0800ebe0 	.word	0x0800ebe0

0800d384 <__sfputc_r>:
 800d384:	6893      	ldr	r3, [r2, #8]
 800d386:	3b01      	subs	r3, #1
 800d388:	2b00      	cmp	r3, #0
 800d38a:	b410      	push	{r4}
 800d38c:	6093      	str	r3, [r2, #8]
 800d38e:	da08      	bge.n	800d3a2 <__sfputc_r+0x1e>
 800d390:	6994      	ldr	r4, [r2, #24]
 800d392:	42a3      	cmp	r3, r4
 800d394:	db01      	blt.n	800d39a <__sfputc_r+0x16>
 800d396:	290a      	cmp	r1, #10
 800d398:	d103      	bne.n	800d3a2 <__sfputc_r+0x1e>
 800d39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d39e:	f7fd bae8 	b.w	800a972 <__swbuf_r>
 800d3a2:	6813      	ldr	r3, [r2, #0]
 800d3a4:	1c58      	adds	r0, r3, #1
 800d3a6:	6010      	str	r0, [r2, #0]
 800d3a8:	7019      	strb	r1, [r3, #0]
 800d3aa:	4608      	mov	r0, r1
 800d3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <__sfputs_r>:
 800d3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	460f      	mov	r7, r1
 800d3b8:	4614      	mov	r4, r2
 800d3ba:	18d5      	adds	r5, r2, r3
 800d3bc:	42ac      	cmp	r4, r5
 800d3be:	d101      	bne.n	800d3c4 <__sfputs_r+0x12>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	e007      	b.n	800d3d4 <__sfputs_r+0x22>
 800d3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c8:	463a      	mov	r2, r7
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f7ff ffda 	bl	800d384 <__sfputc_r>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d1f3      	bne.n	800d3bc <__sfputs_r+0xa>
 800d3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3d8 <_vfiprintf_r>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	460d      	mov	r5, r1
 800d3de:	b09d      	sub	sp, #116	@ 0x74
 800d3e0:	4614      	mov	r4, r2
 800d3e2:	4698      	mov	r8, r3
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	b118      	cbz	r0, 800d3f0 <_vfiprintf_r+0x18>
 800d3e8:	6a03      	ldr	r3, [r0, #32]
 800d3ea:	b90b      	cbnz	r3, 800d3f0 <_vfiprintf_r+0x18>
 800d3ec:	f7fd f9b6 	bl	800a75c <__sinit>
 800d3f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3f2:	07d9      	lsls	r1, r3, #31
 800d3f4:	d405      	bmi.n	800d402 <_vfiprintf_r+0x2a>
 800d3f6:	89ab      	ldrh	r3, [r5, #12]
 800d3f8:	059a      	lsls	r2, r3, #22
 800d3fa:	d402      	bmi.n	800d402 <_vfiprintf_r+0x2a>
 800d3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3fe:	f7fd fbca 	bl	800ab96 <__retarget_lock_acquire_recursive>
 800d402:	89ab      	ldrh	r3, [r5, #12]
 800d404:	071b      	lsls	r3, r3, #28
 800d406:	d501      	bpl.n	800d40c <_vfiprintf_r+0x34>
 800d408:	692b      	ldr	r3, [r5, #16]
 800d40a:	b99b      	cbnz	r3, 800d434 <_vfiprintf_r+0x5c>
 800d40c:	4629      	mov	r1, r5
 800d40e:	4630      	mov	r0, r6
 800d410:	f7fd faee 	bl	800a9f0 <__swsetup_r>
 800d414:	b170      	cbz	r0, 800d434 <_vfiprintf_r+0x5c>
 800d416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d418:	07dc      	lsls	r4, r3, #31
 800d41a:	d504      	bpl.n	800d426 <_vfiprintf_r+0x4e>
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	b01d      	add	sp, #116	@ 0x74
 800d422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d426:	89ab      	ldrh	r3, [r5, #12]
 800d428:	0598      	lsls	r0, r3, #22
 800d42a:	d4f7      	bmi.n	800d41c <_vfiprintf_r+0x44>
 800d42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d42e:	f7fd fbb3 	bl	800ab98 <__retarget_lock_release_recursive>
 800d432:	e7f3      	b.n	800d41c <_vfiprintf_r+0x44>
 800d434:	2300      	movs	r3, #0
 800d436:	9309      	str	r3, [sp, #36]	@ 0x24
 800d438:	2320      	movs	r3, #32
 800d43a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d442:	2330      	movs	r3, #48	@ 0x30
 800d444:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d5f4 <_vfiprintf_r+0x21c>
 800d448:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d44c:	f04f 0901 	mov.w	r9, #1
 800d450:	4623      	mov	r3, r4
 800d452:	469a      	mov	sl, r3
 800d454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d458:	b10a      	cbz	r2, 800d45e <_vfiprintf_r+0x86>
 800d45a:	2a25      	cmp	r2, #37	@ 0x25
 800d45c:	d1f9      	bne.n	800d452 <_vfiprintf_r+0x7a>
 800d45e:	ebba 0b04 	subs.w	fp, sl, r4
 800d462:	d00b      	beq.n	800d47c <_vfiprintf_r+0xa4>
 800d464:	465b      	mov	r3, fp
 800d466:	4622      	mov	r2, r4
 800d468:	4629      	mov	r1, r5
 800d46a:	4630      	mov	r0, r6
 800d46c:	f7ff ffa1 	bl	800d3b2 <__sfputs_r>
 800d470:	3001      	adds	r0, #1
 800d472:	f000 80a7 	beq.w	800d5c4 <_vfiprintf_r+0x1ec>
 800d476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d478:	445a      	add	r2, fp
 800d47a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d47c:	f89a 3000 	ldrb.w	r3, [sl]
 800d480:	2b00      	cmp	r3, #0
 800d482:	f000 809f 	beq.w	800d5c4 <_vfiprintf_r+0x1ec>
 800d486:	2300      	movs	r3, #0
 800d488:	f04f 32ff 	mov.w	r2, #4294967295
 800d48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d490:	f10a 0a01 	add.w	sl, sl, #1
 800d494:	9304      	str	r3, [sp, #16]
 800d496:	9307      	str	r3, [sp, #28]
 800d498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d49c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d49e:	4654      	mov	r4, sl
 800d4a0:	2205      	movs	r2, #5
 800d4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a6:	4853      	ldr	r0, [pc, #332]	@ (800d5f4 <_vfiprintf_r+0x21c>)
 800d4a8:	f7f2 fe92 	bl	80001d0 <memchr>
 800d4ac:	9a04      	ldr	r2, [sp, #16]
 800d4ae:	b9d8      	cbnz	r0, 800d4e8 <_vfiprintf_r+0x110>
 800d4b0:	06d1      	lsls	r1, r2, #27
 800d4b2:	bf44      	itt	mi
 800d4b4:	2320      	movmi	r3, #32
 800d4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ba:	0713      	lsls	r3, r2, #28
 800d4bc:	bf44      	itt	mi
 800d4be:	232b      	movmi	r3, #43	@ 0x2b
 800d4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ca:	d015      	beq.n	800d4f8 <_vfiprintf_r+0x120>
 800d4cc:	9a07      	ldr	r2, [sp, #28]
 800d4ce:	4654      	mov	r4, sl
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	f04f 0c0a 	mov.w	ip, #10
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4dc:	3b30      	subs	r3, #48	@ 0x30
 800d4de:	2b09      	cmp	r3, #9
 800d4e0:	d94b      	bls.n	800d57a <_vfiprintf_r+0x1a2>
 800d4e2:	b1b0      	cbz	r0, 800d512 <_vfiprintf_r+0x13a>
 800d4e4:	9207      	str	r2, [sp, #28]
 800d4e6:	e014      	b.n	800d512 <_vfiprintf_r+0x13a>
 800d4e8:	eba0 0308 	sub.w	r3, r0, r8
 800d4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	9304      	str	r3, [sp, #16]
 800d4f4:	46a2      	mov	sl, r4
 800d4f6:	e7d2      	b.n	800d49e <_vfiprintf_r+0xc6>
 800d4f8:	9b03      	ldr	r3, [sp, #12]
 800d4fa:	1d19      	adds	r1, r3, #4
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	9103      	str	r1, [sp, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	bfbb      	ittet	lt
 800d504:	425b      	neglt	r3, r3
 800d506:	f042 0202 	orrlt.w	r2, r2, #2
 800d50a:	9307      	strge	r3, [sp, #28]
 800d50c:	9307      	strlt	r3, [sp, #28]
 800d50e:	bfb8      	it	lt
 800d510:	9204      	strlt	r2, [sp, #16]
 800d512:	7823      	ldrb	r3, [r4, #0]
 800d514:	2b2e      	cmp	r3, #46	@ 0x2e
 800d516:	d10a      	bne.n	800d52e <_vfiprintf_r+0x156>
 800d518:	7863      	ldrb	r3, [r4, #1]
 800d51a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d51c:	d132      	bne.n	800d584 <_vfiprintf_r+0x1ac>
 800d51e:	9b03      	ldr	r3, [sp, #12]
 800d520:	1d1a      	adds	r2, r3, #4
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	9203      	str	r2, [sp, #12]
 800d526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d52a:	3402      	adds	r4, #2
 800d52c:	9305      	str	r3, [sp, #20]
 800d52e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d604 <_vfiprintf_r+0x22c>
 800d532:	7821      	ldrb	r1, [r4, #0]
 800d534:	2203      	movs	r2, #3
 800d536:	4650      	mov	r0, sl
 800d538:	f7f2 fe4a 	bl	80001d0 <memchr>
 800d53c:	b138      	cbz	r0, 800d54e <_vfiprintf_r+0x176>
 800d53e:	9b04      	ldr	r3, [sp, #16]
 800d540:	eba0 000a 	sub.w	r0, r0, sl
 800d544:	2240      	movs	r2, #64	@ 0x40
 800d546:	4082      	lsls	r2, r0
 800d548:	4313      	orrs	r3, r2
 800d54a:	3401      	adds	r4, #1
 800d54c:	9304      	str	r3, [sp, #16]
 800d54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d552:	4829      	ldr	r0, [pc, #164]	@ (800d5f8 <_vfiprintf_r+0x220>)
 800d554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d558:	2206      	movs	r2, #6
 800d55a:	f7f2 fe39 	bl	80001d0 <memchr>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d03f      	beq.n	800d5e2 <_vfiprintf_r+0x20a>
 800d562:	4b26      	ldr	r3, [pc, #152]	@ (800d5fc <_vfiprintf_r+0x224>)
 800d564:	bb1b      	cbnz	r3, 800d5ae <_vfiprintf_r+0x1d6>
 800d566:	9b03      	ldr	r3, [sp, #12]
 800d568:	3307      	adds	r3, #7
 800d56a:	f023 0307 	bic.w	r3, r3, #7
 800d56e:	3308      	adds	r3, #8
 800d570:	9303      	str	r3, [sp, #12]
 800d572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d574:	443b      	add	r3, r7
 800d576:	9309      	str	r3, [sp, #36]	@ 0x24
 800d578:	e76a      	b.n	800d450 <_vfiprintf_r+0x78>
 800d57a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d57e:	460c      	mov	r4, r1
 800d580:	2001      	movs	r0, #1
 800d582:	e7a8      	b.n	800d4d6 <_vfiprintf_r+0xfe>
 800d584:	2300      	movs	r3, #0
 800d586:	3401      	adds	r4, #1
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	4619      	mov	r1, r3
 800d58c:	f04f 0c0a 	mov.w	ip, #10
 800d590:	4620      	mov	r0, r4
 800d592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d596:	3a30      	subs	r2, #48	@ 0x30
 800d598:	2a09      	cmp	r2, #9
 800d59a:	d903      	bls.n	800d5a4 <_vfiprintf_r+0x1cc>
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d0c6      	beq.n	800d52e <_vfiprintf_r+0x156>
 800d5a0:	9105      	str	r1, [sp, #20]
 800d5a2:	e7c4      	b.n	800d52e <_vfiprintf_r+0x156>
 800d5a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e7f0      	b.n	800d590 <_vfiprintf_r+0x1b8>
 800d5ae:	ab03      	add	r3, sp, #12
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	462a      	mov	r2, r5
 800d5b4:	4b12      	ldr	r3, [pc, #72]	@ (800d600 <_vfiprintf_r+0x228>)
 800d5b6:	a904      	add	r1, sp, #16
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f7fc fa7f 	bl	8009abc <_printf_float>
 800d5be:	4607      	mov	r7, r0
 800d5c0:	1c78      	adds	r0, r7, #1
 800d5c2:	d1d6      	bne.n	800d572 <_vfiprintf_r+0x19a>
 800d5c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5c6:	07d9      	lsls	r1, r3, #31
 800d5c8:	d405      	bmi.n	800d5d6 <_vfiprintf_r+0x1fe>
 800d5ca:	89ab      	ldrh	r3, [r5, #12]
 800d5cc:	059a      	lsls	r2, r3, #22
 800d5ce:	d402      	bmi.n	800d5d6 <_vfiprintf_r+0x1fe>
 800d5d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5d2:	f7fd fae1 	bl	800ab98 <__retarget_lock_release_recursive>
 800d5d6:	89ab      	ldrh	r3, [r5, #12]
 800d5d8:	065b      	lsls	r3, r3, #25
 800d5da:	f53f af1f 	bmi.w	800d41c <_vfiprintf_r+0x44>
 800d5de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5e0:	e71e      	b.n	800d420 <_vfiprintf_r+0x48>
 800d5e2:	ab03      	add	r3, sp, #12
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	462a      	mov	r2, r5
 800d5e8:	4b05      	ldr	r3, [pc, #20]	@ (800d600 <_vfiprintf_r+0x228>)
 800d5ea:	a904      	add	r1, sp, #16
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f7fc fcfd 	bl	8009fec <_printf_i>
 800d5f2:	e7e4      	b.n	800d5be <_vfiprintf_r+0x1e6>
 800d5f4:	0800ebda 	.word	0x0800ebda
 800d5f8:	0800ebe4 	.word	0x0800ebe4
 800d5fc:	08009abd 	.word	0x08009abd
 800d600:	0800d3b3 	.word	0x0800d3b3
 800d604:	0800ebe0 	.word	0x0800ebe0

0800d608 <__sflush_r>:
 800d608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d610:	0716      	lsls	r6, r2, #28
 800d612:	4605      	mov	r5, r0
 800d614:	460c      	mov	r4, r1
 800d616:	d454      	bmi.n	800d6c2 <__sflush_r+0xba>
 800d618:	684b      	ldr	r3, [r1, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	dc02      	bgt.n	800d624 <__sflush_r+0x1c>
 800d61e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d620:	2b00      	cmp	r3, #0
 800d622:	dd48      	ble.n	800d6b6 <__sflush_r+0xae>
 800d624:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d626:	2e00      	cmp	r6, #0
 800d628:	d045      	beq.n	800d6b6 <__sflush_r+0xae>
 800d62a:	2300      	movs	r3, #0
 800d62c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d630:	682f      	ldr	r7, [r5, #0]
 800d632:	6a21      	ldr	r1, [r4, #32]
 800d634:	602b      	str	r3, [r5, #0]
 800d636:	d030      	beq.n	800d69a <__sflush_r+0x92>
 800d638:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	0759      	lsls	r1, r3, #29
 800d63e:	d505      	bpl.n	800d64c <__sflush_r+0x44>
 800d640:	6863      	ldr	r3, [r4, #4]
 800d642:	1ad2      	subs	r2, r2, r3
 800d644:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d646:	b10b      	cbz	r3, 800d64c <__sflush_r+0x44>
 800d648:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d64a:	1ad2      	subs	r2, r2, r3
 800d64c:	2300      	movs	r3, #0
 800d64e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d650:	6a21      	ldr	r1, [r4, #32]
 800d652:	4628      	mov	r0, r5
 800d654:	47b0      	blx	r6
 800d656:	1c43      	adds	r3, r0, #1
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	d106      	bne.n	800d66a <__sflush_r+0x62>
 800d65c:	6829      	ldr	r1, [r5, #0]
 800d65e:	291d      	cmp	r1, #29
 800d660:	d82b      	bhi.n	800d6ba <__sflush_r+0xb2>
 800d662:	4a2a      	ldr	r2, [pc, #168]	@ (800d70c <__sflush_r+0x104>)
 800d664:	40ca      	lsrs	r2, r1
 800d666:	07d6      	lsls	r6, r2, #31
 800d668:	d527      	bpl.n	800d6ba <__sflush_r+0xb2>
 800d66a:	2200      	movs	r2, #0
 800d66c:	6062      	str	r2, [r4, #4]
 800d66e:	04d9      	lsls	r1, r3, #19
 800d670:	6922      	ldr	r2, [r4, #16]
 800d672:	6022      	str	r2, [r4, #0]
 800d674:	d504      	bpl.n	800d680 <__sflush_r+0x78>
 800d676:	1c42      	adds	r2, r0, #1
 800d678:	d101      	bne.n	800d67e <__sflush_r+0x76>
 800d67a:	682b      	ldr	r3, [r5, #0]
 800d67c:	b903      	cbnz	r3, 800d680 <__sflush_r+0x78>
 800d67e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d682:	602f      	str	r7, [r5, #0]
 800d684:	b1b9      	cbz	r1, 800d6b6 <__sflush_r+0xae>
 800d686:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d68a:	4299      	cmp	r1, r3
 800d68c:	d002      	beq.n	800d694 <__sflush_r+0x8c>
 800d68e:	4628      	mov	r0, r5
 800d690:	f7fe f8f2 	bl	800b878 <_free_r>
 800d694:	2300      	movs	r3, #0
 800d696:	6363      	str	r3, [r4, #52]	@ 0x34
 800d698:	e00d      	b.n	800d6b6 <__sflush_r+0xae>
 800d69a:	2301      	movs	r3, #1
 800d69c:	4628      	mov	r0, r5
 800d69e:	47b0      	blx	r6
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	1c50      	adds	r0, r2, #1
 800d6a4:	d1c9      	bne.n	800d63a <__sflush_r+0x32>
 800d6a6:	682b      	ldr	r3, [r5, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d0c6      	beq.n	800d63a <__sflush_r+0x32>
 800d6ac:	2b1d      	cmp	r3, #29
 800d6ae:	d001      	beq.n	800d6b4 <__sflush_r+0xac>
 800d6b0:	2b16      	cmp	r3, #22
 800d6b2:	d11e      	bne.n	800d6f2 <__sflush_r+0xea>
 800d6b4:	602f      	str	r7, [r5, #0]
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	e022      	b.n	800d700 <__sflush_r+0xf8>
 800d6ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6be:	b21b      	sxth	r3, r3
 800d6c0:	e01b      	b.n	800d6fa <__sflush_r+0xf2>
 800d6c2:	690f      	ldr	r7, [r1, #16]
 800d6c4:	2f00      	cmp	r7, #0
 800d6c6:	d0f6      	beq.n	800d6b6 <__sflush_r+0xae>
 800d6c8:	0793      	lsls	r3, r2, #30
 800d6ca:	680e      	ldr	r6, [r1, #0]
 800d6cc:	bf08      	it	eq
 800d6ce:	694b      	ldreq	r3, [r1, #20]
 800d6d0:	600f      	str	r7, [r1, #0]
 800d6d2:	bf18      	it	ne
 800d6d4:	2300      	movne	r3, #0
 800d6d6:	eba6 0807 	sub.w	r8, r6, r7
 800d6da:	608b      	str	r3, [r1, #8]
 800d6dc:	f1b8 0f00 	cmp.w	r8, #0
 800d6e0:	dde9      	ble.n	800d6b6 <__sflush_r+0xae>
 800d6e2:	6a21      	ldr	r1, [r4, #32]
 800d6e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d6e6:	4643      	mov	r3, r8
 800d6e8:	463a      	mov	r2, r7
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	47b0      	blx	r6
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	dc08      	bgt.n	800d704 <__sflush_r+0xfc>
 800d6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6fa:	81a3      	strh	r3, [r4, #12]
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d704:	4407      	add	r7, r0
 800d706:	eba8 0800 	sub.w	r8, r8, r0
 800d70a:	e7e7      	b.n	800d6dc <__sflush_r+0xd4>
 800d70c:	20400001 	.word	0x20400001

0800d710 <_fflush_r>:
 800d710:	b538      	push	{r3, r4, r5, lr}
 800d712:	690b      	ldr	r3, [r1, #16]
 800d714:	4605      	mov	r5, r0
 800d716:	460c      	mov	r4, r1
 800d718:	b913      	cbnz	r3, 800d720 <_fflush_r+0x10>
 800d71a:	2500      	movs	r5, #0
 800d71c:	4628      	mov	r0, r5
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	b118      	cbz	r0, 800d72a <_fflush_r+0x1a>
 800d722:	6a03      	ldr	r3, [r0, #32]
 800d724:	b90b      	cbnz	r3, 800d72a <_fflush_r+0x1a>
 800d726:	f7fd f819 	bl	800a75c <__sinit>
 800d72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0f3      	beq.n	800d71a <_fflush_r+0xa>
 800d732:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d734:	07d0      	lsls	r0, r2, #31
 800d736:	d404      	bmi.n	800d742 <_fflush_r+0x32>
 800d738:	0599      	lsls	r1, r3, #22
 800d73a:	d402      	bmi.n	800d742 <_fflush_r+0x32>
 800d73c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d73e:	f7fd fa2a 	bl	800ab96 <__retarget_lock_acquire_recursive>
 800d742:	4628      	mov	r0, r5
 800d744:	4621      	mov	r1, r4
 800d746:	f7ff ff5f 	bl	800d608 <__sflush_r>
 800d74a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d74c:	07da      	lsls	r2, r3, #31
 800d74e:	4605      	mov	r5, r0
 800d750:	d4e4      	bmi.n	800d71c <_fflush_r+0xc>
 800d752:	89a3      	ldrh	r3, [r4, #12]
 800d754:	059b      	lsls	r3, r3, #22
 800d756:	d4e1      	bmi.n	800d71c <_fflush_r+0xc>
 800d758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d75a:	f7fd fa1d 	bl	800ab98 <__retarget_lock_release_recursive>
 800d75e:	e7dd      	b.n	800d71c <_fflush_r+0xc>

0800d760 <__swhatbuf_r>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	460c      	mov	r4, r1
 800d764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d768:	2900      	cmp	r1, #0
 800d76a:	b096      	sub	sp, #88	@ 0x58
 800d76c:	4615      	mov	r5, r2
 800d76e:	461e      	mov	r6, r3
 800d770:	da0d      	bge.n	800d78e <__swhatbuf_r+0x2e>
 800d772:	89a3      	ldrh	r3, [r4, #12]
 800d774:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d778:	f04f 0100 	mov.w	r1, #0
 800d77c:	bf14      	ite	ne
 800d77e:	2340      	movne	r3, #64	@ 0x40
 800d780:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d784:	2000      	movs	r0, #0
 800d786:	6031      	str	r1, [r6, #0]
 800d788:	602b      	str	r3, [r5, #0]
 800d78a:	b016      	add	sp, #88	@ 0x58
 800d78c:	bd70      	pop	{r4, r5, r6, pc}
 800d78e:	466a      	mov	r2, sp
 800d790:	f000 f874 	bl	800d87c <_fstat_r>
 800d794:	2800      	cmp	r0, #0
 800d796:	dbec      	blt.n	800d772 <__swhatbuf_r+0x12>
 800d798:	9901      	ldr	r1, [sp, #4]
 800d79a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d79e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d7a2:	4259      	negs	r1, r3
 800d7a4:	4159      	adcs	r1, r3
 800d7a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7aa:	e7eb      	b.n	800d784 <__swhatbuf_r+0x24>

0800d7ac <__smakebuf_r>:
 800d7ac:	898b      	ldrh	r3, [r1, #12]
 800d7ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7b0:	079d      	lsls	r5, r3, #30
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	d507      	bpl.n	800d7c8 <__smakebuf_r+0x1c>
 800d7b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	6163      	str	r3, [r4, #20]
 800d7c4:	b003      	add	sp, #12
 800d7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c8:	ab01      	add	r3, sp, #4
 800d7ca:	466a      	mov	r2, sp
 800d7cc:	f7ff ffc8 	bl	800d760 <__swhatbuf_r>
 800d7d0:	9f00      	ldr	r7, [sp, #0]
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f7fe f8c2 	bl	800b960 <_malloc_r>
 800d7dc:	b948      	cbnz	r0, 800d7f2 <__smakebuf_r+0x46>
 800d7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7e2:	059a      	lsls	r2, r3, #22
 800d7e4:	d4ee      	bmi.n	800d7c4 <__smakebuf_r+0x18>
 800d7e6:	f023 0303 	bic.w	r3, r3, #3
 800d7ea:	f043 0302 	orr.w	r3, r3, #2
 800d7ee:	81a3      	strh	r3, [r4, #12]
 800d7f0:	e7e2      	b.n	800d7b8 <__smakebuf_r+0xc>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	6020      	str	r0, [r4, #0]
 800d7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7fa:	81a3      	strh	r3, [r4, #12]
 800d7fc:	9b01      	ldr	r3, [sp, #4]
 800d7fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d802:	b15b      	cbz	r3, 800d81c <__smakebuf_r+0x70>
 800d804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d808:	4630      	mov	r0, r6
 800d80a:	f000 f849 	bl	800d8a0 <_isatty_r>
 800d80e:	b128      	cbz	r0, 800d81c <__smakebuf_r+0x70>
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	f023 0303 	bic.w	r3, r3, #3
 800d816:	f043 0301 	orr.w	r3, r3, #1
 800d81a:	81a3      	strh	r3, [r4, #12]
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	431d      	orrs	r5, r3
 800d820:	81a5      	strh	r5, [r4, #12]
 800d822:	e7cf      	b.n	800d7c4 <__smakebuf_r+0x18>

0800d824 <memmove>:
 800d824:	4288      	cmp	r0, r1
 800d826:	b510      	push	{r4, lr}
 800d828:	eb01 0402 	add.w	r4, r1, r2
 800d82c:	d902      	bls.n	800d834 <memmove+0x10>
 800d82e:	4284      	cmp	r4, r0
 800d830:	4623      	mov	r3, r4
 800d832:	d807      	bhi.n	800d844 <memmove+0x20>
 800d834:	1e43      	subs	r3, r0, #1
 800d836:	42a1      	cmp	r1, r4
 800d838:	d008      	beq.n	800d84c <memmove+0x28>
 800d83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d842:	e7f8      	b.n	800d836 <memmove+0x12>
 800d844:	4402      	add	r2, r0
 800d846:	4601      	mov	r1, r0
 800d848:	428a      	cmp	r2, r1
 800d84a:	d100      	bne.n	800d84e <memmove+0x2a>
 800d84c:	bd10      	pop	{r4, pc}
 800d84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d856:	e7f7      	b.n	800d848 <memmove+0x24>

0800d858 <strncmp>:
 800d858:	b510      	push	{r4, lr}
 800d85a:	b16a      	cbz	r2, 800d878 <strncmp+0x20>
 800d85c:	3901      	subs	r1, #1
 800d85e:	1884      	adds	r4, r0, r2
 800d860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d864:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d868:	429a      	cmp	r2, r3
 800d86a:	d103      	bne.n	800d874 <strncmp+0x1c>
 800d86c:	42a0      	cmp	r0, r4
 800d86e:	d001      	beq.n	800d874 <strncmp+0x1c>
 800d870:	2a00      	cmp	r2, #0
 800d872:	d1f5      	bne.n	800d860 <strncmp+0x8>
 800d874:	1ad0      	subs	r0, r2, r3
 800d876:	bd10      	pop	{r4, pc}
 800d878:	4610      	mov	r0, r2
 800d87a:	e7fc      	b.n	800d876 <strncmp+0x1e>

0800d87c <_fstat_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	4d07      	ldr	r5, [pc, #28]	@ (800d89c <_fstat_r+0x20>)
 800d880:	2300      	movs	r3, #0
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	4611      	mov	r1, r2
 800d888:	602b      	str	r3, [r5, #0]
 800d88a:	f7f4 f967 	bl	8001b5c <_fstat>
 800d88e:	1c43      	adds	r3, r0, #1
 800d890:	d102      	bne.n	800d898 <_fstat_r+0x1c>
 800d892:	682b      	ldr	r3, [r5, #0]
 800d894:	b103      	cbz	r3, 800d898 <_fstat_r+0x1c>
 800d896:	6023      	str	r3, [r4, #0]
 800d898:	bd38      	pop	{r3, r4, r5, pc}
 800d89a:	bf00      	nop
 800d89c:	20000b3c 	.word	0x20000b3c

0800d8a0 <_isatty_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	4d06      	ldr	r5, [pc, #24]	@ (800d8bc <_isatty_r+0x1c>)
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	f7f4 f966 	bl	8001b7c <_isatty>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_isatty_r+0x1a>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_isatty_r+0x1a>
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	20000b3c 	.word	0x20000b3c

0800d8c0 <_sbrk_r>:
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	4d06      	ldr	r5, [pc, #24]	@ (800d8dc <_sbrk_r+0x1c>)
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	4608      	mov	r0, r1
 800d8ca:	602b      	str	r3, [r5, #0]
 800d8cc:	f7f4 f96e 	bl	8001bac <_sbrk>
 800d8d0:	1c43      	adds	r3, r0, #1
 800d8d2:	d102      	bne.n	800d8da <_sbrk_r+0x1a>
 800d8d4:	682b      	ldr	r3, [r5, #0]
 800d8d6:	b103      	cbz	r3, 800d8da <_sbrk_r+0x1a>
 800d8d8:	6023      	str	r3, [r4, #0]
 800d8da:	bd38      	pop	{r3, r4, r5, pc}
 800d8dc:	20000b3c 	.word	0x20000b3c

0800d8e0 <nan>:
 800d8e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d8e8 <nan+0x8>
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	00000000 	.word	0x00000000
 800d8ec:	7ff80000 	.word	0x7ff80000

0800d8f0 <__assert_func>:
 800d8f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8f2:	4614      	mov	r4, r2
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	4b09      	ldr	r3, [pc, #36]	@ (800d91c <__assert_func+0x2c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	68d8      	ldr	r0, [r3, #12]
 800d8fe:	b14c      	cbz	r4, 800d914 <__assert_func+0x24>
 800d900:	4b07      	ldr	r3, [pc, #28]	@ (800d920 <__assert_func+0x30>)
 800d902:	9100      	str	r1, [sp, #0]
 800d904:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d908:	4906      	ldr	r1, [pc, #24]	@ (800d924 <__assert_func+0x34>)
 800d90a:	462b      	mov	r3, r5
 800d90c:	f000 fba8 	bl	800e060 <fiprintf>
 800d910:	f000 fbb8 	bl	800e084 <abort>
 800d914:	4b04      	ldr	r3, [pc, #16]	@ (800d928 <__assert_func+0x38>)
 800d916:	461c      	mov	r4, r3
 800d918:	e7f3      	b.n	800d902 <__assert_func+0x12>
 800d91a:	bf00      	nop
 800d91c:	20000018 	.word	0x20000018
 800d920:	0800ebf3 	.word	0x0800ebf3
 800d924:	0800ec00 	.word	0x0800ec00
 800d928:	0800ec2e 	.word	0x0800ec2e

0800d92c <_calloc_r>:
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	fba1 5402 	umull	r5, r4, r1, r2
 800d932:	b934      	cbnz	r4, 800d942 <_calloc_r+0x16>
 800d934:	4629      	mov	r1, r5
 800d936:	f7fe f813 	bl	800b960 <_malloc_r>
 800d93a:	4606      	mov	r6, r0
 800d93c:	b928      	cbnz	r0, 800d94a <_calloc_r+0x1e>
 800d93e:	4630      	mov	r0, r6
 800d940:	bd70      	pop	{r4, r5, r6, pc}
 800d942:	220c      	movs	r2, #12
 800d944:	6002      	str	r2, [r0, #0]
 800d946:	2600      	movs	r6, #0
 800d948:	e7f9      	b.n	800d93e <_calloc_r+0x12>
 800d94a:	462a      	mov	r2, r5
 800d94c:	4621      	mov	r1, r4
 800d94e:	f7fd f8a5 	bl	800aa9c <memset>
 800d952:	e7f4      	b.n	800d93e <_calloc_r+0x12>

0800d954 <rshift>:
 800d954:	6903      	ldr	r3, [r0, #16]
 800d956:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d95a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d95e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d962:	f100 0414 	add.w	r4, r0, #20
 800d966:	dd45      	ble.n	800d9f4 <rshift+0xa0>
 800d968:	f011 011f 	ands.w	r1, r1, #31
 800d96c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d970:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d974:	d10c      	bne.n	800d990 <rshift+0x3c>
 800d976:	f100 0710 	add.w	r7, r0, #16
 800d97a:	4629      	mov	r1, r5
 800d97c:	42b1      	cmp	r1, r6
 800d97e:	d334      	bcc.n	800d9ea <rshift+0x96>
 800d980:	1a9b      	subs	r3, r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	1eea      	subs	r2, r5, #3
 800d986:	4296      	cmp	r6, r2
 800d988:	bf38      	it	cc
 800d98a:	2300      	movcc	r3, #0
 800d98c:	4423      	add	r3, r4
 800d98e:	e015      	b.n	800d9bc <rshift+0x68>
 800d990:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d994:	f1c1 0820 	rsb	r8, r1, #32
 800d998:	40cf      	lsrs	r7, r1
 800d99a:	f105 0e04 	add.w	lr, r5, #4
 800d99e:	46a1      	mov	r9, r4
 800d9a0:	4576      	cmp	r6, lr
 800d9a2:	46f4      	mov	ip, lr
 800d9a4:	d815      	bhi.n	800d9d2 <rshift+0x7e>
 800d9a6:	1a9a      	subs	r2, r3, r2
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	3a04      	subs	r2, #4
 800d9ac:	3501      	adds	r5, #1
 800d9ae:	42ae      	cmp	r6, r5
 800d9b0:	bf38      	it	cc
 800d9b2:	2200      	movcc	r2, #0
 800d9b4:	18a3      	adds	r3, r4, r2
 800d9b6:	50a7      	str	r7, [r4, r2]
 800d9b8:	b107      	cbz	r7, 800d9bc <rshift+0x68>
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	1b1a      	subs	r2, r3, r4
 800d9be:	42a3      	cmp	r3, r4
 800d9c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d9c4:	bf08      	it	eq
 800d9c6:	2300      	moveq	r3, #0
 800d9c8:	6102      	str	r2, [r0, #16]
 800d9ca:	bf08      	it	eq
 800d9cc:	6143      	streq	r3, [r0, #20]
 800d9ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9d2:	f8dc c000 	ldr.w	ip, [ip]
 800d9d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d9da:	ea4c 0707 	orr.w	r7, ip, r7
 800d9de:	f849 7b04 	str.w	r7, [r9], #4
 800d9e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9e6:	40cf      	lsrs	r7, r1
 800d9e8:	e7da      	b.n	800d9a0 <rshift+0x4c>
 800d9ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800d9ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9f2:	e7c3      	b.n	800d97c <rshift+0x28>
 800d9f4:	4623      	mov	r3, r4
 800d9f6:	e7e1      	b.n	800d9bc <rshift+0x68>

0800d9f8 <__hexdig_fun>:
 800d9f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d9fc:	2b09      	cmp	r3, #9
 800d9fe:	d802      	bhi.n	800da06 <__hexdig_fun+0xe>
 800da00:	3820      	subs	r0, #32
 800da02:	b2c0      	uxtb	r0, r0
 800da04:	4770      	bx	lr
 800da06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800da0a:	2b05      	cmp	r3, #5
 800da0c:	d801      	bhi.n	800da12 <__hexdig_fun+0x1a>
 800da0e:	3847      	subs	r0, #71	@ 0x47
 800da10:	e7f7      	b.n	800da02 <__hexdig_fun+0xa>
 800da12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800da16:	2b05      	cmp	r3, #5
 800da18:	d801      	bhi.n	800da1e <__hexdig_fun+0x26>
 800da1a:	3827      	subs	r0, #39	@ 0x27
 800da1c:	e7f1      	b.n	800da02 <__hexdig_fun+0xa>
 800da1e:	2000      	movs	r0, #0
 800da20:	4770      	bx	lr
	...

0800da24 <__gethex>:
 800da24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	b085      	sub	sp, #20
 800da2a:	468a      	mov	sl, r1
 800da2c:	9302      	str	r3, [sp, #8]
 800da2e:	680b      	ldr	r3, [r1, #0]
 800da30:	9001      	str	r0, [sp, #4]
 800da32:	4690      	mov	r8, r2
 800da34:	1c9c      	adds	r4, r3, #2
 800da36:	46a1      	mov	r9, r4
 800da38:	f814 0b01 	ldrb.w	r0, [r4], #1
 800da3c:	2830      	cmp	r0, #48	@ 0x30
 800da3e:	d0fa      	beq.n	800da36 <__gethex+0x12>
 800da40:	eba9 0303 	sub.w	r3, r9, r3
 800da44:	f1a3 0b02 	sub.w	fp, r3, #2
 800da48:	f7ff ffd6 	bl	800d9f8 <__hexdig_fun>
 800da4c:	4605      	mov	r5, r0
 800da4e:	2800      	cmp	r0, #0
 800da50:	d168      	bne.n	800db24 <__gethex+0x100>
 800da52:	49a0      	ldr	r1, [pc, #640]	@ (800dcd4 <__gethex+0x2b0>)
 800da54:	2201      	movs	r2, #1
 800da56:	4648      	mov	r0, r9
 800da58:	f7ff fefe 	bl	800d858 <strncmp>
 800da5c:	4607      	mov	r7, r0
 800da5e:	2800      	cmp	r0, #0
 800da60:	d167      	bne.n	800db32 <__gethex+0x10e>
 800da62:	f899 0001 	ldrb.w	r0, [r9, #1]
 800da66:	4626      	mov	r6, r4
 800da68:	f7ff ffc6 	bl	800d9f8 <__hexdig_fun>
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d062      	beq.n	800db36 <__gethex+0x112>
 800da70:	4623      	mov	r3, r4
 800da72:	7818      	ldrb	r0, [r3, #0]
 800da74:	2830      	cmp	r0, #48	@ 0x30
 800da76:	4699      	mov	r9, r3
 800da78:	f103 0301 	add.w	r3, r3, #1
 800da7c:	d0f9      	beq.n	800da72 <__gethex+0x4e>
 800da7e:	f7ff ffbb 	bl	800d9f8 <__hexdig_fun>
 800da82:	fab0 f580 	clz	r5, r0
 800da86:	096d      	lsrs	r5, r5, #5
 800da88:	f04f 0b01 	mov.w	fp, #1
 800da8c:	464a      	mov	r2, r9
 800da8e:	4616      	mov	r6, r2
 800da90:	3201      	adds	r2, #1
 800da92:	7830      	ldrb	r0, [r6, #0]
 800da94:	f7ff ffb0 	bl	800d9f8 <__hexdig_fun>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d1f8      	bne.n	800da8e <__gethex+0x6a>
 800da9c:	498d      	ldr	r1, [pc, #564]	@ (800dcd4 <__gethex+0x2b0>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	4630      	mov	r0, r6
 800daa2:	f7ff fed9 	bl	800d858 <strncmp>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d13f      	bne.n	800db2a <__gethex+0x106>
 800daaa:	b944      	cbnz	r4, 800dabe <__gethex+0x9a>
 800daac:	1c74      	adds	r4, r6, #1
 800daae:	4622      	mov	r2, r4
 800dab0:	4616      	mov	r6, r2
 800dab2:	3201      	adds	r2, #1
 800dab4:	7830      	ldrb	r0, [r6, #0]
 800dab6:	f7ff ff9f 	bl	800d9f8 <__hexdig_fun>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d1f8      	bne.n	800dab0 <__gethex+0x8c>
 800dabe:	1ba4      	subs	r4, r4, r6
 800dac0:	00a7      	lsls	r7, r4, #2
 800dac2:	7833      	ldrb	r3, [r6, #0]
 800dac4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dac8:	2b50      	cmp	r3, #80	@ 0x50
 800daca:	d13e      	bne.n	800db4a <__gethex+0x126>
 800dacc:	7873      	ldrb	r3, [r6, #1]
 800dace:	2b2b      	cmp	r3, #43	@ 0x2b
 800dad0:	d033      	beq.n	800db3a <__gethex+0x116>
 800dad2:	2b2d      	cmp	r3, #45	@ 0x2d
 800dad4:	d034      	beq.n	800db40 <__gethex+0x11c>
 800dad6:	1c71      	adds	r1, r6, #1
 800dad8:	2400      	movs	r4, #0
 800dada:	7808      	ldrb	r0, [r1, #0]
 800dadc:	f7ff ff8c 	bl	800d9f8 <__hexdig_fun>
 800dae0:	1e43      	subs	r3, r0, #1
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	2b18      	cmp	r3, #24
 800dae6:	d830      	bhi.n	800db4a <__gethex+0x126>
 800dae8:	f1a0 0210 	sub.w	r2, r0, #16
 800daec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800daf0:	f7ff ff82 	bl	800d9f8 <__hexdig_fun>
 800daf4:	f100 3cff 	add.w	ip, r0, #4294967295
 800daf8:	fa5f fc8c 	uxtb.w	ip, ip
 800dafc:	f1bc 0f18 	cmp.w	ip, #24
 800db00:	f04f 030a 	mov.w	r3, #10
 800db04:	d91e      	bls.n	800db44 <__gethex+0x120>
 800db06:	b104      	cbz	r4, 800db0a <__gethex+0xe6>
 800db08:	4252      	negs	r2, r2
 800db0a:	4417      	add	r7, r2
 800db0c:	f8ca 1000 	str.w	r1, [sl]
 800db10:	b1ed      	cbz	r5, 800db4e <__gethex+0x12a>
 800db12:	f1bb 0f00 	cmp.w	fp, #0
 800db16:	bf0c      	ite	eq
 800db18:	2506      	moveq	r5, #6
 800db1a:	2500      	movne	r5, #0
 800db1c:	4628      	mov	r0, r5
 800db1e:	b005      	add	sp, #20
 800db20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db24:	2500      	movs	r5, #0
 800db26:	462c      	mov	r4, r5
 800db28:	e7b0      	b.n	800da8c <__gethex+0x68>
 800db2a:	2c00      	cmp	r4, #0
 800db2c:	d1c7      	bne.n	800dabe <__gethex+0x9a>
 800db2e:	4627      	mov	r7, r4
 800db30:	e7c7      	b.n	800dac2 <__gethex+0x9e>
 800db32:	464e      	mov	r6, r9
 800db34:	462f      	mov	r7, r5
 800db36:	2501      	movs	r5, #1
 800db38:	e7c3      	b.n	800dac2 <__gethex+0x9e>
 800db3a:	2400      	movs	r4, #0
 800db3c:	1cb1      	adds	r1, r6, #2
 800db3e:	e7cc      	b.n	800dada <__gethex+0xb6>
 800db40:	2401      	movs	r4, #1
 800db42:	e7fb      	b.n	800db3c <__gethex+0x118>
 800db44:	fb03 0002 	mla	r0, r3, r2, r0
 800db48:	e7ce      	b.n	800dae8 <__gethex+0xc4>
 800db4a:	4631      	mov	r1, r6
 800db4c:	e7de      	b.n	800db0c <__gethex+0xe8>
 800db4e:	eba6 0309 	sub.w	r3, r6, r9
 800db52:	3b01      	subs	r3, #1
 800db54:	4629      	mov	r1, r5
 800db56:	2b07      	cmp	r3, #7
 800db58:	dc0a      	bgt.n	800db70 <__gethex+0x14c>
 800db5a:	9801      	ldr	r0, [sp, #4]
 800db5c:	f7fd ff8c 	bl	800ba78 <_Balloc>
 800db60:	4604      	mov	r4, r0
 800db62:	b940      	cbnz	r0, 800db76 <__gethex+0x152>
 800db64:	4b5c      	ldr	r3, [pc, #368]	@ (800dcd8 <__gethex+0x2b4>)
 800db66:	4602      	mov	r2, r0
 800db68:	21e4      	movs	r1, #228	@ 0xe4
 800db6a:	485c      	ldr	r0, [pc, #368]	@ (800dcdc <__gethex+0x2b8>)
 800db6c:	f7ff fec0 	bl	800d8f0 <__assert_func>
 800db70:	3101      	adds	r1, #1
 800db72:	105b      	asrs	r3, r3, #1
 800db74:	e7ef      	b.n	800db56 <__gethex+0x132>
 800db76:	f100 0a14 	add.w	sl, r0, #20
 800db7a:	2300      	movs	r3, #0
 800db7c:	4655      	mov	r5, sl
 800db7e:	469b      	mov	fp, r3
 800db80:	45b1      	cmp	r9, r6
 800db82:	d337      	bcc.n	800dbf4 <__gethex+0x1d0>
 800db84:	f845 bb04 	str.w	fp, [r5], #4
 800db88:	eba5 050a 	sub.w	r5, r5, sl
 800db8c:	10ad      	asrs	r5, r5, #2
 800db8e:	6125      	str	r5, [r4, #16]
 800db90:	4658      	mov	r0, fp
 800db92:	f7fe f863 	bl	800bc5c <__hi0bits>
 800db96:	016d      	lsls	r5, r5, #5
 800db98:	f8d8 6000 	ldr.w	r6, [r8]
 800db9c:	1a2d      	subs	r5, r5, r0
 800db9e:	42b5      	cmp	r5, r6
 800dba0:	dd54      	ble.n	800dc4c <__gethex+0x228>
 800dba2:	1bad      	subs	r5, r5, r6
 800dba4:	4629      	mov	r1, r5
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7fe fbef 	bl	800c38a <__any_on>
 800dbac:	4681      	mov	r9, r0
 800dbae:	b178      	cbz	r0, 800dbd0 <__gethex+0x1ac>
 800dbb0:	1e6b      	subs	r3, r5, #1
 800dbb2:	1159      	asrs	r1, r3, #5
 800dbb4:	f003 021f 	and.w	r2, r3, #31
 800dbb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dbbc:	f04f 0901 	mov.w	r9, #1
 800dbc0:	fa09 f202 	lsl.w	r2, r9, r2
 800dbc4:	420a      	tst	r2, r1
 800dbc6:	d003      	beq.n	800dbd0 <__gethex+0x1ac>
 800dbc8:	454b      	cmp	r3, r9
 800dbca:	dc36      	bgt.n	800dc3a <__gethex+0x216>
 800dbcc:	f04f 0902 	mov.w	r9, #2
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7ff febe 	bl	800d954 <rshift>
 800dbd8:	442f      	add	r7, r5
 800dbda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbde:	42bb      	cmp	r3, r7
 800dbe0:	da42      	bge.n	800dc68 <__gethex+0x244>
 800dbe2:	9801      	ldr	r0, [sp, #4]
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	f7fd ff87 	bl	800baf8 <_Bfree>
 800dbea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbec:	2300      	movs	r3, #0
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	25a3      	movs	r5, #163	@ 0xa3
 800dbf2:	e793      	b.n	800db1c <__gethex+0xf8>
 800dbf4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dbf8:	2a2e      	cmp	r2, #46	@ 0x2e
 800dbfa:	d012      	beq.n	800dc22 <__gethex+0x1fe>
 800dbfc:	2b20      	cmp	r3, #32
 800dbfe:	d104      	bne.n	800dc0a <__gethex+0x1e6>
 800dc00:	f845 bb04 	str.w	fp, [r5], #4
 800dc04:	f04f 0b00 	mov.w	fp, #0
 800dc08:	465b      	mov	r3, fp
 800dc0a:	7830      	ldrb	r0, [r6, #0]
 800dc0c:	9303      	str	r3, [sp, #12]
 800dc0e:	f7ff fef3 	bl	800d9f8 <__hexdig_fun>
 800dc12:	9b03      	ldr	r3, [sp, #12]
 800dc14:	f000 000f 	and.w	r0, r0, #15
 800dc18:	4098      	lsls	r0, r3
 800dc1a:	ea4b 0b00 	orr.w	fp, fp, r0
 800dc1e:	3304      	adds	r3, #4
 800dc20:	e7ae      	b.n	800db80 <__gethex+0x15c>
 800dc22:	45b1      	cmp	r9, r6
 800dc24:	d8ea      	bhi.n	800dbfc <__gethex+0x1d8>
 800dc26:	492b      	ldr	r1, [pc, #172]	@ (800dcd4 <__gethex+0x2b0>)
 800dc28:	9303      	str	r3, [sp, #12]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	f7ff fe13 	bl	800d858 <strncmp>
 800dc32:	9b03      	ldr	r3, [sp, #12]
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d1e1      	bne.n	800dbfc <__gethex+0x1d8>
 800dc38:	e7a2      	b.n	800db80 <__gethex+0x15c>
 800dc3a:	1ea9      	subs	r1, r5, #2
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f7fe fba4 	bl	800c38a <__any_on>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	d0c2      	beq.n	800dbcc <__gethex+0x1a8>
 800dc46:	f04f 0903 	mov.w	r9, #3
 800dc4a:	e7c1      	b.n	800dbd0 <__gethex+0x1ac>
 800dc4c:	da09      	bge.n	800dc62 <__gethex+0x23e>
 800dc4e:	1b75      	subs	r5, r6, r5
 800dc50:	4621      	mov	r1, r4
 800dc52:	9801      	ldr	r0, [sp, #4]
 800dc54:	462a      	mov	r2, r5
 800dc56:	f7fe f95f 	bl	800bf18 <__lshift>
 800dc5a:	1b7f      	subs	r7, r7, r5
 800dc5c:	4604      	mov	r4, r0
 800dc5e:	f100 0a14 	add.w	sl, r0, #20
 800dc62:	f04f 0900 	mov.w	r9, #0
 800dc66:	e7b8      	b.n	800dbda <__gethex+0x1b6>
 800dc68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dc6c:	42bd      	cmp	r5, r7
 800dc6e:	dd6f      	ble.n	800dd50 <__gethex+0x32c>
 800dc70:	1bed      	subs	r5, r5, r7
 800dc72:	42ae      	cmp	r6, r5
 800dc74:	dc34      	bgt.n	800dce0 <__gethex+0x2bc>
 800dc76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	d022      	beq.n	800dcc4 <__gethex+0x2a0>
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d024      	beq.n	800dccc <__gethex+0x2a8>
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d115      	bne.n	800dcb2 <__gethex+0x28e>
 800dc86:	42ae      	cmp	r6, r5
 800dc88:	d113      	bne.n	800dcb2 <__gethex+0x28e>
 800dc8a:	2e01      	cmp	r6, #1
 800dc8c:	d10b      	bne.n	800dca6 <__gethex+0x282>
 800dc8e:	9a02      	ldr	r2, [sp, #8]
 800dc90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc94:	6013      	str	r3, [r2, #0]
 800dc96:	2301      	movs	r3, #1
 800dc98:	6123      	str	r3, [r4, #16]
 800dc9a:	f8ca 3000 	str.w	r3, [sl]
 800dc9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dca0:	2562      	movs	r5, #98	@ 0x62
 800dca2:	601c      	str	r4, [r3, #0]
 800dca4:	e73a      	b.n	800db1c <__gethex+0xf8>
 800dca6:	1e71      	subs	r1, r6, #1
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f7fe fb6e 	bl	800c38a <__any_on>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d1ed      	bne.n	800dc8e <__gethex+0x26a>
 800dcb2:	9801      	ldr	r0, [sp, #4]
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	f7fd ff1f 	bl	800baf8 <_Bfree>
 800dcba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	2550      	movs	r5, #80	@ 0x50
 800dcc2:	e72b      	b.n	800db1c <__gethex+0xf8>
 800dcc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1f3      	bne.n	800dcb2 <__gethex+0x28e>
 800dcca:	e7e0      	b.n	800dc8e <__gethex+0x26a>
 800dccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1dd      	bne.n	800dc8e <__gethex+0x26a>
 800dcd2:	e7ee      	b.n	800dcb2 <__gethex+0x28e>
 800dcd4:	0800ebd8 	.word	0x0800ebd8
 800dcd8:	0800eb6e 	.word	0x0800eb6e
 800dcdc:	0800ec2f 	.word	0x0800ec2f
 800dce0:	1e6f      	subs	r7, r5, #1
 800dce2:	f1b9 0f00 	cmp.w	r9, #0
 800dce6:	d130      	bne.n	800dd4a <__gethex+0x326>
 800dce8:	b127      	cbz	r7, 800dcf4 <__gethex+0x2d0>
 800dcea:	4639      	mov	r1, r7
 800dcec:	4620      	mov	r0, r4
 800dcee:	f7fe fb4c 	bl	800c38a <__any_on>
 800dcf2:	4681      	mov	r9, r0
 800dcf4:	117a      	asrs	r2, r7, #5
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dcfc:	f007 071f 	and.w	r7, r7, #31
 800dd00:	40bb      	lsls	r3, r7
 800dd02:	4213      	tst	r3, r2
 800dd04:	4629      	mov	r1, r5
 800dd06:	4620      	mov	r0, r4
 800dd08:	bf18      	it	ne
 800dd0a:	f049 0902 	orrne.w	r9, r9, #2
 800dd0e:	f7ff fe21 	bl	800d954 <rshift>
 800dd12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dd16:	1b76      	subs	r6, r6, r5
 800dd18:	2502      	movs	r5, #2
 800dd1a:	f1b9 0f00 	cmp.w	r9, #0
 800dd1e:	d047      	beq.n	800ddb0 <__gethex+0x38c>
 800dd20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d015      	beq.n	800dd54 <__gethex+0x330>
 800dd28:	2b03      	cmp	r3, #3
 800dd2a:	d017      	beq.n	800dd5c <__gethex+0x338>
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d109      	bne.n	800dd44 <__gethex+0x320>
 800dd30:	f019 0f02 	tst.w	r9, #2
 800dd34:	d006      	beq.n	800dd44 <__gethex+0x320>
 800dd36:	f8da 3000 	ldr.w	r3, [sl]
 800dd3a:	ea49 0903 	orr.w	r9, r9, r3
 800dd3e:	f019 0f01 	tst.w	r9, #1
 800dd42:	d10e      	bne.n	800dd62 <__gethex+0x33e>
 800dd44:	f045 0510 	orr.w	r5, r5, #16
 800dd48:	e032      	b.n	800ddb0 <__gethex+0x38c>
 800dd4a:	f04f 0901 	mov.w	r9, #1
 800dd4e:	e7d1      	b.n	800dcf4 <__gethex+0x2d0>
 800dd50:	2501      	movs	r5, #1
 800dd52:	e7e2      	b.n	800dd1a <__gethex+0x2f6>
 800dd54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd56:	f1c3 0301 	rsb	r3, r3, #1
 800dd5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d0f0      	beq.n	800dd44 <__gethex+0x320>
 800dd62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd66:	f104 0314 	add.w	r3, r4, #20
 800dd6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd72:	f04f 0c00 	mov.w	ip, #0
 800dd76:	4618      	mov	r0, r3
 800dd78:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd80:	d01b      	beq.n	800ddba <__gethex+0x396>
 800dd82:	3201      	adds	r2, #1
 800dd84:	6002      	str	r2, [r0, #0]
 800dd86:	2d02      	cmp	r5, #2
 800dd88:	f104 0314 	add.w	r3, r4, #20
 800dd8c:	d13c      	bne.n	800de08 <__gethex+0x3e4>
 800dd8e:	f8d8 2000 	ldr.w	r2, [r8]
 800dd92:	3a01      	subs	r2, #1
 800dd94:	42b2      	cmp	r2, r6
 800dd96:	d109      	bne.n	800ddac <__gethex+0x388>
 800dd98:	1171      	asrs	r1, r6, #5
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dda0:	f006 061f 	and.w	r6, r6, #31
 800dda4:	fa02 f606 	lsl.w	r6, r2, r6
 800dda8:	421e      	tst	r6, r3
 800ddaa:	d13a      	bne.n	800de22 <__gethex+0x3fe>
 800ddac:	f045 0520 	orr.w	r5, r5, #32
 800ddb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddb2:	601c      	str	r4, [r3, #0]
 800ddb4:	9b02      	ldr	r3, [sp, #8]
 800ddb6:	601f      	str	r7, [r3, #0]
 800ddb8:	e6b0      	b.n	800db1c <__gethex+0xf8>
 800ddba:	4299      	cmp	r1, r3
 800ddbc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ddc0:	d8d9      	bhi.n	800dd76 <__gethex+0x352>
 800ddc2:	68a3      	ldr	r3, [r4, #8]
 800ddc4:	459b      	cmp	fp, r3
 800ddc6:	db17      	blt.n	800ddf8 <__gethex+0x3d4>
 800ddc8:	6861      	ldr	r1, [r4, #4]
 800ddca:	9801      	ldr	r0, [sp, #4]
 800ddcc:	3101      	adds	r1, #1
 800ddce:	f7fd fe53 	bl	800ba78 <_Balloc>
 800ddd2:	4681      	mov	r9, r0
 800ddd4:	b918      	cbnz	r0, 800ddde <__gethex+0x3ba>
 800ddd6:	4b1a      	ldr	r3, [pc, #104]	@ (800de40 <__gethex+0x41c>)
 800ddd8:	4602      	mov	r2, r0
 800ddda:	2184      	movs	r1, #132	@ 0x84
 800dddc:	e6c5      	b.n	800db6a <__gethex+0x146>
 800ddde:	6922      	ldr	r2, [r4, #16]
 800dde0:	3202      	adds	r2, #2
 800dde2:	f104 010c 	add.w	r1, r4, #12
 800dde6:	0092      	lsls	r2, r2, #2
 800dde8:	300c      	adds	r0, #12
 800ddea:	f7fc fed6 	bl	800ab9a <memcpy>
 800ddee:	4621      	mov	r1, r4
 800ddf0:	9801      	ldr	r0, [sp, #4]
 800ddf2:	f7fd fe81 	bl	800baf8 <_Bfree>
 800ddf6:	464c      	mov	r4, r9
 800ddf8:	6923      	ldr	r3, [r4, #16]
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de00:	6122      	str	r2, [r4, #16]
 800de02:	2201      	movs	r2, #1
 800de04:	615a      	str	r2, [r3, #20]
 800de06:	e7be      	b.n	800dd86 <__gethex+0x362>
 800de08:	6922      	ldr	r2, [r4, #16]
 800de0a:	455a      	cmp	r2, fp
 800de0c:	dd0b      	ble.n	800de26 <__gethex+0x402>
 800de0e:	2101      	movs	r1, #1
 800de10:	4620      	mov	r0, r4
 800de12:	f7ff fd9f 	bl	800d954 <rshift>
 800de16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de1a:	3701      	adds	r7, #1
 800de1c:	42bb      	cmp	r3, r7
 800de1e:	f6ff aee0 	blt.w	800dbe2 <__gethex+0x1be>
 800de22:	2501      	movs	r5, #1
 800de24:	e7c2      	b.n	800ddac <__gethex+0x388>
 800de26:	f016 061f 	ands.w	r6, r6, #31
 800de2a:	d0fa      	beq.n	800de22 <__gethex+0x3fe>
 800de2c:	4453      	add	r3, sl
 800de2e:	f1c6 0620 	rsb	r6, r6, #32
 800de32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800de36:	f7fd ff11 	bl	800bc5c <__hi0bits>
 800de3a:	42b0      	cmp	r0, r6
 800de3c:	dbe7      	blt.n	800de0e <__gethex+0x3ea>
 800de3e:	e7f0      	b.n	800de22 <__gethex+0x3fe>
 800de40:	0800eb6e 	.word	0x0800eb6e

0800de44 <L_shift>:
 800de44:	f1c2 0208 	rsb	r2, r2, #8
 800de48:	0092      	lsls	r2, r2, #2
 800de4a:	b570      	push	{r4, r5, r6, lr}
 800de4c:	f1c2 0620 	rsb	r6, r2, #32
 800de50:	6843      	ldr	r3, [r0, #4]
 800de52:	6804      	ldr	r4, [r0, #0]
 800de54:	fa03 f506 	lsl.w	r5, r3, r6
 800de58:	432c      	orrs	r4, r5
 800de5a:	40d3      	lsrs	r3, r2
 800de5c:	6004      	str	r4, [r0, #0]
 800de5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800de62:	4288      	cmp	r0, r1
 800de64:	d3f4      	bcc.n	800de50 <L_shift+0xc>
 800de66:	bd70      	pop	{r4, r5, r6, pc}

0800de68 <__match>:
 800de68:	b530      	push	{r4, r5, lr}
 800de6a:	6803      	ldr	r3, [r0, #0]
 800de6c:	3301      	adds	r3, #1
 800de6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de72:	b914      	cbnz	r4, 800de7a <__match+0x12>
 800de74:	6003      	str	r3, [r0, #0]
 800de76:	2001      	movs	r0, #1
 800de78:	bd30      	pop	{r4, r5, pc}
 800de7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800de82:	2d19      	cmp	r5, #25
 800de84:	bf98      	it	ls
 800de86:	3220      	addls	r2, #32
 800de88:	42a2      	cmp	r2, r4
 800de8a:	d0f0      	beq.n	800de6e <__match+0x6>
 800de8c:	2000      	movs	r0, #0
 800de8e:	e7f3      	b.n	800de78 <__match+0x10>

0800de90 <__hexnan>:
 800de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de94:	680b      	ldr	r3, [r1, #0]
 800de96:	6801      	ldr	r1, [r0, #0]
 800de98:	115e      	asrs	r6, r3, #5
 800de9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de9e:	f013 031f 	ands.w	r3, r3, #31
 800dea2:	b087      	sub	sp, #28
 800dea4:	bf18      	it	ne
 800dea6:	3604      	addne	r6, #4
 800dea8:	2500      	movs	r5, #0
 800deaa:	1f37      	subs	r7, r6, #4
 800deac:	4682      	mov	sl, r0
 800deae:	4690      	mov	r8, r2
 800deb0:	9301      	str	r3, [sp, #4]
 800deb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800deb6:	46b9      	mov	r9, r7
 800deb8:	463c      	mov	r4, r7
 800deba:	9502      	str	r5, [sp, #8]
 800debc:	46ab      	mov	fp, r5
 800debe:	784a      	ldrb	r2, [r1, #1]
 800dec0:	1c4b      	adds	r3, r1, #1
 800dec2:	9303      	str	r3, [sp, #12]
 800dec4:	b342      	cbz	r2, 800df18 <__hexnan+0x88>
 800dec6:	4610      	mov	r0, r2
 800dec8:	9105      	str	r1, [sp, #20]
 800deca:	9204      	str	r2, [sp, #16]
 800decc:	f7ff fd94 	bl	800d9f8 <__hexdig_fun>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d151      	bne.n	800df78 <__hexnan+0xe8>
 800ded4:	9a04      	ldr	r2, [sp, #16]
 800ded6:	9905      	ldr	r1, [sp, #20]
 800ded8:	2a20      	cmp	r2, #32
 800deda:	d818      	bhi.n	800df0e <__hexnan+0x7e>
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	459b      	cmp	fp, r3
 800dee0:	dd13      	ble.n	800df0a <__hexnan+0x7a>
 800dee2:	454c      	cmp	r4, r9
 800dee4:	d206      	bcs.n	800def4 <__hexnan+0x64>
 800dee6:	2d07      	cmp	r5, #7
 800dee8:	dc04      	bgt.n	800def4 <__hexnan+0x64>
 800deea:	462a      	mov	r2, r5
 800deec:	4649      	mov	r1, r9
 800deee:	4620      	mov	r0, r4
 800def0:	f7ff ffa8 	bl	800de44 <L_shift>
 800def4:	4544      	cmp	r4, r8
 800def6:	d952      	bls.n	800df9e <__hexnan+0x10e>
 800def8:	2300      	movs	r3, #0
 800defa:	f1a4 0904 	sub.w	r9, r4, #4
 800defe:	f844 3c04 	str.w	r3, [r4, #-4]
 800df02:	f8cd b008 	str.w	fp, [sp, #8]
 800df06:	464c      	mov	r4, r9
 800df08:	461d      	mov	r5, r3
 800df0a:	9903      	ldr	r1, [sp, #12]
 800df0c:	e7d7      	b.n	800debe <__hexnan+0x2e>
 800df0e:	2a29      	cmp	r2, #41	@ 0x29
 800df10:	d157      	bne.n	800dfc2 <__hexnan+0x132>
 800df12:	3102      	adds	r1, #2
 800df14:	f8ca 1000 	str.w	r1, [sl]
 800df18:	f1bb 0f00 	cmp.w	fp, #0
 800df1c:	d051      	beq.n	800dfc2 <__hexnan+0x132>
 800df1e:	454c      	cmp	r4, r9
 800df20:	d206      	bcs.n	800df30 <__hexnan+0xa0>
 800df22:	2d07      	cmp	r5, #7
 800df24:	dc04      	bgt.n	800df30 <__hexnan+0xa0>
 800df26:	462a      	mov	r2, r5
 800df28:	4649      	mov	r1, r9
 800df2a:	4620      	mov	r0, r4
 800df2c:	f7ff ff8a 	bl	800de44 <L_shift>
 800df30:	4544      	cmp	r4, r8
 800df32:	d936      	bls.n	800dfa2 <__hexnan+0x112>
 800df34:	f1a8 0204 	sub.w	r2, r8, #4
 800df38:	4623      	mov	r3, r4
 800df3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800df3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800df42:	429f      	cmp	r7, r3
 800df44:	d2f9      	bcs.n	800df3a <__hexnan+0xaa>
 800df46:	1b3b      	subs	r3, r7, r4
 800df48:	f023 0303 	bic.w	r3, r3, #3
 800df4c:	3304      	adds	r3, #4
 800df4e:	3401      	adds	r4, #1
 800df50:	3e03      	subs	r6, #3
 800df52:	42b4      	cmp	r4, r6
 800df54:	bf88      	it	hi
 800df56:	2304      	movhi	r3, #4
 800df58:	4443      	add	r3, r8
 800df5a:	2200      	movs	r2, #0
 800df5c:	f843 2b04 	str.w	r2, [r3], #4
 800df60:	429f      	cmp	r7, r3
 800df62:	d2fb      	bcs.n	800df5c <__hexnan+0xcc>
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	b91b      	cbnz	r3, 800df70 <__hexnan+0xe0>
 800df68:	4547      	cmp	r7, r8
 800df6a:	d128      	bne.n	800dfbe <__hexnan+0x12e>
 800df6c:	2301      	movs	r3, #1
 800df6e:	603b      	str	r3, [r7, #0]
 800df70:	2005      	movs	r0, #5
 800df72:	b007      	add	sp, #28
 800df74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df78:	3501      	adds	r5, #1
 800df7a:	2d08      	cmp	r5, #8
 800df7c:	f10b 0b01 	add.w	fp, fp, #1
 800df80:	dd06      	ble.n	800df90 <__hexnan+0x100>
 800df82:	4544      	cmp	r4, r8
 800df84:	d9c1      	bls.n	800df0a <__hexnan+0x7a>
 800df86:	2300      	movs	r3, #0
 800df88:	f844 3c04 	str.w	r3, [r4, #-4]
 800df8c:	2501      	movs	r5, #1
 800df8e:	3c04      	subs	r4, #4
 800df90:	6822      	ldr	r2, [r4, #0]
 800df92:	f000 000f 	and.w	r0, r0, #15
 800df96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df9a:	6020      	str	r0, [r4, #0]
 800df9c:	e7b5      	b.n	800df0a <__hexnan+0x7a>
 800df9e:	2508      	movs	r5, #8
 800dfa0:	e7b3      	b.n	800df0a <__hexnan+0x7a>
 800dfa2:	9b01      	ldr	r3, [sp, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d0dd      	beq.n	800df64 <__hexnan+0xd4>
 800dfa8:	f1c3 0320 	rsb	r3, r3, #32
 800dfac:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb0:	40da      	lsrs	r2, r3
 800dfb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dfb6:	4013      	ands	r3, r2
 800dfb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800dfbc:	e7d2      	b.n	800df64 <__hexnan+0xd4>
 800dfbe:	3f04      	subs	r7, #4
 800dfc0:	e7d0      	b.n	800df64 <__hexnan+0xd4>
 800dfc2:	2004      	movs	r0, #4
 800dfc4:	e7d5      	b.n	800df72 <__hexnan+0xe2>

0800dfc6 <__ascii_mbtowc>:
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	b901      	cbnz	r1, 800dfcc <__ascii_mbtowc+0x6>
 800dfca:	a901      	add	r1, sp, #4
 800dfcc:	b142      	cbz	r2, 800dfe0 <__ascii_mbtowc+0x1a>
 800dfce:	b14b      	cbz	r3, 800dfe4 <__ascii_mbtowc+0x1e>
 800dfd0:	7813      	ldrb	r3, [r2, #0]
 800dfd2:	600b      	str	r3, [r1, #0]
 800dfd4:	7812      	ldrb	r2, [r2, #0]
 800dfd6:	1e10      	subs	r0, r2, #0
 800dfd8:	bf18      	it	ne
 800dfda:	2001      	movne	r0, #1
 800dfdc:	b002      	add	sp, #8
 800dfde:	4770      	bx	lr
 800dfe0:	4610      	mov	r0, r2
 800dfe2:	e7fb      	b.n	800dfdc <__ascii_mbtowc+0x16>
 800dfe4:	f06f 0001 	mvn.w	r0, #1
 800dfe8:	e7f8      	b.n	800dfdc <__ascii_mbtowc+0x16>

0800dfea <_realloc_r>:
 800dfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfee:	4607      	mov	r7, r0
 800dff0:	4614      	mov	r4, r2
 800dff2:	460d      	mov	r5, r1
 800dff4:	b921      	cbnz	r1, 800e000 <_realloc_r+0x16>
 800dff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dffa:	4611      	mov	r1, r2
 800dffc:	f7fd bcb0 	b.w	800b960 <_malloc_r>
 800e000:	b92a      	cbnz	r2, 800e00e <_realloc_r+0x24>
 800e002:	f7fd fc39 	bl	800b878 <_free_r>
 800e006:	4625      	mov	r5, r4
 800e008:	4628      	mov	r0, r5
 800e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00e:	f000 f840 	bl	800e092 <_malloc_usable_size_r>
 800e012:	4284      	cmp	r4, r0
 800e014:	4606      	mov	r6, r0
 800e016:	d802      	bhi.n	800e01e <_realloc_r+0x34>
 800e018:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e01c:	d8f4      	bhi.n	800e008 <_realloc_r+0x1e>
 800e01e:	4621      	mov	r1, r4
 800e020:	4638      	mov	r0, r7
 800e022:	f7fd fc9d 	bl	800b960 <_malloc_r>
 800e026:	4680      	mov	r8, r0
 800e028:	b908      	cbnz	r0, 800e02e <_realloc_r+0x44>
 800e02a:	4645      	mov	r5, r8
 800e02c:	e7ec      	b.n	800e008 <_realloc_r+0x1e>
 800e02e:	42b4      	cmp	r4, r6
 800e030:	4622      	mov	r2, r4
 800e032:	4629      	mov	r1, r5
 800e034:	bf28      	it	cs
 800e036:	4632      	movcs	r2, r6
 800e038:	f7fc fdaf 	bl	800ab9a <memcpy>
 800e03c:	4629      	mov	r1, r5
 800e03e:	4638      	mov	r0, r7
 800e040:	f7fd fc1a 	bl	800b878 <_free_r>
 800e044:	e7f1      	b.n	800e02a <_realloc_r+0x40>

0800e046 <__ascii_wctomb>:
 800e046:	4603      	mov	r3, r0
 800e048:	4608      	mov	r0, r1
 800e04a:	b141      	cbz	r1, 800e05e <__ascii_wctomb+0x18>
 800e04c:	2aff      	cmp	r2, #255	@ 0xff
 800e04e:	d904      	bls.n	800e05a <__ascii_wctomb+0x14>
 800e050:	228a      	movs	r2, #138	@ 0x8a
 800e052:	601a      	str	r2, [r3, #0]
 800e054:	f04f 30ff 	mov.w	r0, #4294967295
 800e058:	4770      	bx	lr
 800e05a:	700a      	strb	r2, [r1, #0]
 800e05c:	2001      	movs	r0, #1
 800e05e:	4770      	bx	lr

0800e060 <fiprintf>:
 800e060:	b40e      	push	{r1, r2, r3}
 800e062:	b503      	push	{r0, r1, lr}
 800e064:	4601      	mov	r1, r0
 800e066:	ab03      	add	r3, sp, #12
 800e068:	4805      	ldr	r0, [pc, #20]	@ (800e080 <fiprintf+0x20>)
 800e06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e06e:	6800      	ldr	r0, [r0, #0]
 800e070:	9301      	str	r3, [sp, #4]
 800e072:	f7ff f9b1 	bl	800d3d8 <_vfiprintf_r>
 800e076:	b002      	add	sp, #8
 800e078:	f85d eb04 	ldr.w	lr, [sp], #4
 800e07c:	b003      	add	sp, #12
 800e07e:	4770      	bx	lr
 800e080:	20000018 	.word	0x20000018

0800e084 <abort>:
 800e084:	b508      	push	{r3, lr}
 800e086:	2006      	movs	r0, #6
 800e088:	f000 f834 	bl	800e0f4 <raise>
 800e08c:	2001      	movs	r0, #1
 800e08e:	f7f3 fd31 	bl	8001af4 <_exit>

0800e092 <_malloc_usable_size_r>:
 800e092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e096:	1f18      	subs	r0, r3, #4
 800e098:	2b00      	cmp	r3, #0
 800e09a:	bfbc      	itt	lt
 800e09c:	580b      	ldrlt	r3, [r1, r0]
 800e09e:	18c0      	addlt	r0, r0, r3
 800e0a0:	4770      	bx	lr

0800e0a2 <_raise_r>:
 800e0a2:	291f      	cmp	r1, #31
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	460c      	mov	r4, r1
 800e0aa:	d904      	bls.n	800e0b6 <_raise_r+0x14>
 800e0ac:	2316      	movs	r3, #22
 800e0ae:	6003      	str	r3, [r0, #0]
 800e0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b4:	bd38      	pop	{r3, r4, r5, pc}
 800e0b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e0b8:	b112      	cbz	r2, 800e0c0 <_raise_r+0x1e>
 800e0ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0be:	b94b      	cbnz	r3, 800e0d4 <_raise_r+0x32>
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	f000 f831 	bl	800e128 <_getpid_r>
 800e0c6:	4622      	mov	r2, r4
 800e0c8:	4601      	mov	r1, r0
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0d0:	f000 b818 	b.w	800e104 <_kill_r>
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d00a      	beq.n	800e0ee <_raise_r+0x4c>
 800e0d8:	1c59      	adds	r1, r3, #1
 800e0da:	d103      	bne.n	800e0e4 <_raise_r+0x42>
 800e0dc:	2316      	movs	r3, #22
 800e0de:	6003      	str	r3, [r0, #0]
 800e0e0:	2001      	movs	r0, #1
 800e0e2:	e7e7      	b.n	800e0b4 <_raise_r+0x12>
 800e0e4:	2100      	movs	r1, #0
 800e0e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	4798      	blx	r3
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	e7e0      	b.n	800e0b4 <_raise_r+0x12>
	...

0800e0f4 <raise>:
 800e0f4:	4b02      	ldr	r3, [pc, #8]	@ (800e100 <raise+0xc>)
 800e0f6:	4601      	mov	r1, r0
 800e0f8:	6818      	ldr	r0, [r3, #0]
 800e0fa:	f7ff bfd2 	b.w	800e0a2 <_raise_r>
 800e0fe:	bf00      	nop
 800e100:	20000018 	.word	0x20000018

0800e104 <_kill_r>:
 800e104:	b538      	push	{r3, r4, r5, lr}
 800e106:	4d07      	ldr	r5, [pc, #28]	@ (800e124 <_kill_r+0x20>)
 800e108:	2300      	movs	r3, #0
 800e10a:	4604      	mov	r4, r0
 800e10c:	4608      	mov	r0, r1
 800e10e:	4611      	mov	r1, r2
 800e110:	602b      	str	r3, [r5, #0]
 800e112:	f7f3 fcdf 	bl	8001ad4 <_kill>
 800e116:	1c43      	adds	r3, r0, #1
 800e118:	d102      	bne.n	800e120 <_kill_r+0x1c>
 800e11a:	682b      	ldr	r3, [r5, #0]
 800e11c:	b103      	cbz	r3, 800e120 <_kill_r+0x1c>
 800e11e:	6023      	str	r3, [r4, #0]
 800e120:	bd38      	pop	{r3, r4, r5, pc}
 800e122:	bf00      	nop
 800e124:	20000b3c 	.word	0x20000b3c

0800e128 <_getpid_r>:
 800e128:	f7f3 bccc 	b.w	8001ac4 <_getpid>

0800e12c <_init>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	bf00      	nop
 800e130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e132:	bc08      	pop	{r3}
 800e134:	469e      	mov	lr, r3
 800e136:	4770      	bx	lr

0800e138 <_fini>:
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	bf00      	nop
 800e13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13e:	bc08      	pop	{r3}
 800e140:	469e      	mov	lr, r3
 800e142:	4770      	bx	lr
